
LED-Panel-Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037d4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000037d4  00003888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000532  00800082  00800082  000038aa  2**0
                  ALLOC
  3 .stab         000066a8  00000000  00000000  000038ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002253  00000000  00000000  00009f54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__ctors_end>
       4:	0c 94 bb 01 	jmp	0x376	; 0x376 <__bad_interrupt>
       8:	0c 94 bb 01 	jmp	0x376	; 0x376 <__bad_interrupt>
       c:	0c 94 bb 01 	jmp	0x376	; 0x376 <__bad_interrupt>
      10:	0c 94 bb 01 	jmp	0x376	; 0x376 <__bad_interrupt>
      14:	0c 94 bb 01 	jmp	0x376	; 0x376 <__bad_interrupt>
      18:	0c 94 bb 01 	jmp	0x376	; 0x376 <__bad_interrupt>
      1c:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__vector_7>
      20:	0c 94 bb 01 	jmp	0x376	; 0x376 <__bad_interrupt>
      24:	0c 94 bb 01 	jmp	0x376	; 0x376 <__bad_interrupt>
      28:	0c 94 49 04 	jmp	0x892	; 0x892 <__vector_10>
      2c:	0c 94 bb 01 	jmp	0x376	; 0x376 <__bad_interrupt>
      30:	0c 94 17 04 	jmp	0x82e	; 0x82e <__vector_12>
      34:	0c 94 bb 01 	jmp	0x376	; 0x376 <__bad_interrupt>
      38:	0c 94 bb 01 	jmp	0x376	; 0x376 <__bad_interrupt>
      3c:	0c 94 bb 01 	jmp	0x376	; 0x376 <__bad_interrupt>
      40:	0c 94 bb 01 	jmp	0x376	; 0x376 <__bad_interrupt>
      44:	0c 94 bb 01 	jmp	0x376	; 0x376 <__bad_interrupt>
      48:	0c 94 bb 01 	jmp	0x376	; 0x376 <__bad_interrupt>
      4c:	0c 94 bb 01 	jmp	0x376	; 0x376 <__bad_interrupt>
      50:	0c 94 bb 01 	jmp	0x376	; 0x376 <__bad_interrupt>

00000054 <charset>:
      54:	02 00 00 02 5f 00 04 03 00 03 00 06 14 7f 14 7f     ...._...........
      64:	14 00 06 24 2a 7f 2a 12 00 06 23 13 08 64 62 00     ...$*.*...#..db.
      74:	06 36 49 55 22 50 00 06 00 00 03 00 00 00 06 00     .6IU"P..........
      84:	1c 22 41 00 00 06 00 41 22 1c 00 00 06 14 08 3e     ."A....A"......>
      94:	08 14 00 06 08 08 3e 08 08 00 06 00 00 50 30 00     ......>......P0.
      a4:	00 06 08 08 08 08 08 00 06 00 00 60 60 00 00 06     ...........``...
      b4:	20 10 08 04 02 00 06 3e 51 49 45 3e 00 06 00 42      ......>QIE>...B
      c4:	7f 40 00 00 06 42 61 51 49 46 00 06 21 41 45 4b     .@...BaQIF..!AEK
      d4:	31 00 06 18 14 12 7f 10 00 06 27 45 45 45 39 00     1.........'EEE9.
      e4:	06 3c 4a 49 49 30 00 06 03 01 71 09 07 00 06 36     .<JII0....q....6
      f4:	49 49 49 36 00 06 06 49 49 29 1e 00 06 00 00 36     III6...II).....6
     104:	36 00 00 06 00 00 56 36 00 00 06 08 14 22 41 00     6.....V6....."A.
     114:	00 06 14 14 14 14 14 00 06 41 22 14 08 00 00 06     .........A".....
     124:	02 01 51 09 06 00 06 32 49 79 41 3e 00 06 7e 11     ..Q....2IyA>..~.
     134:	11 11 7e 00 06 7f 49 49 49 36 00 06 3e 41 41 41     ..~...III6..>AAA
     144:	22 00 06 7f 41 41 22 1c 00 06 7f 49 49 49 41 00     "...AA"....IIIA.
     154:	06 7f 09 09 09 01 00 06 3e 41 49 49 7a 00 06 7f     ........>AIIz...
     164:	08 08 08 7f 00 06 00 41 7f 41 00 00 06 20 40 41     .......A.A... @A
     174:	3f 01 00 06 7f 08 14 22 41 00 06 7f 40 40 40 40     ?......"A...@@@@
     184:	00 06 7f 02 0c 02 7f 00 06 7f 04 08 10 7f 00 06     ................
     194:	3e 41 41 41 3e 00 06 7f 09 09 09 06 00 06 3e 41     >AAA>.........>A
     1a4:	51 21 5e 00 06 7f 09 19 29 46 00 06 46 49 49 49     Q!^.....)F..FIII
     1b4:	31 00 06 01 01 7f 01 01 00 06 3f 40 40 40 3f 00     1.........?@@@?.
     1c4:	06 1f 20 40 20 1f 00 06 3f 40 38 40 3f 00 06 63     .. @ ...?@8@?..c
     1d4:	14 08 14 63 00 06 07 08 70 08 07 00 06 61 51 49     ...c....p....aQI
     1e4:	45 43 00 06 00 7f 41 41 00 00 06 02 04 08 10 20     EC....AA....... 
     1f4:	00 06 00 41 41 7f 00 00 06 04 02 01 02 04 00 06     ...AA...........
     204:	40 40 40 40 40 00 06 00 01 02 04 00 00 06 20 54     @@@@@......... T
     214:	54 54 78 00 06 7f 48 44 44 38 00 06 38 44 44 44     TTx...HDD8..8DDD
     224:	20 00 06 38 44 44 48 7f 00 06 38 54 54 54 18 00      ..8DDH...8TTT..
     234:	06 08 7e 09 01 02 00 06 0c 52 52 52 3c 00 06 7f     ..~......RRR<...
     244:	08 04 04 78 00 06 00 44 7d 40 00 00 06 20 40 44     ...x...D}@... @D
     254:	3d 00 00 06 7f 10 28 44 00 00 06 00 41 7f 40 00     =.....(D....A.@.
     264:	00 06 78 08 30 08 70 00 06 78 10 08 08 70 00 06     ..x.0.p..x...p..
     274:	30 48 48 48 30 00 06 7c 14 14 14 08 00 06 08 14     0HHH0..|........
     284:	14 18 7c 00 06 7c 08 04 04 08 00 06 48 54 54 54     ..|..|......HTTT
     294:	20 00 06 04 3f 44 40 20 00 06 3c 40 40 20 7c 00      ...?D@ ..<@@ |.
     2a4:	06 1c 20 40 20 1c 00 06 3c 40 38 40 3c 00 06 44     .. @ ...<@8@<..D
     2b4:	28 10 28 44 00 06 0c 50 50 50 3c 00 06 44 64 54     (.(D...PPP<..DdT
     2c4:	4c 44 00 06 00 08 36 41 00 00 06 00 00 7f 00 00     LD....6A........
     2d4:	00 06 00 41 36 08 00 00 06 08 04 08 10 08 00        ...A6..........

000002e3 <__c.1539>:
     2e3:	5c 2d 00                                            \-.

000002e6 <__c.1537>:
     2e6:	5c 33 00                                            \3.

000002e9 <__c.1535>:
     2e9:	5c 32 00                                            \2.

000002ec <__c.1533>:
     2ec:	5c 31 00                                            \1.

000002ef <NTP_CLIENT_MONTH_TO_DAYS>:
     2ef:	1f 1d 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

000002fb <DHCP_Basic_Content>:
     2fb:	01 01 06 00                                         ....

000002ff <DHCP_Transaction_ID>:
     2ff:	17 04 19 89                                         ....

00000303 <DHCP_Magic_Cookie>:
     303:	63 82 53 63                                         c.Sc

00000307 <DHCP_Option_Discover>:
     307:	35 01 01                                            5..

0000030a <DHCP_Option_Request>:
     30a:	35 01 03                                            5..

0000030d <enc28j60_config>:
     30d:	04 00 05 1a 06 ff 07 1f 08 00 09 00 0a ff 0b 19     ................
     31d:	c1 00 c0 0d c2 32 ca ee cb 05 c4 12 c6 12 c7 0c     .....2..........
     32d:	e4 00 e5 00 e2 00 e3 00 e0 00 e1 00 38 a1 00        ............8..

0000033c <__ctors_end>:
     33c:	11 24       	eor	r1, r1
     33e:	1f be       	out	0x3f, r1	; 63
     340:	cf e5       	ldi	r28, 0x5F	; 95
     342:	d8 e0       	ldi	r29, 0x08	; 8
     344:	de bf       	out	0x3e, r29	; 62
     346:	cd bf       	out	0x3d, r28	; 61

00000348 <__do_copy_data>:
     348:	10 e0       	ldi	r17, 0x00	; 0
     34a:	a0 e6       	ldi	r26, 0x60	; 96
     34c:	b0 e0       	ldi	r27, 0x00	; 0
     34e:	e4 ed       	ldi	r30, 0xD4	; 212
     350:	f7 e3       	ldi	r31, 0x37	; 55
     352:	02 c0       	rjmp	.+4      	; 0x358 <__do_copy_data+0x10>
     354:	05 90       	lpm	r0, Z+
     356:	0d 92       	st	X+, r0
     358:	a2 38       	cpi	r26, 0x82	; 130
     35a:	b1 07       	cpc	r27, r17
     35c:	d9 f7       	brne	.-10     	; 0x354 <__do_copy_data+0xc>

0000035e <__do_clear_bss>:
     35e:	15 e0       	ldi	r17, 0x05	; 5
     360:	a2 e8       	ldi	r26, 0x82	; 130
     362:	b0 e0       	ldi	r27, 0x00	; 0
     364:	01 c0       	rjmp	.+2      	; 0x368 <.do_clear_bss_start>

00000366 <.do_clear_bss_loop>:
     366:	1d 92       	st	X+, r1

00000368 <.do_clear_bss_start>:
     368:	a4 3b       	cpi	r26, 0xB4	; 180
     36a:	b1 07       	cpc	r27, r17
     36c:	e1 f7       	brne	.-8      	; 0x366 <.do_clear_bss_loop>
     36e:	0e 94 88 04 	call	0x910	; 0x910 <main>
     372:	0c 94 e8 1b 	jmp	0x37d0	; 0x37d0 <_exit>

00000376 <__bad_interrupt>:
     376:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000037a <lcd_pset>:
}


void lcd_pset(uint8_t x, uint8_t y) {

	lcd_content[y*32 + (x/8)] |= (1<<(x%8));
     37a:	e6 2f       	mov	r30, r22
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	95 e0       	ldi	r25, 0x05	; 5
     380:	ee 0f       	add	r30, r30
     382:	ff 1f       	adc	r31, r31
     384:	9a 95       	dec	r25
     386:	e1 f7       	brne	.-8      	; 0x380 <lcd_pset+0x6>
     388:	98 2f       	mov	r25, r24
     38a:	96 95       	lsr	r25
     38c:	96 95       	lsr	r25
     38e:	96 95       	lsr	r25
     390:	e9 0f       	add	r30, r25
     392:	f1 1d       	adc	r31, r1
     394:	e3 57       	subi	r30, 0x73	; 115
     396:	ff 4f       	sbci	r31, 0xFF	; 255
     398:	90 81       	ld	r25, Z
     39a:	87 70       	andi	r24, 0x07	; 7
     39c:	21 e0       	ldi	r18, 0x01	; 1
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <lcd_pset+0x2c>
     3a2:	22 0f       	add	r18, r18
     3a4:	33 1f       	adc	r19, r19
     3a6:	8a 95       	dec	r24
     3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <lcd_pset+0x28>
     3aa:	92 2b       	or	r25, r18
     3ac:	90 83       	st	Z, r25
}
     3ae:	08 95       	ret

000003b0 <lcd_pclear>:

void lcd_pclear(uint8_t x, uint8_t y) {

	lcd_content[y*32 + (x/8)] &= ~(1<<(x%8));
     3b0:	e6 2f       	mov	r30, r22
     3b2:	f0 e0       	ldi	r31, 0x00	; 0
     3b4:	25 e0       	ldi	r18, 0x05	; 5
     3b6:	ee 0f       	add	r30, r30
     3b8:	ff 1f       	adc	r31, r31
     3ba:	2a 95       	dec	r18
     3bc:	e1 f7       	brne	.-8      	; 0x3b6 <lcd_pclear+0x6>
     3be:	98 2f       	mov	r25, r24
     3c0:	96 95       	lsr	r25
     3c2:	96 95       	lsr	r25
     3c4:	96 95       	lsr	r25
     3c6:	e9 0f       	add	r30, r25
     3c8:	f1 1d       	adc	r31, r1
     3ca:	e3 57       	subi	r30, 0x73	; 115
     3cc:	ff 4f       	sbci	r31, 0xFF	; 255
     3ce:	90 81       	ld	r25, Z
     3d0:	87 70       	andi	r24, 0x07	; 7
     3d2:	21 e0       	ldi	r18, 0x01	; 1
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <lcd_pclear+0x2c>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	8a 95       	dec	r24
     3de:	e2 f7       	brpl	.-8      	; 0x3d8 <lcd_pclear+0x28>
     3e0:	20 95       	com	r18
     3e2:	92 23       	and	r25, r18
     3e4:	90 83       	st	Z, r25
	//lcd_content[x + ((y/8)*128)] &= ~(1<<(y%8));
}
     3e6:	08 95       	ret

000003e8 <lcd_rect>:
	lcd_rect(0, 0, 255, 15, 0);
}



void lcd_rect(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint8_t color) {
     3e8:	df 92       	push	r13
     3ea:	ef 92       	push	r14
     3ec:	ff 92       	push	r15
     3ee:	0f 93       	push	r16
     3f0:	1f 93       	push	r17
     3f2:	16 2f       	mov	r17, r22
     3f4:	f4 2e       	mov	r15, r20
     3f6:	e2 2e       	mov	r14, r18

	uint8_t x_int, y_int;

	if (color) {
     3f8:	00 23       	and	r16, r16
     3fa:	11 f4       	brne	.+4      	; 0x400 <lcd_rect+0x18>
     3fc:	08 2f       	mov	r16, r24
     3fe:	16 c0       	rjmp	.+44     	; 0x42c <lcd_rect+0x44>
     400:	08 2f       	mov	r16, r24
     402:	08 c0       	rjmp	.+16     	; 0x414 <lcd_rect+0x2c>
		for(x_int = x1; x_int < x2; x_int++) {
			for(y_int = y1; y_int < y2; y_int++) {
				lcd_pset(x_int, y_int);
     404:	80 2f       	mov	r24, r16
     406:	6d 2d       	mov	r22, r13
     408:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_pset>

	uint8_t x_int, y_int;

	if (color) {
		for(x_int = x1; x_int < x2; x_int++) {
			for(y_int = y1; y_int < y2; y_int++) {
     40c:	d3 94       	inc	r13
     40e:	de 14       	cp	r13, r14
     410:	c8 f3       	brcs	.-14     	; 0x404 <lcd_rect+0x1c>
void lcd_rect(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint8_t color) {

	uint8_t x_int, y_int;

	if (color) {
		for(x_int = x1; x_int < x2; x_int++) {
     412:	0f 5f       	subi	r16, 0xFF	; 255
     414:	0f 15       	cp	r16, r15
     416:	70 f4       	brcc	.+28     	; 0x434 <lcd_rect+0x4c>
     418:	d1 2e       	mov	r13, r17
     41a:	f9 cf       	rjmp	.-14     	; 0x40e <lcd_rect+0x26>
			}
		}
	} else {
		for(x_int = x1; x_int < x2; x_int++) {
			for(y_int = y1; y_int < y2; y_int++) {
				lcd_pclear(x_int, y_int);
     41c:	80 2f       	mov	r24, r16
     41e:	6d 2d       	mov	r22, r13
     420:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <lcd_pclear>
				lcd_pset(x_int, y_int);
			}
		}
	} else {
		for(x_int = x1; x_int < x2; x_int++) {
			for(y_int = y1; y_int < y2; y_int++) {
     424:	d3 94       	inc	r13
     426:	de 14       	cp	r13, r14
     428:	c8 f3       	brcs	.-14     	; 0x41c <lcd_rect+0x34>
			for(y_int = y1; y_int < y2; y_int++) {
				lcd_pset(x_int, y_int);
			}
		}
	} else {
		for(x_int = x1; x_int < x2; x_int++) {
     42a:	0f 5f       	subi	r16, 0xFF	; 255
     42c:	0f 15       	cp	r16, r15
     42e:	10 f4       	brcc	.+4      	; 0x434 <lcd_rect+0x4c>
     430:	d1 2e       	mov	r13, r17
     432:	f9 cf       	rjmp	.-14     	; 0x426 <lcd_rect+0x3e>
			for(y_int = y1; y_int < y2; y_int++) {
				lcd_pclear(x_int, y_int);
			}
		}
	}
}
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	ff 90       	pop	r15
     43a:	ef 90       	pop	r14
     43c:	df 90       	pop	r13
     43e:	08 95       	ret

00000440 <lcd_clear>:

				 };



void lcd_clear(void) {
     440:	0f 93       	push	r16

	lcd_rect(0, 0, 255, 15, 0);
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	4f ef       	ldi	r20, 0xFF	; 255
     448:	2f e0       	ldi	r18, 0x0F	; 15
     44a:	00 e0       	ldi	r16, 0x00	; 0
     44c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <lcd_rect>
}
     450:	0f 91       	pop	r16
     452:	08 95       	ret

00000454 <lcd_color>:
	//lcd_content[x + ((y/8)*128)] &= ~(1<<(y%8));
}

uint8_t lcd_color(uint8_t x, uint8_t y) {

	return (lcd_content[y*32 + (x/8)] & (1<<(x%8))) != 0;
     454:	e6 2f       	mov	r30, r22
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	35 e0       	ldi	r19, 0x05	; 5
     45a:	ee 0f       	add	r30, r30
     45c:	ff 1f       	adc	r31, r31
     45e:	3a 95       	dec	r19
     460:	e1 f7       	brne	.-8      	; 0x45a <lcd_color+0x6>
     462:	98 2f       	mov	r25, r24
     464:	96 95       	lsr	r25
     466:	96 95       	lsr	r25
     468:	96 95       	lsr	r25
     46a:	e9 0f       	add	r30, r25
     46c:	f1 1d       	adc	r31, r1
     46e:	e3 57       	subi	r30, 0x73	; 115
     470:	ff 4f       	sbci	r31, 0xFF	; 255
     472:	20 81       	ld	r18, Z
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	87 70       	andi	r24, 0x07	; 7
     478:	02 c0       	rjmp	.+4      	; 0x47e <lcd_color+0x2a>
     47a:	35 95       	asr	r19
     47c:	27 95       	ror	r18
     47e:	8a 95       	dec	r24
     480:	e2 f7       	brpl	.-8      	; 0x47a <lcd_color+0x26>
	//return ((lcd_content[x + ((y/8)*128)] & (1<<(y%8))) != 0);
}
     482:	82 2f       	mov	r24, r18
     484:	81 70       	andi	r24, 0x01	; 1
     486:	08 95       	ret

00000488 <lcd_pput>:

inline void lcd_pput(uint8_t x, uint8_t y, uint8_t color) {

	if (color)
     488:	44 23       	and	r20, r20
     48a:	19 f0       	breq	.+6      	; 0x492 <lcd_pput+0xa>
		lcd_pset(x,y);
     48c:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_pset>
     490:	08 95       	ret
	else
		lcd_pclear(x,y);
     492:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <lcd_pclear>
     496:	08 95       	ret

00000498 <lcd_frame>:
}

void lcd_frame(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
     498:	df 92       	push	r13
     49a:	ef 92       	push	r14
     49c:	ff 92       	push	r15
     49e:	0f 93       	push	r16
     4a0:	1f 93       	push	r17
     4a2:	08 2f       	mov	r16, r24
     4a4:	16 2f       	mov	r17, r22
     4a6:	f4 2e       	mov	r15, r20
     4a8:	d2 2e       	mov	r13, r18
     4aa:	e8 2e       	mov	r14, r24

	uint8_t x_int, y_int;
	for(x_int = x1; x_int < x2; x_int++) {
     4ac:	09 c0       	rjmp	.+18     	; 0x4c0 <lcd_frame+0x28>
		lcd_pset(x_int, y1);
     4ae:	8e 2d       	mov	r24, r14
     4b0:	61 2f       	mov	r22, r17
     4b2:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_pset>
		lcd_pset(x_int, y2);
     4b6:	8e 2d       	mov	r24, r14
     4b8:	6d 2d       	mov	r22, r13
     4ba:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_pset>
}

void lcd_frame(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {

	uint8_t x_int, y_int;
	for(x_int = x1; x_int < x2; x_int++) {
     4be:	e3 94       	inc	r14
     4c0:	ef 14       	cp	r14, r15
     4c2:	a8 f3       	brcs	.-22     	; 0x4ae <lcd_frame+0x16>
     4c4:	09 c0       	rjmp	.+18     	; 0x4d8 <lcd_frame+0x40>
		lcd_pset(x_int, y1);
		lcd_pset(x_int, y2);
	}

	for(y_int = y1; y_int <= y2; y_int++) {
		lcd_pset(x1, y_int);
     4c6:	80 2f       	mov	r24, r16
     4c8:	61 2f       	mov	r22, r17
     4ca:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_pset>
		lcd_pset(x2, y_int);
     4ce:	8f 2d       	mov	r24, r15
     4d0:	61 2f       	mov	r22, r17
     4d2:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_pset>
	for(x_int = x1; x_int < x2; x_int++) {
		lcd_pset(x_int, y1);
		lcd_pset(x_int, y2);
	}

	for(y_int = y1; y_int <= y2; y_int++) {
     4d6:	1f 5f       	subi	r17, 0xFF	; 255
     4d8:	d1 16       	cp	r13, r17
     4da:	a8 f7       	brcc	.-22     	; 0x4c6 <lcd_frame+0x2e>
		lcd_pset(x1, y_int);
		lcd_pset(x2, y_int);
	}
}
     4dc:	1f 91       	pop	r17
     4de:	0f 91       	pop	r16
     4e0:	ff 90       	pop	r15
     4e2:	ef 90       	pop	r14
     4e4:	df 90       	pop	r13
     4e6:	08 95       	ret

000004e8 <lcd_hline>:

void lcd_hline(uint8_t x1, uint8_t x2, uint8_t y) {
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	df 93       	push	r29
     4ee:	cf 93       	push	r28
     4f0:	0f 92       	push	r0
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
     4f6:	16 2f       	mov	r17, r22
     4f8:	08 2f       	mov	r16, r24

	uint8_t x_int;
	for(x_int = x1; x_int < x2; x_int++)
     4fa:	07 c0       	rjmp	.+14     	; 0x50a <lcd_hline+0x22>
		lcd_pset(x_int, y);
     4fc:	80 2f       	mov	r24, r16
     4fe:	64 2f       	mov	r22, r20
     500:	49 83       	std	Y+1, r20	; 0x01
     502:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_pset>
}

void lcd_hline(uint8_t x1, uint8_t x2, uint8_t y) {

	uint8_t x_int;
	for(x_int = x1; x_int < x2; x_int++)
     506:	0f 5f       	subi	r16, 0xFF	; 255
     508:	49 81       	ldd	r20, Y+1	; 0x01
     50a:	01 17       	cp	r16, r17
     50c:	b8 f3       	brcs	.-18     	; 0x4fc <lcd_hline+0x14>
		lcd_pset(x_int, y);

}
     50e:	0f 90       	pop	r0
     510:	cf 91       	pop	r28
     512:	df 91       	pop	r29
     514:	1f 91       	pop	r17
     516:	0f 91       	pop	r16
     518:	08 95       	ret

0000051a <lcd_vline>:

void lcd_vline(uint8_t y1, uint8_t y2, uint8_t x) {
     51a:	0f 93       	push	r16
     51c:	1f 93       	push	r17
     51e:	df 93       	push	r29
     520:	cf 93       	push	r28
     522:	0f 92       	push	r0
     524:	cd b7       	in	r28, 0x3d	; 61
     526:	de b7       	in	r29, 0x3e	; 62
     528:	16 2f       	mov	r17, r22
     52a:	08 2f       	mov	r16, r24

	uint8_t y_int;
	for(y_int = y1; y_int < y2; y_int++)
     52c:	07 c0       	rjmp	.+14     	; 0x53c <lcd_vline+0x22>
		lcd_pset(x, y_int);
     52e:	84 2f       	mov	r24, r20
     530:	60 2f       	mov	r22, r16
     532:	49 83       	std	Y+1, r20	; 0x01
     534:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_pset>
}

void lcd_vline(uint8_t y1, uint8_t y2, uint8_t x) {

	uint8_t y_int;
	for(y_int = y1; y_int < y2; y_int++)
     538:	0f 5f       	subi	r16, 0xFF	; 255
     53a:	49 81       	ldd	r20, Y+1	; 0x01
     53c:	01 17       	cp	r16, r17
     53e:	b8 f3       	brcs	.-18     	; 0x52e <lcd_vline+0x14>
		lcd_pset(x, y_int);
}
     540:	0f 90       	pop	r0
     542:	cf 91       	pop	r28
     544:	df 91       	pop	r29
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	08 95       	ret

0000054c <lcd_char>:


uint8_t lcd_char(uint16_t val, uint8_t x, uint8_t y) {
     54c:	af 92       	push	r10
     54e:	bf 92       	push	r11
     550:	df 92       	push	r13
     552:	ef 92       	push	r14
     554:	ff 92       	push	r15
     556:	0f 93       	push	r16
     558:	1f 93       	push	r17
     55a:	df 93       	push	r29
     55c:	cf 93       	push	r28
     55e:	00 d0       	rcall	.+0      	; 0x560 <lcd_char+0x14>
     560:	cd b7       	in	r28, 0x3d	; 61
     562:	de b7       	in	r29, 0x3e	; 62
     564:	16 2f       	mov	r17, r22

	uint8_t x_int,y_int;

	if (val < 32)
     566:	80 32       	cpi	r24, 0x20	; 32
     568:	91 05       	cpc	r25, r1
     56a:	18 f4       	brcc	.+6      	; 0x572 <lcd_char+0x26>
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	0a c0       	rjmp	.+20     	; 0x586 <lcd_char+0x3a>
		val = 0;
	else if (val < 128)
     572:	80 38       	cpi	r24, 0x80	; 128
     574:	91 05       	cpc	r25, r1
     576:	10 f4       	brcc	.+4      	; 0x57c <lcd_char+0x30>
		val -= 32;
     578:	80 97       	sbiw	r24, 0x20	; 32
     57a:	05 c0       	rjmp	.+10     	; 0x586 <lcd_char+0x3a>
	else {
		switch(val) {
     57c:	80 38       	cpi	r24, 0x80	; 128
     57e:	91 05       	cpc	r25, r1
     580:	11 f4       	brne	.+4      	; 0x586 <lcd_char+0x3a>
     582:	84 e6       	ldi	r24, 0x64	; 100
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	08 c0       	rjmp	.+16     	; 0x59c <lcd_char+0x50>
	}

	uint8_t charwidth = 0;
	uint16_t charptr = 0;
	while(val--) {
		charptr += pgm_read_byte(&charset[charptr]) + 1;
     58c:	e4 90       	lpm	r14, Z
     58e:	ff 24       	eor	r15, r15
     590:	08 94       	sec
     592:	e1 1c       	adc	r14, r1
     594:	f1 1c       	adc	r15, r1
     596:	2e 0d       	add	r18, r14
     598:	3f 1d       	adc	r19, r15
     59a:	01 97       	sbiw	r24, 0x01	; 1
     59c:	f9 01       	movw	r30, r18
     59e:	ec 5a       	subi	r30, 0xAC	; 172
     5a0:	ff 4f       	sbci	r31, 0xFF	; 255
		}
	}

	uint8_t charwidth = 0;
	uint16_t charptr = 0;
	while(val--) {
     5a2:	00 97       	sbiw	r24, 0x00	; 0
     5a4:	99 f7       	brne	.-26     	; 0x58c <lcd_char+0x40>
		charptr += pgm_read_byte(&charset[charptr]) + 1;
	}
	charwidth = pgm_read_byte(&charset[charptr++]);
     5a6:	e4 90       	lpm	r14, Z
     5a8:	55 e5       	ldi	r21, 0x55	; 85
     5aa:	a5 2e       	mov	r10, r21
     5ac:	50 e0       	ldi	r21, 0x00	; 0
     5ae:	b5 2e       	mov	r11, r21
     5b0:	a2 0e       	add	r10, r18
     5b2:	b3 1e       	adc	r11, r19
     5b4:	00 e0       	ldi	r16, 0x00	; 0

	for(x_int = 0; x_int < charwidth; x_int++) {
     5b6:	19 c0       	rjmp	.+50     	; 0x5ea <lcd_char+0x9e>
		uint8_t charpx = pgm_read_byte(&charset[charptr++]);
     5b8:	f5 01       	movw	r30, r10
     5ba:	f4 90       	lpm	r15, Z
     5bc:	90 e0       	ldi	r25, 0x00	; 0
		for(y_int = 0; y_int < 8; y_int++) {
			if (0x01 & charpx)
				lcd_pset(x + x_int, y + y_int);
     5be:	d0 2e       	mov	r13, r16
     5c0:	d1 0e       	add	r13, r17
	charwidth = pgm_read_byte(&charset[charptr++]);

	for(x_int = 0; x_int < charwidth; x_int++) {
		uint8_t charpx = pgm_read_byte(&charset[charptr++]);
		for(y_int = 0; y_int < 8; y_int++) {
			if (0x01 & charpx)
     5c2:	f0 fe       	sbrs	r15, 0
     5c4:	09 c0       	rjmp	.+18     	; 0x5d8 <lcd_char+0x8c>
				lcd_pset(x + x_int, y + y_int);
     5c6:	69 2f       	mov	r22, r25
     5c8:	64 0f       	add	r22, r20
     5ca:	8d 2d       	mov	r24, r13
     5cc:	4a 83       	std	Y+2, r20	; 0x02
     5ce:	99 83       	std	Y+1, r25	; 0x01
     5d0:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_pset>
     5d4:	99 81       	ldd	r25, Y+1	; 0x01
     5d6:	4a 81       	ldd	r20, Y+2	; 0x02
	}
	charwidth = pgm_read_byte(&charset[charptr++]);

	for(x_int = 0; x_int < charwidth; x_int++) {
		uint8_t charpx = pgm_read_byte(&charset[charptr++]);
		for(y_int = 0; y_int < 8; y_int++) {
     5d8:	9f 5f       	subi	r25, 0xFF	; 255
     5da:	98 30       	cpi	r25, 0x08	; 8
     5dc:	11 f0       	breq	.+4      	; 0x5e2 <lcd_char+0x96>
			if (0x01 & charpx)
				lcd_pset(x + x_int, y + y_int);

			charpx >>=1;
     5de:	f6 94       	lsr	r15
     5e0:	f0 cf       	rjmp	.-32     	; 0x5c2 <lcd_char+0x76>
	while(val--) {
		charptr += pgm_read_byte(&charset[charptr]) + 1;
	}
	charwidth = pgm_read_byte(&charset[charptr++]);

	for(x_int = 0; x_int < charwidth; x_int++) {
     5e2:	0f 5f       	subi	r16, 0xFF	; 255
     5e4:	08 94       	sec
     5e6:	a1 1c       	adc	r10, r1
     5e8:	b1 1c       	adc	r11, r1
     5ea:	0e 15       	cp	r16, r14
     5ec:	28 f3       	brcs	.-54     	; 0x5b8 <lcd_char+0x6c>

			charpx >>=1;
		}
	}
	return charwidth;
}
     5ee:	8e 2d       	mov	r24, r14
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	cf 91       	pop	r28
     5f6:	df 91       	pop	r29
     5f8:	1f 91       	pop	r17
     5fa:	0f 91       	pop	r16
     5fc:	ff 90       	pop	r15
     5fe:	ef 90       	pop	r14
     600:	df 90       	pop	r13
     602:	bf 90       	pop	r11
     604:	af 90       	pop	r10
     606:	08 95       	ret

00000608 <lcd_string>:
	lcd_string(str, 0, 0, 127, 15);
	lcd_update();
}
*/

void lcd_string(char *str, uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
     608:	cf 92       	push	r12
     60a:	df 92       	push	r13
     60c:	ff 92       	push	r15
     60e:	0f 93       	push	r16
     610:	1f 93       	push	r17
     612:	df 93       	push	r29
     614:	cf 93       	push	r28
     616:	00 d0       	rcall	.+0      	; 0x618 <lcd_string+0x10>
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
     61c:	6c 01       	movw	r12, r24
     61e:	f6 2e       	mov	r15, r22
     620:	14 2f       	mov	r17, r20
     622:	36 2f       	mov	r19, r22
	uint8_t curr_x = x1;
	while(*str) {
     624:	13 c0       	rjmp	.+38     	; 0x64c <lcd_string+0x44>
		lcd_char(*(str++), curr_x, y1);
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	63 2f       	mov	r22, r19
     62a:	41 2f       	mov	r20, r17
     62c:	2a 83       	std	Y+2, r18	; 0x02
     62e:	39 83       	std	Y+1, r19	; 0x01
     630:	0e 94 a6 02 	call	0x54c	; 0x54c <lcd_char>
		curr_x += 6;
     634:	39 81       	ldd	r19, Y+1	; 0x01
     636:	3a 5f       	subi	r19, 0xFA	; 250
		if (curr_x > x2) {
     638:	2a 81       	ldd	r18, Y+2	; 0x02
     63a:	23 17       	cp	r18, r19
     63c:	20 f4       	brcc	.+8      	; 0x646 <lcd_string+0x3e>
			curr_x = x1;
			y1 += 8;
     63e:	18 5f       	subi	r17, 0xF8	; 248

			if (y1 > y2)
     640:	01 17       	cp	r16, r17
     642:	40 f0       	brcs	.+16     	; 0x654 <lcd_string+0x4c>
     644:	3f 2d       	mov	r19, r15
*/

void lcd_string(char *str, uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
	uint8_t curr_x = x1;
	while(*str) {
		lcd_char(*(str++), curr_x, y1);
     646:	08 94       	sec
     648:	c1 1c       	adc	r12, r1
     64a:	d1 1c       	adc	r13, r1
}
*/

void lcd_string(char *str, uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
	uint8_t curr_x = x1;
	while(*str) {
     64c:	f6 01       	movw	r30, r12
     64e:	80 81       	ld	r24, Z
     650:	88 23       	and	r24, r24
     652:	49 f7       	brne	.-46     	; 0x626 <lcd_string+0x1e>

			if (y1 > y2)
				return;
		}
	}
}
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	cf 91       	pop	r28
     65a:	df 91       	pop	r29
     65c:	1f 91       	pop	r17
     65e:	0f 91       	pop	r16
     660:	ff 90       	pop	r15
     662:	df 90       	pop	r13
     664:	cf 90       	pop	r12
     666:	08 95       	ret

00000668 <lcd_string_P>:


void lcd_string_P(PGM_P str, uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
     668:	ef 92       	push	r14
     66a:	ff 92       	push	r15
     66c:	0f 93       	push	r16
     66e:	1f 93       	push	r17
     670:	df 93       	push	r29
     672:	cf 93       	push	r28
     674:	00 d0       	rcall	.+0      	; 0x676 <lcd_string_P+0xe>
     676:	cd b7       	in	r28, 0x3d	; 61
     678:	de b7       	in	r29, 0x3e	; 62
     67a:	7c 01       	movw	r14, r24
     67c:	16 2f       	mov	r17, r22
     67e:	34 2f       	mov	r19, r20

	while(pgm_read_byte(str)) {
     680:	13 c0       	rjmp	.+38     	; 0x6a8 <lcd_string_P+0x40>
		lcd_char(pgm_read_byte(str++), x1, y1);
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	61 2f       	mov	r22, r17
     686:	43 2f       	mov	r20, r19
     688:	2a 83       	std	Y+2, r18	; 0x02
     68a:	39 83       	std	Y+1, r19	; 0x01
     68c:	0e 94 a6 02 	call	0x54c	; 0x54c <lcd_char>
		x1 += 6;
     690:	1a 5f       	subi	r17, 0xFA	; 250
		if (x1 > x2) {
     692:	2a 81       	ldd	r18, Y+2	; 0x02
     694:	39 81       	ldd	r19, Y+1	; 0x01
     696:	21 17       	cp	r18, r17
     698:	20 f4       	brcc	.+8      	; 0x6a2 <lcd_string_P+0x3a>
			x1 = 0;
			y1 += 8;
     69a:	38 5f       	subi	r19, 0xF8	; 248

			if (y1 > y2)
     69c:	03 17       	cp	r16, r19
     69e:	40 f0       	brcs	.+16     	; 0x6b0 <lcd_string_P+0x48>
     6a0:	10 e0       	ldi	r17, 0x00	; 0


void lcd_string_P(PGM_P str, uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {

	while(pgm_read_byte(str)) {
		lcd_char(pgm_read_byte(str++), x1, y1);
     6a2:	08 94       	sec
     6a4:	e1 1c       	adc	r14, r1
     6a6:	f1 1c       	adc	r15, r1
}


void lcd_string_P(PGM_P str, uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {

	while(pgm_read_byte(str)) {
     6a8:	f7 01       	movw	r30, r14
     6aa:	84 91       	lpm	r24, Z
     6ac:	88 23       	and	r24, r24
     6ae:	49 f7       	brne	.-46     	; 0x682 <lcd_string_P+0x1a>

			if (y1 > y2)
				return;
		}
	}
}
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	cf 91       	pop	r28
     6b6:	df 91       	pop	r29
     6b8:	1f 91       	pop	r17
     6ba:	0f 91       	pop	r16
     6bc:	ff 90       	pop	r15
     6be:	ef 90       	pop	r14
     6c0:	08 95       	ret

000006c2 <lcd_picture>:


void lcd_picture(PGM_P picture, uint8_t x, uint8_t y) {
     6c2:	6f 92       	push	r6
     6c4:	7f 92       	push	r7
     6c6:	9f 92       	push	r9
     6c8:	af 92       	push	r10
     6ca:	bf 92       	push	r11
     6cc:	cf 92       	push	r12
     6ce:	df 92       	push	r13
     6d0:	ef 92       	push	r14
     6d2:	ff 92       	push	r15
     6d4:	0f 93       	push	r16
     6d6:	1f 93       	push	r17
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	e4 2e       	mov	r14, r20
	uint8_t size_x = pgm_read_byte(picture++);
     6de:	9c 01       	movw	r18, r24
     6e0:	2f 5f       	subi	r18, 0xFF	; 255
     6e2:	3f 4f       	sbci	r19, 0xFF	; 255
     6e4:	fc 01       	movw	r30, r24
     6e6:	84 91       	lpm	r24, Z
	uint8_t size_y = pgm_read_byte(picture++);
     6e8:	59 01       	movw	r10, r18
     6ea:	08 94       	sec
     6ec:	a1 1c       	adc	r10, r1
     6ee:	b1 1c       	adc	r11, r1
     6f0:	f9 01       	movw	r30, r18
     6f2:	24 91       	lpm	r18, Z
     6f4:	16 2f       	mov	r17, r22
     6f6:	99 24       	eor	r9, r9
     6f8:	08 e0       	ldi	r16, 0x08	; 8

	uint8_t x_int, y_int;
	uint8_t bit_count = 8;
	uint8_t img = 0;

	for(x_int = x; x_int < (x + size_x); x_int++) {
     6fa:	c6 2e       	mov	r12, r22
     6fc:	dd 24       	eor	r13, r13
     6fe:	c8 0e       	add	r12, r24
     700:	d1 1c       	adc	r13, r1
		for(y_int = y; y_int < (y + size_y); y_int++) {
     702:	c4 2f       	mov	r28, r20
     704:	d0 e0       	ldi	r29, 0x00	; 0
     706:	c2 0f       	add	r28, r18
     708:	d1 1d       	adc	r29, r1
			if (bit_count == 8) {
				bit_count = 0;
				img = pgm_read_byte(picture++);
			}

			lcd_pput(x_int, y_int, 0x01 & (img>>(7-bit_count)));
     70a:	67 e0       	ldi	r22, 0x07	; 7
     70c:	66 2e       	mov	r6, r22
     70e:	71 2c       	mov	r7, r1

	uint8_t x_int, y_int;
	uint8_t bit_count = 8;
	uint8_t img = 0;

	for(x_int = x; x_int < (x + size_x); x_int++) {
     710:	1f c0       	rjmp	.+62     	; 0x750 <lcd_picture+0x8e>
		for(y_int = y; y_int < (y + size_y); y_int++) {
			if (bit_count == 8) {
     712:	08 30       	cpi	r16, 0x08	; 8
     714:	31 f4       	brne	.+12     	; 0x722 <lcd_picture+0x60>
				bit_count = 0;
				img = pgm_read_byte(picture++);
     716:	f5 01       	movw	r30, r10
     718:	08 94       	sec
     71a:	a1 1c       	adc	r10, r1
     71c:	b1 1c       	adc	r11, r1
     71e:	94 90       	lpm	r9, Z
     720:	00 e0       	ldi	r16, 0x00	; 0
			}

			lcd_pput(x_int, y_int, 0x01 & (img>>(7-bit_count)));
     722:	49 2d       	mov	r20, r9
     724:	50 e0       	ldi	r21, 0x00	; 0
     726:	c3 01       	movw	r24, r6
     728:	80 1b       	sub	r24, r16
     72a:	91 09       	sbc	r25, r1
     72c:	02 c0       	rjmp	.+4      	; 0x732 <lcd_picture+0x70>
     72e:	55 95       	asr	r21
     730:	47 95       	ror	r20
     732:	8a 95       	dec	r24
     734:	e2 f7       	brpl	.-8      	; 0x72e <lcd_picture+0x6c>
     736:	41 70       	andi	r20, 0x01	; 1
     738:	81 2f       	mov	r24, r17
     73a:	6f 2d       	mov	r22, r15
     73c:	0e 94 44 02 	call	0x488	; 0x488 <lcd_pput>
			bit_count++;
     740:	0f 5f       	subi	r16, 0xFF	; 255
	uint8_t x_int, y_int;
	uint8_t bit_count = 8;
	uint8_t img = 0;

	for(x_int = x; x_int < (x + size_x); x_int++) {
		for(y_int = y; y_int < (y + size_y); y_int++) {
     742:	f3 94       	inc	r15
     744:	8f 2d       	mov	r24, r15
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	8c 17       	cp	r24, r28
     74a:	9d 07       	cpc	r25, r29
     74c:	14 f3       	brlt	.-60     	; 0x712 <lcd_picture+0x50>

	uint8_t x_int, y_int;
	uint8_t bit_count = 8;
	uint8_t img = 0;

	for(x_int = x; x_int < (x + size_x); x_int++) {
     74e:	1f 5f       	subi	r17, 0xFF	; 255
     750:	81 2f       	mov	r24, r17
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	8c 15       	cp	r24, r12
     756:	9d 05       	cpc	r25, r13
     758:	14 f4       	brge	.+4      	; 0x75e <lcd_picture+0x9c>
     75a:	fe 2c       	mov	r15, r14
     75c:	f3 cf       	rjmp	.-26     	; 0x744 <lcd_picture+0x82>

			lcd_pput(x_int, y_int, 0x01 & (img>>(7-bit_count)));
			bit_count++;
		}
	}
}
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	1f 91       	pop	r17
     764:	0f 91       	pop	r16
     766:	ff 90       	pop	r15
     768:	ef 90       	pop	r14
     76a:	df 90       	pop	r13
     76c:	cf 90       	pop	r12
     76e:	bf 90       	pop	r11
     770:	af 90       	pop	r10
     772:	9f 90       	pop	r9
     774:	7f 90       	pop	r7
     776:	6f 90       	pop	r6
     778:	08 95       	ret

0000077a <lcd_dec>:


void lcd_dec(uint8_t val) {
     77a:	1f 93       	push	r17
     77c:	18 2f       	mov	r17, r24

	lcd_char('0' + (val/100), 0, 0);
     77e:	64 e6       	ldi	r22, 0x64	; 100
     780:	0e 94 56 1b 	call	0x36ac	; 0x36ac <__udivmodqi4>
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	c0 96       	adiw	r24, 0x30	; 48
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	40 e0       	ldi	r20, 0x00	; 0
     78c:	0e 94 a6 02 	call	0x54c	; 0x54c <lcd_char>
	val %= 100;
     790:	81 2f       	mov	r24, r17
     792:	64 e6       	ldi	r22, 0x64	; 100
     794:	0e 94 56 1b 	call	0x36ac	; 0x36ac <__udivmodqi4>
     798:	19 2f       	mov	r17, r25
	lcd_char('0' + (val/10), 0, 0);
     79a:	89 2f       	mov	r24, r25
     79c:	6a e0       	ldi	r22, 0x0A	; 10
     79e:	0e 94 56 1b 	call	0x36ac	; 0x36ac <__udivmodqi4>
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	c0 96       	adiw	r24, 0x30	; 48
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	40 e0       	ldi	r20, 0x00	; 0
     7aa:	0e 94 a6 02 	call	0x54c	; 0x54c <lcd_char>
	val %= 10;
	lcd_char('0' + val, 0, 0);
     7ae:	81 2f       	mov	r24, r17
     7b0:	6a e0       	ldi	r22, 0x0A	; 10
     7b2:	0e 94 56 1b 	call	0x36ac	; 0x36ac <__udivmodqi4>
     7b6:	89 2f       	mov	r24, r25
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	c0 96       	adiw	r24, 0x30	; 48
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	40 e0       	ldi	r20, 0x00	; 0
     7c0:	0e 94 a6 02 	call	0x54c	; 0x54c <lcd_char>
}
     7c4:	1f 91       	pop	r17
     7c6:	08 95       	ret

000007c8 <lcd_hex>:

void lcd_hex(uint8_t val, uint8_t x, uint8_t y) {
     7c8:	ff 92       	push	r15
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	f8 2e       	mov	r15, r24
     7d0:	06 2f       	mov	r16, r22
     7d2:	14 2f       	mov	r17, r20

	uint8_t tmp = (val >> 4) & 0x0F;
     7d4:	28 2f       	mov	r18, r24
     7d6:	22 95       	swap	r18
     7d8:	2f 70       	andi	r18, 0x0F	; 15
     7da:	82 2f       	mov	r24, r18
     7dc:	90 e0       	ldi	r25, 0x00	; 0

	if (tmp > 9)
     7de:	2a 30       	cpi	r18, 0x0A	; 10
     7e0:	10 f0       	brcs	.+4      	; 0x7e6 <lcd_hex+0x1e>
		lcd_char((tmp - 10) + 'A', x, y);
     7e2:	c7 96       	adiw	r24, 0x37	; 55
     7e4:	01 c0       	rjmp	.+2      	; 0x7e8 <lcd_hex+0x20>
	else
		lcd_char(tmp + '0', x, y);
     7e6:	c0 96       	adiw	r24, 0x30	; 48
     7e8:	60 2f       	mov	r22, r16
     7ea:	41 2f       	mov	r20, r17
     7ec:	0e 94 a6 02 	call	0x54c	; 0x54c <lcd_char>

	tmp = val & 0x0F;
     7f0:	2f 2d       	mov	r18, r15
     7f2:	2f 70       	andi	r18, 0x0F	; 15
     7f4:	82 2f       	mov	r24, r18
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	60 2f       	mov	r22, r16
     7fa:	6a 5f       	subi	r22, 0xFA	; 250

	if (tmp > 9)
     7fc:	2a 30       	cpi	r18, 0x0A	; 10
     7fe:	10 f0       	brcs	.+4      	; 0x804 <lcd_hex+0x3c>
		lcd_char((tmp - 10) + 'A', x+6, y);
     800:	c7 96       	adiw	r24, 0x37	; 55
     802:	01 c0       	rjmp	.+2      	; 0x806 <lcd_hex+0x3e>
	else
		lcd_char(tmp + '0', x+6, y);
     804:	c0 96       	adiw	r24, 0x30	; 48
     806:	41 2f       	mov	r20, r17
     808:	0e 94 a6 02 	call	0x54c	; 0x54c <lcd_char>

}
     80c:	1f 91       	pop	r17
     80e:	0f 91       	pop	r16
     810:	ff 90       	pop	r15
     812:	08 95       	ret

00000814 <spi_init>:

uint8_t enable = 0;

void spi_init(void) {

	SPSR = (1<<SPI2X);
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	8e b9       	out	0x0e, r24	; 14
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPIE) | (1<<DORD);
     818:	80 ef       	ldi	r24, 0xF0	; 240
     81a:	8d b9       	out	0x0d, r24	; 13
}
     81c:	08 95       	ret

0000081e <timer_init>:

void timer_init(void) {
	TCCR0 = (1<<WGM01) | (1<<CS02) | (1<<CS00); // | (1<<FOC0);
     81e:	8d e0       	ldi	r24, 0x0D	; 13
     820:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1<<OCIE0);
     822:	82 e0       	ldi	r24, 0x02	; 2
     824:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0;
     826:	12 be       	out	0x32, r1	; 50
	OCR0 = 5;
     828:	85 e0       	ldi	r24, 0x05	; 5
     82a:	8c bf       	out	0x3c, r24	; 60

}
     82c:	08 95       	ret

0000082e <__vector_12>:
volatile char *ptr;
volatile uint8_t col_nr = 0;
volatile uint8_t row_nr = 0;


ISR(SPI_STC_vect) {
     82e:	1f 92       	push	r1
     830:	0f 92       	push	r0
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	0f 92       	push	r0
     836:	11 24       	eor	r1, r1
     838:	8f 93       	push	r24
     83a:	ef 93       	push	r30
     83c:	ff 93       	push	r31

	//Solange die Spaltennummer nicht 0 ist
	//runterzählen und weiter Daten in die SPI schieben
	if (col_nr) {
     83e:	80 91 83 00 	lds	r24, 0x0083
     842:	88 23       	and	r24, r24
     844:	89 f0       	breq	.+34     	; 0x868 <__stack+0x9>
		SPDR = ~(*ptr++);
     846:	e0 91 8d 02 	lds	r30, 0x028D
     84a:	f0 91 8e 02 	lds	r31, 0x028E
     84e:	81 91       	ld	r24, Z+
     850:	80 95       	com	r24
     852:	8f b9       	out	0x0f, r24	; 15
     854:	f0 93 8e 02 	sts	0x028E, r31
     858:	e0 93 8d 02 	sts	0x028D, r30
		col_nr--;
     85c:	80 91 83 00 	lds	r24, 0x0083
     860:	81 50       	subi	r24, 0x01	; 1
     862:	80 93 83 00 	sts	0x0083, r24
     866:	0d c0       	rjmp	.+26     	; 0x882 <__stack+0x23>

	//Wenn Spaltennummer gleich 0
	//die aktuelle Zeilennummer aktivieren ()
	} else {
		PORTD = (1<<6);
     868:	80 e4       	ldi	r24, 0x40	; 64
     86a:	82 bb       	out	0x12, r24	; 18
		PORTD = (1<<6) | (1<<5);
     86c:	80 e6       	ldi	r24, 0x60	; 96
     86e:	82 bb       	out	0x12, r24	; 18

		PORTB = row_nr;
     870:	80 91 84 00 	lds	r24, 0x0084
     874:	88 bb       	out	0x18, r24	; 24
		PORTD = 0;
     876:	12 ba       	out	0x12, r1	; 18
		row_nr = (row_nr + 1);
     878:	80 91 84 00 	lds	r24, 0x0084
     87c:	8f 5f       	subi	r24, 0xFF	; 255
     87e:	80 93 84 00 	sts	0x0084, r24
	}
}
     882:	ff 91       	pop	r31
     884:	ef 91       	pop	r30
     886:	8f 91       	pop	r24
     888:	0f 90       	pop	r0
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	0f 90       	pop	r0
     88e:	1f 90       	pop	r1
     890:	18 95       	reti

00000892 <__vector_10>:


ISR(TIMER0_COMP_vect) {
     892:	1f 92       	push	r1
     894:	0f 92       	push	r0
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	0f 92       	push	r0
     89a:	11 24       	eor	r1, r1
     89c:	2f 93       	push	r18
     89e:	8f 93       	push	r24
     8a0:	9f 93       	push	r25
     8a2:	ef 93       	push	r30
     8a4:	ff 93       	push	r31

	if (row_nr < 0x10) {
     8a6:	80 91 84 00 	lds	r24, 0x0084
     8aa:	80 31       	cpi	r24, 0x10	; 16
     8ac:	d0 f4       	brcc	.+52     	; 0x8e2 <__vector_10+0x50>


		ptr = (lcd_content + (row_nr * 32));
     8ae:	80 91 84 00 	lds	r24, 0x0084
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	25 e0       	ldi	r18, 0x05	; 5
     8b6:	88 0f       	add	r24, r24
     8b8:	99 1f       	adc	r25, r25
     8ba:	2a 95       	dec	r18
     8bc:	e1 f7       	brne	.-8      	; 0x8b6 <__vector_10+0x24>
     8be:	83 57       	subi	r24, 0x73	; 115
     8c0:	9f 4f       	sbci	r25, 0xFF	; 255
     8c2:	90 93 8e 02 	sts	0x028E, r25
     8c6:	80 93 8d 02 	sts	0x028D, r24

		col_nr = 31;
     8ca:	2f e1       	ldi	r18, 0x1F	; 31
     8cc:	20 93 83 00 	sts	0x0083, r18
		SPDR = ~(*(ptr++));
     8d0:	fc 01       	movw	r30, r24
     8d2:	81 91       	ld	r24, Z+
     8d4:	80 95       	com	r24
     8d6:	8f b9       	out	0x0f, r24	; 15
     8d8:	f0 93 8e 02 	sts	0x028E, r31
     8dc:	e0 93 8d 02 	sts	0x028D, r30
     8e0:	0d c0       	rjmp	.+26     	; 0x8fc <__vector_10+0x6a>


	} else {

		row_nr = (row_nr + 1);
     8e2:	80 91 84 00 	lds	r24, 0x0084
     8e6:	8f 5f       	subi	r24, 0xFF	; 255
     8e8:	80 93 84 00 	sts	0x0084, r24

		if (row_nr >= brightness)
     8ec:	90 91 84 00 	lds	r25, 0x0084
     8f0:	80 91 6b 00 	lds	r24, 0x006B
     8f4:	98 17       	cp	r25, r24
     8f6:	10 f0       	brcs	.+4      	; 0x8fc <__vector_10+0x6a>
			row_nr = 0;
     8f8:	10 92 84 00 	sts	0x0084, r1
	}
}
     8fc:	ff 91       	pop	r31
     8fe:	ef 91       	pop	r30
     900:	9f 91       	pop	r25
     902:	8f 91       	pop	r24
     904:	2f 91       	pop	r18
     906:	0f 90       	pop	r0
     908:	0f be       	out	0x3f, r0	; 63
     90a:	0f 90       	pop	r0
     90c:	1f 90       	pop	r1
     90e:	18 95       	reti

00000910 <main>:




int main(void) {
	DDRB |= 0xFF;
     910:	87 b3       	in	r24, 0x17	; 23
     912:	8f ef       	ldi	r24, 0xFF	; 255
     914:	87 bb       	out	0x17, r24	; 23
	DDRD |= (1<<5) | (1<<6);
     916:	81 b3       	in	r24, 0x11	; 17
     918:	80 66       	ori	r24, 0x60	; 96
     91a:	81 bb       	out	0x11, r24	; 17

	PORTD = (1<<6);
     91c:	80 e4       	ldi	r24, 0x40	; 64
     91e:	82 bb       	out	0x12, r24	; 18
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	92 e0       	ldi	r25, 0x02	; 2

	uint16_t tmp = 512;

	while(tmp--) {
     924:	01 97       	sbiw	r24, 0x01	; 1
		lcd_content[tmp] = 0x00;
     926:	fc 01       	movw	r30, r24
     928:	e3 57       	subi	r30, 0x73	; 115
     92a:	ff 4f       	sbci	r31, 0xFF	; 255
     92c:	10 82       	st	Z, r1

	PORTD = (1<<6);

	uint16_t tmp = 512;

	while(tmp--) {
     92e:	00 97       	sbiw	r24, 0x00	; 0
     930:	c9 f7       	brne	.-14     	; 0x924 <main+0x14>

uint8_t enable = 0;

void spi_init(void) {

	SPSR = (1<<SPI2X);
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	8e b9       	out	0x0e, r24	; 14
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPIE) | (1<<DORD);
     936:	80 ef       	ldi	r24, 0xF0	; 240
     938:	8d b9       	out	0x0d, r24	; 13
	}


	spi_init();

	soft_spi_init();
     93a:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <soft_spi_init>

	enc28j60_init();
     93e:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <enc28j60_init>

	nic_init(enc28j60_send_packet, enc28j60_receive_packet, enc28j60_set_mac);
     942:	84 ed       	ldi	r24, 0xD4	; 212
     944:	99 e1       	ldi	r25, 0x19	; 25
     946:	6c e3       	ldi	r22, 0x3C	; 60
     948:	75 e1       	ldi	r23, 0x15	; 21
     94a:	40 ef       	ldi	r20, 0xF0	; 240
     94c:	56 e1       	ldi	r21, 0x16	; 22
     94e:	0e 94 d7 14 	call	0x29ae	; 0x29ae <nic_init>

	dhcp_init(dhcpname);
     952:	80 91 69 00 	lds	r24, 0x0069
     956:	90 91 6a 00 	lds	r25, 0x006A
     95a:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <dhcp_init>
	SPSR = (1<<SPI2X);
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPIE) | (1<<DORD);
}

void timer_init(void) {
	TCCR0 = (1<<WGM01) | (1<<CS02) | (1<<CS00); // | (1<<FOC0);
     95e:	8d e0       	ldi	r24, 0x0D	; 13
     960:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1<<OCIE0);
     962:	82 e0       	ldi	r24, 0x02	; 2
     964:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0;
     966:	12 be       	out	0x32, r1	; 50
	OCR0 = 5;
     968:	85 e0       	ldi	r24, 0x05	; 5
     96a:	8c bf       	out	0x3c, r24	; 60

	dhcp_init(dhcpname);

	timer_init();

	sei();
     96c:	78 94       	sei

	//char nic_buffer[600];

	while(1) {

		nic_doEvents(nic_buffer);
     96e:	81 e4       	ldi	r24, 0x41	; 65
     970:	93 e0       	ldi	r25, 0x03	; 3
     972:	0e 94 a1 14 	call	0x2942	; 0x2942 <nic_doEvents>
		dhcp_doEvents(nic_buffer);
     976:	81 e4       	ldi	r24, 0x41	; 65
     978:	93 e0       	ldi	r25, 0x03	; 3
     97a:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <dhcp_doEvents>
     97e:	f7 cf       	rjmp	.-18     	; 0x96e <main+0x5e>

00000980 <panel_get_binary_packet>:

#include <avr/pgmspace.h>

volatile uint8_t brightness = 16;

void panel_get_binary_packet(char *buffer, unsigned int len) {
     980:	2a e2       	ldi	r18, 0x2A	; 42
     982:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t j = 0;
	for(uint16_t i = UDP_POS_DATA; i < len; i++) {
     984:	0a c0       	rjmp	.+20     	; 0x99a <panel_get_binary_packet+0x1a>
		lcd_content[j++] = buffer[i];
     986:	fc 01       	movw	r30, r24
     988:	e2 0f       	add	r30, r18
     98a:	f3 1f       	adc	r31, r19
     98c:	e0 81       	ld	r30, Z
     98e:	43 57       	subi	r20, 0x73	; 115
     990:	5f 4f       	sbci	r21, 0xFF	; 255
     992:	da 01       	movw	r26, r20
     994:	ec 93       	st	X, r30

volatile uint8_t brightness = 16;

void panel_get_binary_packet(char *buffer, unsigned int len) {
	uint16_t j = 0;
	for(uint16_t i = UDP_POS_DATA; i < len; i++) {
     996:	2f 5f       	subi	r18, 0xFF	; 255
     998:	3f 4f       	sbci	r19, 0xFF	; 255
     99a:	a9 01       	movw	r20, r18
     99c:	4a 52       	subi	r20, 0x2A	; 42
     99e:	50 40       	sbci	r21, 0x00	; 0
     9a0:	26 17       	cp	r18, r22
     9a2:	37 07       	cpc	r19, r23
     9a4:	80 f3       	brcs	.-32     	; 0x986 <panel_get_binary_packet+0x6>
		lcd_content[j++] = buffer[i];
	}
}
     9a6:	08 95       	ret

000009a8 <parse_command>:

void parse_command(char* buffer, uint16_t *pos, uint8_t *color) {
     9a8:	ef 92       	push	r14
     9aa:	ff 92       	push	r15
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	8c 01       	movw	r16, r24
     9b6:	eb 01       	movw	r28, r22
     9b8:	7a 01       	movw	r14, r20
	if (!strncmp_P(buffer, PSTR("\\1"), 2)) {
     9ba:	6c ee       	ldi	r22, 0xEC	; 236
     9bc:	72 e0       	ldi	r23, 0x02	; 2
     9be:	42 e0       	ldi	r20, 0x02	; 2
     9c0:	50 e0       	ldi	r21, 0x00	; 0
     9c2:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <strncmp_P>
     9c6:	00 97       	sbiw	r24, 0x00	; 0
     9c8:	41 f4       	brne	.+16     	; 0x9da <parse_command+0x32>
		(*pos) += 2;
     9ca:	88 81       	ld	r24, Y
     9cc:	99 81       	ldd	r25, Y+1	; 0x01
     9ce:	02 96       	adiw	r24, 0x02	; 2
     9d0:	99 83       	std	Y+1, r25	; 0x01
     9d2:	88 83       	st	Y, r24
		(*color) = 0;
     9d4:	f7 01       	movw	r30, r14
     9d6:	10 82       	st	Z, r1
     9d8:	42 c0       	rjmp	.+132    	; 0xa5e <parse_command+0xb6>
	} else if (!strncmp_P(buffer, PSTR("\\2"), 2)) {
     9da:	c8 01       	movw	r24, r16
     9dc:	69 ee       	ldi	r22, 0xE9	; 233
     9de:	72 e0       	ldi	r23, 0x02	; 2
     9e0:	42 e0       	ldi	r20, 0x02	; 2
     9e2:	50 e0       	ldi	r21, 0x00	; 0
     9e4:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <strncmp_P>
     9e8:	00 97       	sbiw	r24, 0x00	; 0
     9ea:	39 f4       	brne	.+14     	; 0x9fa <parse_command+0x52>
		(*pos) += 2;
     9ec:	88 81       	ld	r24, Y
     9ee:	99 81       	ldd	r25, Y+1	; 0x01
     9f0:	02 96       	adiw	r24, 0x02	; 2
     9f2:	99 83       	std	Y+1, r25	; 0x01
     9f4:	88 83       	st	Y, r24
		(*color) = 1;
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	0f c0       	rjmp	.+30     	; 0xa18 <parse_command+0x70>
	} else if (!strncmp_P(buffer, PSTR("\\3"), 2)) {
     9fa:	c8 01       	movw	r24, r16
     9fc:	66 ee       	ldi	r22, 0xE6	; 230
     9fe:	72 e0       	ldi	r23, 0x02	; 2
     a00:	42 e0       	ldi	r20, 0x02	; 2
     a02:	50 e0       	ldi	r21, 0x00	; 0
     a04:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <strncmp_P>
     a08:	00 97       	sbiw	r24, 0x00	; 0
     a0a:	49 f4       	brne	.+18     	; 0xa1e <parse_command+0x76>
		(*pos) += 2;
     a0c:	88 81       	ld	r24, Y
     a0e:	99 81       	ldd	r25, Y+1	; 0x01
     a10:	02 96       	adiw	r24, 0x02	; 2
     a12:	99 83       	std	Y+1, r25	; 0x01
     a14:	88 83       	st	Y, r24
		(*color) = 2;
     a16:	82 e0       	ldi	r24, 0x02	; 2
     a18:	f7 01       	movw	r30, r14
     a1a:	80 83       	st	Z, r24
     a1c:	20 c0       	rjmp	.+64     	; 0xa5e <parse_command+0xb6>
	} else if (!strncmp_P(buffer, PSTR("\\-"), 2)) {
     a1e:	c8 01       	movw	r24, r16
     a20:	63 ee       	ldi	r22, 0xE3	; 227
     a22:	72 e0       	ldi	r23, 0x02	; 2
     a24:	42 e0       	ldi	r20, 0x02	; 2
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <strncmp_P>
     a2c:	00 97       	sbiw	r24, 0x00	; 0
     a2e:	91 f4       	brne	.+36     	; 0xa54 <parse_command+0xac>
		if ((buffer[2] >= '0') && (buffer[2] <= '9')) {
     a30:	f8 01       	movw	r30, r16
     a32:	92 81       	ldd	r25, Z+2	; 0x02
     a34:	89 2f       	mov	r24, r25
     a36:	80 53       	subi	r24, 0x30	; 48
     a38:	8a 30       	cpi	r24, 0x0A	; 10
     a3a:	40 f4       	brcc	.+16     	; 0xa4c <parse_command+0xa4>
			brightness = 16+(buffer[2] - '0')*10;
     a3c:	99 0f       	add	r25, r25
     a3e:	89 2f       	mov	r24, r25
     a40:	88 0f       	add	r24, r24
     a42:	88 0f       	add	r24, r24
     a44:	89 0f       	add	r24, r25
     a46:	80 5d       	subi	r24, 0xD0	; 208
     a48:	80 93 6b 00 	sts	0x006B, r24
		}
		(*pos) += 3;
     a4c:	88 81       	ld	r24, Y
     a4e:	99 81       	ldd	r25, Y+1	; 0x01
     a50:	03 96       	adiw	r24, 0x03	; 3
     a52:	03 c0       	rjmp	.+6      	; 0xa5a <parse_command+0xb2>
	} else {
		(*pos) += 1;
     a54:	88 81       	ld	r24, Y
     a56:	99 81       	ldd	r25, Y+1	; 0x01
     a58:	01 96       	adiw	r24, 0x01	; 1
     a5a:	99 83       	std	Y+1, r25	; 0x01
     a5c:	88 83       	st	Y, r24
	}

}
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	ff 90       	pop	r15
     a68:	ef 90       	pop	r14
     a6a:	08 95       	ret

00000a6c <panel_get_text_packet>:

void panel_get_text_packet(char *buffer, unsigned int len) {
     a6c:	8f 92       	push	r8
     a6e:	9f 92       	push	r9
     a70:	af 92       	push	r10
     a72:	bf 92       	push	r11
     a74:	cf 92       	push	r12
     a76:	df 92       	push	r13
     a78:	ef 92       	push	r14
     a7a:	ff 92       	push	r15
     a7c:	0f 93       	push	r16
     a7e:	1f 93       	push	r17
     a80:	df 93       	push	r29
     a82:	cf 93       	push	r28
     a84:	00 d0       	rcall	.+0      	; 0xa86 <panel_get_text_packet+0x1a>
     a86:	0f 92       	push	r0
     a88:	cd b7       	in	r28, 0x3d	; 61
     a8a:	de b7       	in	r29, 0x3e	; 62
     a8c:	7c 01       	movw	r14, r24
     a8e:	6b 01       	movw	r12, r22

	buffer[len] = 0;
     a90:	fc 01       	movw	r30, r24
     a92:	e6 0f       	add	r30, r22
     a94:	f7 1f       	adc	r31, r23
     a96:	10 82       	st	Z, r1

	uint16_t current_pos = UDP_POS_DATA;
     a98:	8a e2       	ldi	r24, 0x2A	; 42
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	9b 83       	std	Y+3, r25	; 0x03
     a9e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t x = 0;
	uint8_t y = 0;
	uint8_t color = 0;
     aa0:	19 82       	std	Y+1, r1	; 0x01

	lcd_clear();
     aa2:	0e 94 20 02 	call	0x440	; 0x440 <lcd_clear>
     aa6:	00 e0       	ldi	r16, 0x00	; 0
     aa8:	10 e0       	ldi	r17, 0x00	; 0

	while(current_pos < len) {
		if (buffer[current_pos] == '\\' ) {
			parse_command(buffer+current_pos, &current_pos, &color);
     aaa:	82 e0       	ldi	r24, 0x02	; 2
     aac:	88 2e       	mov	r8, r24
     aae:	91 2c       	mov	r9, r1
     ab0:	8c 0e       	add	r8, r28
     ab2:	9d 1e       	adc	r9, r29
     ab4:	5e 01       	movw	r10, r28
     ab6:	08 94       	sec
     ab8:	a1 1c       	adc	r10, r1
     aba:	b1 1c       	adc	r11, r1
	uint8_t y = 0;
	uint8_t color = 0;

	lcd_clear();

	while(current_pos < len) {
     abc:	37 c0       	rjmp	.+110    	; 0xb2c <panel_get_text_packet+0xc0>
		if (buffer[current_pos] == '\\' ) {
     abe:	f7 01       	movw	r30, r14
     ac0:	e2 0f       	add	r30, r18
     ac2:	f3 1f       	adc	r31, r19
     ac4:	80 81       	ld	r24, Z
     ac6:	8c 35       	cpi	r24, 0x5C	; 92
     ac8:	31 f4       	brne	.+12     	; 0xad6 <panel_get_text_packet+0x6a>
			parse_command(buffer+current_pos, &current_pos, &color);
     aca:	cf 01       	movw	r24, r30
     acc:	b4 01       	movw	r22, r8
     ace:	a5 01       	movw	r20, r10
     ad0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <parse_command>
     ad4:	2b c0       	rjmp	.+86     	; 0xb2c <panel_get_text_packet+0xc0>
		} else {
			switch(color) {
     ad6:	99 81       	ldd	r25, Y+1	; 0x01
     ad8:	99 23       	and	r25, r25
     ada:	29 f0       	breq	.+10     	; 0xae6 <panel_get_text_packet+0x7a>
     adc:	91 30       	cpi	r25, 0x01	; 1
     ade:	a9 f0       	breq	.+42     	; 0xb0a <panel_get_text_packet+0x9e>
     ae0:	92 30       	cpi	r25, 0x02	; 2
     ae2:	f1 f4       	brne	.+60     	; 0xb20 <panel_get_text_packet+0xb4>
     ae4:	07 c0       	rjmp	.+14     	; 0xaf4 <panel_get_text_packet+0x88>
			case 0:
				x += lcd_char(buffer[current_pos++], x, y);
     ae6:	2f 5f       	subi	r18, 0xFF	; 255
     ae8:	3f 4f       	sbci	r19, 0xFF	; 255
     aea:	3b 83       	std	Y+3, r19	; 0x03
     aec:	2a 83       	std	Y+2, r18	; 0x02
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	61 2f       	mov	r22, r17
     af2:	12 c0       	rjmp	.+36     	; 0xb18 <panel_get_text_packet+0xac>
				break;
			case 1:
				x += lcd_char(buffer[current_pos++], x+128, y);
				break;
			case 2:
				lcd_char(buffer[current_pos], x, y);
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	61 2f       	mov	r22, r17
     af8:	40 2f       	mov	r20, r16
     afa:	0e 94 a6 02 	call	0x54c	; 0x54c <lcd_char>
				x += lcd_char(buffer[current_pos++], x+128, y);
     afe:	2a 81       	ldd	r18, Y+2	; 0x02
     b00:	3b 81       	ldd	r19, Y+3	; 0x03
     b02:	f7 01       	movw	r30, r14
     b04:	e2 0f       	add	r30, r18
     b06:	f3 1f       	adc	r31, r19
     b08:	80 81       	ld	r24, Z
     b0a:	2f 5f       	subi	r18, 0xFF	; 255
     b0c:	3f 4f       	sbci	r19, 0xFF	; 255
     b0e:	3b 83       	std	Y+3, r19	; 0x03
     b10:	2a 83       	std	Y+2, r18	; 0x02
     b12:	61 2f       	mov	r22, r17
     b14:	60 58       	subi	r22, 0x80	; 128
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	40 2f       	mov	r20, r16
     b1a:	0e 94 a6 02 	call	0x54c	; 0x54c <lcd_char>
     b1e:	18 0f       	add	r17, r24
				break;
			}
			if (x > 125) {
     b20:	1e 37       	cpi	r17, 0x7E	; 126
     b22:	20 f0       	brcs	.+8      	; 0xb2c <panel_get_text_packet+0xc0>
				x = 0;
				y += 8;
     b24:	08 5f       	subi	r16, 0xF8	; 248

				if (y > 14)
     b26:	0f 30       	cpi	r16, 0x0F	; 15
     b28:	30 f4       	brcc	.+12     	; 0xb36 <panel_get_text_packet+0xca>
     b2a:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t y = 0;
	uint8_t color = 0;

	lcd_clear();

	while(current_pos < len) {
     b2c:	2a 81       	ldd	r18, Y+2	; 0x02
     b2e:	3b 81       	ldd	r19, Y+3	; 0x03
     b30:	2c 15       	cp	r18, r12
     b32:	3d 05       	cpc	r19, r13
     b34:	20 f2       	brcs	.-120    	; 0xabe <panel_get_text_packet+0x52>
			lcd_rect(0, 0, 255, 16, 0);
		}

	}
*/
}
     b36:	0f 90       	pop	r0
     b38:	0f 90       	pop	r0
     b3a:	0f 90       	pop	r0
     b3c:	cf 91       	pop	r28
     b3e:	df 91       	pop	r29
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	ff 90       	pop	r15
     b46:	ef 90       	pop	r14
     b48:	df 90       	pop	r13
     b4a:	cf 90       	pop	r12
     b4c:	bf 90       	pop	r11
     b4e:	af 90       	pop	r10
     b50:	9f 90       	pop	r9
     b52:	8f 90       	pop	r8
     b54:	08 95       	ret

00000b56 <ttimer_init>:
volatile uint64_t timestamp = 0xBBF81DFF4407E200;
volatile uint8_t drift = 0xc0;

void ttimer_init(void)
{
	TCCR1A = 0;
     b56:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12) | (1<<CS10);
     b58:	89 e0       	ldi	r24, 0x09	; 9
     b5a:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 1000; //302
     b5c:	88 ee       	ldi	r24, 0xE8	; 232
     b5e:	93 e0       	ldi	r25, 0x03	; 3
     b60:	9b bd       	out	0x2b, r25	; 43
     b62:	8a bd       	out	0x2a, r24	; 42

	TIMSK = (1<<OCIE1A);
     b64:	80 e1       	ldi	r24, 0x10	; 16
     b66:	89 bf       	out	0x39, r24	; 57
}
     b68:	08 95       	ret

00000b6a <timer_timestamp_set>:

uint32_t last_ntp_refresh = 0;
uint8_t ntp_wait = 0;

void timer_timestamp_set(uint64_t new_timestamp) {
     b6a:	af 92       	push	r10
     b6c:	bf 92       	push	r11
     b6e:	cf 92       	push	r12
     b70:	df 92       	push	r13
     b72:	ef 92       	push	r14
     b74:	ff 92       	push	r15
     b76:	0f 93       	push	r16
     b78:	1f 93       	push	r17
     b7a:	b9 2e       	mov	r11, r25

	int64_t offset = new_timestamp - timestamp;
     b7c:	e0 90 6c 00 	lds	r14, 0x006C
     b80:	b0 91 6d 00 	lds	r27, 0x006D
     b84:	10 91 6e 00 	lds	r17, 0x006E
     b88:	00 91 6f 00 	lds	r16, 0x006F
     b8c:	c0 90 70 00 	lds	r12, 0x0070
     b90:	f0 90 71 00 	lds	r15, 0x0071
     b94:	d0 90 72 00 	lds	r13, 0x0072
     b98:	a0 90 73 00 	lds	r10, 0x0073
     b9c:	92 2f       	mov	r25, r18
     b9e:	9e 19       	sub	r25, r14
     ba0:	e9 2e       	mov	r14, r25
     ba2:	f1 e0       	ldi	r31, 0x01	; 1
     ba4:	29 17       	cp	r18, r25
     ba6:	08 f0       	brcs	.+2      	; 0xbaa <timer_timestamp_set+0x40>
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	93 2f       	mov	r25, r19
     bac:	9b 1b       	sub	r25, r27
     bae:	b9 2f       	mov	r27, r25
     bb0:	a1 e0       	ldi	r26, 0x01	; 1
     bb2:	39 17       	cp	r19, r25
     bb4:	08 f0       	brcs	.+2      	; 0xbb8 <timer_timestamp_set+0x4e>
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	9b 2f       	mov	r25, r27
     bba:	9f 1b       	sub	r25, r31
     bbc:	f9 2f       	mov	r31, r25
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	bf 17       	cp	r27, r31
     bc2:	08 f0       	brcs	.+2      	; 0xbc6 <timer_timestamp_set+0x5c>
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	a9 2b       	or	r26, r25
     bc8:	94 2f       	mov	r25, r20
     bca:	91 1b       	sub	r25, r17
     bcc:	19 2f       	mov	r17, r25
     bce:	b1 e0       	ldi	r27, 0x01	; 1
     bd0:	49 17       	cp	r20, r25
     bd2:	08 f0       	brcs	.+2      	; 0xbd6 <timer_timestamp_set+0x6c>
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	91 2f       	mov	r25, r17
     bd8:	9a 1b       	sub	r25, r26
     bda:	a9 2f       	mov	r26, r25
     bdc:	91 e0       	ldi	r25, 0x01	; 1
     bde:	1a 17       	cp	r17, r26
     be0:	08 f0       	brcs	.+2      	; 0xbe4 <timer_timestamp_set+0x7a>
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	b9 2b       	or	r27, r25
     be6:	95 2f       	mov	r25, r21
     be8:	90 1b       	sub	r25, r16
     bea:	09 2f       	mov	r16, r25
     bec:	11 e0       	ldi	r17, 0x01	; 1
     bee:	59 17       	cp	r21, r25
     bf0:	08 f0       	brcs	.+2      	; 0xbf4 <timer_timestamp_set+0x8a>
     bf2:	10 e0       	ldi	r17, 0x00	; 0
     bf4:	90 2f       	mov	r25, r16
     bf6:	9b 1b       	sub	r25, r27
     bf8:	b9 2f       	mov	r27, r25
     bfa:	91 e0       	ldi	r25, 0x01	; 1
     bfc:	0b 17       	cp	r16, r27
     bfe:	08 f0       	brcs	.+2      	; 0xc02 <timer_timestamp_set+0x98>
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	19 2b       	or	r17, r25
     c04:	96 2f       	mov	r25, r22
     c06:	9c 19       	sub	r25, r12
     c08:	c9 2e       	mov	r12, r25
     c0a:	01 e0       	ldi	r16, 0x01	; 1
     c0c:	69 17       	cp	r22, r25
     c0e:	08 f0       	brcs	.+2      	; 0xc12 <timer_timestamp_set+0xa8>
     c10:	00 e0       	ldi	r16, 0x00	; 0
     c12:	9c 2d       	mov	r25, r12
     c14:	91 1b       	sub	r25, r17
     c16:	19 2f       	mov	r17, r25
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	c1 16       	cp	r12, r17
     c1c:	08 f0       	brcs	.+2      	; 0xc20 <timer_timestamp_set+0xb6>
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	09 2b       	or	r16, r25
     c22:	97 2f       	mov	r25, r23
     c24:	9f 19       	sub	r25, r15
     c26:	f9 2e       	mov	r15, r25
     c28:	e1 e0       	ldi	r30, 0x01	; 1
     c2a:	79 17       	cp	r23, r25
     c2c:	08 f0       	brcs	.+2      	; 0xc30 <timer_timestamp_set+0xc6>
     c2e:	e0 e0       	ldi	r30, 0x00	; 0
     c30:	9f 2d       	mov	r25, r15
     c32:	90 1b       	sub	r25, r16
     c34:	09 2f       	mov	r16, r25
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	f0 16       	cp	r15, r16
     c3a:	08 f0       	brcs	.+2      	; 0xc3e <timer_timestamp_set+0xd4>
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	e9 2b       	or	r30, r25
     c40:	98 2f       	mov	r25, r24
     c42:	9d 19       	sub	r25, r13
     c44:	d9 2e       	mov	r13, r25
     c46:	ff 24       	eor	r15, r15
     c48:	f3 94       	inc	r15
     c4a:	89 17       	cp	r24, r25
     c4c:	08 f0       	brcs	.+2      	; 0xc50 <timer_timestamp_set+0xe6>
     c4e:	ff 24       	eor	r15, r15
     c50:	9d 2d       	mov	r25, r13
     c52:	9e 1b       	sub	r25, r30
     c54:	e1 e0       	ldi	r30, 0x01	; 1
     c56:	d9 16       	cp	r13, r25
     c58:	08 f0       	brcs	.+2      	; 0xc5c <timer_timestamp_set+0xf2>
     c5a:	e0 e0       	ldi	r30, 0x00	; 0
     c5c:	fe 2a       	or	r15, r30
     c5e:	eb 2d       	mov	r30, r11
     c60:	ea 19       	sub	r30, r10
     c62:	ef 19       	sub	r30, r15

	cli();
     c64:	f8 94       	cli
	timestamp = new_timestamp;
     c66:	20 93 6c 00 	sts	0x006C, r18
     c6a:	30 93 6d 00 	sts	0x006D, r19
     c6e:	40 93 6e 00 	sts	0x006E, r20
     c72:	50 93 6f 00 	sts	0x006F, r21
     c76:	60 93 70 00 	sts	0x0070, r22
     c7a:	70 93 71 00 	sts	0x0071, r23
     c7e:	80 93 72 00 	sts	0x0072, r24
     c82:	b0 92 73 00 	sts	0x0073, r11
	sei();
     c86:	78 94       	sei

	if (offset > 2147483) {
     c88:	1e 16       	cp	r1, r30
     c8a:	ac f0       	brlt	.+42     	; 0xcb6 <timer_timestamp_set+0x14c>
     c8c:	ee 23       	and	r30, r30
     c8e:	b9 f4       	brne	.+46     	; 0xcbe <timer_timestamp_set+0x154>
     c90:	99 23       	and	r25, r25
     c92:	89 f4       	brne	.+34     	; 0xcb6 <timer_timestamp_set+0x14c>
     c94:	00 23       	and	r16, r16
     c96:	79 f4       	brne	.+30     	; 0xcb6 <timer_timestamp_set+0x14c>
     c98:	11 23       	and	r17, r17
     c9a:	69 f4       	brne	.+26     	; 0xcb6 <timer_timestamp_set+0x14c>
     c9c:	bb 23       	and	r27, r27
     c9e:	59 f4       	brne	.+22     	; 0xcb6 <timer_timestamp_set+0x14c>
     ca0:	a1 32       	cpi	r26, 0x21	; 33
     ca2:	48 f4       	brcc	.+18     	; 0xcb6 <timer_timestamp_set+0x14c>
     ca4:	a0 32       	cpi	r26, 0x20	; 32
     ca6:	79 f5       	brne	.+94     	; 0xd06 <timer_timestamp_set+0x19c>
     ca8:	f5 3c       	cpi	r31, 0xC5	; 197
     caa:	28 f4       	brcc	.+10     	; 0xcb6 <timer_timestamp_set+0x14c>
     cac:	f4 3c       	cpi	r31, 0xC4	; 196
     cae:	59 f5       	brne	.+86     	; 0xd06 <timer_timestamp_set+0x19c>
     cb0:	8b e9       	ldi	r24, 0x9B	; 155
     cb2:	8e 15       	cp	r24, r14
     cb4:	40 f5       	brcc	.+80     	; 0xd06 <timer_timestamp_set+0x19c>
		drift += 10;
     cb6:	80 91 74 00 	lds	r24, 0x0074
     cba:	86 5f       	subi	r24, 0xF6	; 246
     cbc:	22 c0       	rjmp	.+68     	; 0xd02 <timer_timestamp_set+0x198>
		//led(2,1);
		//led(3,0);
	} else if (offset < -2147483) {
     cbe:	ef 3f       	cpi	r30, 0xFF	; 255
     cc0:	ec f0       	brlt	.+58     	; 0xcfc <timer_timestamp_set+0x192>
     cc2:	ef 3f       	cpi	r30, 0xFF	; 255
     cc4:	01 f5       	brne	.+64     	; 0xd06 <timer_timestamp_set+0x19c>
     cc6:	9f 3f       	cpi	r25, 0xFF	; 255
     cc8:	c8 f0       	brcs	.+50     	; 0xcfc <timer_timestamp_set+0x192>
     cca:	9f 3f       	cpi	r25, 0xFF	; 255
     ccc:	e1 f4       	brne	.+56     	; 0xd06 <timer_timestamp_set+0x19c>
     cce:	0f 3f       	cpi	r16, 0xFF	; 255
     cd0:	a8 f0       	brcs	.+42     	; 0xcfc <timer_timestamp_set+0x192>
     cd2:	0f 3f       	cpi	r16, 0xFF	; 255
     cd4:	c1 f4       	brne	.+48     	; 0xd06 <timer_timestamp_set+0x19c>
     cd6:	1f 3f       	cpi	r17, 0xFF	; 255
     cd8:	88 f0       	brcs	.+34     	; 0xcfc <timer_timestamp_set+0x192>
     cda:	1f 3f       	cpi	r17, 0xFF	; 255
     cdc:	a1 f4       	brne	.+40     	; 0xd06 <timer_timestamp_set+0x19c>
     cde:	bf 3f       	cpi	r27, 0xFF	; 255
     ce0:	68 f0       	brcs	.+26     	; 0xcfc <timer_timestamp_set+0x192>
     ce2:	bf 3f       	cpi	r27, 0xFF	; 255
     ce4:	81 f4       	brne	.+32     	; 0xd06 <timer_timestamp_set+0x19c>
     ce6:	af 3d       	cpi	r26, 0xDF	; 223
     ce8:	48 f0       	brcs	.+18     	; 0xcfc <timer_timestamp_set+0x192>
     cea:	af 3d       	cpi	r26, 0xDF	; 223
     cec:	61 f4       	brne	.+24     	; 0xd06 <timer_timestamp_set+0x19c>
     cee:	fb 33       	cpi	r31, 0x3B	; 59
     cf0:	28 f0       	brcs	.+10     	; 0xcfc <timer_timestamp_set+0x192>
     cf2:	fb 33       	cpi	r31, 0x3B	; 59
     cf4:	41 f4       	brne	.+16     	; 0xd06 <timer_timestamp_set+0x19c>
     cf6:	95 e6       	ldi	r25, 0x65	; 101
     cf8:	e9 16       	cp	r14, r25
     cfa:	28 f4       	brcc	.+10     	; 0xd06 <timer_timestamp_set+0x19c>
		drift -= 10;
     cfc:	80 91 74 00 	lds	r24, 0x0074
     d00:	8a 50       	subi	r24, 0x0A	; 10
     d02:	80 93 74 00 	sts	0x0074, r24
	} else {
		//led(2,0);
		//led(3,0);
	}

	last_ntp_refresh = timestamp>>32;
     d06:	20 91 6c 00 	lds	r18, 0x006C
     d0a:	30 91 6d 00 	lds	r19, 0x006D
     d0e:	40 91 6e 00 	lds	r20, 0x006E
     d12:	50 91 6f 00 	lds	r21, 0x006F
     d16:	60 91 70 00 	lds	r22, 0x0070
     d1a:	70 91 71 00 	lds	r23, 0x0071
     d1e:	80 91 72 00 	lds	r24, 0x0072
     d22:	90 91 73 00 	lds	r25, 0x0073
     d26:	00 e2       	ldi	r16, 0x20	; 32
     d28:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <__lshrdi3>
     d2c:	20 93 85 00 	sts	0x0085, r18
     d30:	30 93 86 00 	sts	0x0086, r19
     d34:	40 93 87 00 	sts	0x0087, r20
     d38:	50 93 88 00 	sts	0x0088, r21
}
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	cf 90       	pop	r12
     d48:	bf 90       	pop	r11
     d4a:	af 90       	pop	r10
     d4c:	08 95       	ret

00000d4e <__vector_7>:
}

//I want 15,258789063us

ISR(TIMER1_COMPA_vect)
{
     d4e:	1f 92       	push	r1
     d50:	0f 92       	push	r0
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	0f 92       	push	r0
     d56:	11 24       	eor	r1, r1
     d58:	ef 93       	push	r30
     d5a:	ff 93       	push	r31

	asm volatile(
     d5c:	e0 91 6c 00 	lds	r30, 0x006C
     d60:	f0 91 74 00 	lds	r31, 0x0074
     d64:	ef 0f       	add	r30, r31
     d66:	e0 93 6c 00 	sts	0x006C, r30
     d6a:	e0 91 6d 00 	lds	r30, 0x006D
     d6e:	f7 e4       	ldi	r31, 0x47	; 71
     d70:	ef 1f       	adc	r30, r31
     d72:	e0 93 6d 00 	sts	0x006D, r30
     d76:	e0 91 6e 00 	lds	r30, 0x006E
     d7a:	f3 e0       	ldi	r31, 0x03	; 3
     d7c:	ef 1f       	adc	r30, r31
     d7e:	e0 93 6e 00 	sts	0x006E, r30
     d82:	d0 f4       	brcc	.+52     	; 0xdb8 <__vector_7+0x6a>
     d84:	e0 91 6f 00 	lds	r30, 0x006F
     d88:	f0 91 70 00 	lds	r31, 0x0070
     d8c:	31 96       	adiw	r30, 0x01	; 1
     d8e:	e0 93 6f 00 	sts	0x006F, r30
     d92:	f0 93 70 00 	sts	0x0070, r31
     d96:	80 f4       	brcc	.+32     	; 0xdb8 <__vector_7+0x6a>
     d98:	e0 91 71 00 	lds	r30, 0x0071
     d9c:	f0 91 72 00 	lds	r31, 0x0072
     da0:	31 96       	adiw	r30, 0x01	; 1
     da2:	e0 93 71 00 	sts	0x0071, r30
     da6:	f0 93 72 00 	sts	0x0072, r31
     daa:	30 f4       	brcc	.+12     	; 0xdb8 <__vector_7+0x6a>
     dac:	e0 91 73 00 	lds	r30, 0x0073
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	31 96       	adiw	r30, 0x01	; 1
     db4:	e0 93 73 00 	sts	0x0073, r30
			: "r30", "r31"

	);

	//timestamp += 65536;
}
     db8:	ff 91       	pop	r31
     dba:	ef 91       	pop	r30
     dbc:	0f 90       	pop	r0
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	0f 90       	pop	r0
     dc2:	1f 90       	pop	r1
     dc4:	18 95       	reti

00000dc6 <timer_doEvents>:
	last_ntp_refresh = timestamp>>32;
}



void timer_doEvents(void) {
     dc6:	ef 92       	push	r14
     dc8:	ff 92       	push	r15
     dca:	0f 93       	push	r16
     dcc:	1f 93       	push	r17
	//Alle 5 Sekunden testen

	uint32_t secstamp = timestamp>>32;
     dce:	20 91 6c 00 	lds	r18, 0x006C
     dd2:	30 91 6d 00 	lds	r19, 0x006D
     dd6:	40 91 6e 00 	lds	r20, 0x006E
     dda:	50 91 6f 00 	lds	r21, 0x006F
     dde:	60 91 70 00 	lds	r22, 0x0070
     de2:	70 91 71 00 	lds	r23, 0x0071
     de6:	80 91 72 00 	lds	r24, 0x0072
     dea:	90 91 73 00 	lds	r25, 0x0073
     dee:	00 e2       	ldi	r16, 0x20	; 32
     df0:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <__lshrdi3>
     df4:	79 01       	movw	r14, r18
     df6:	8a 01       	movw	r16, r20

	if (((secstamp - last_ntp_refresh) > (30)) || (secstamp < 65536))
     df8:	80 91 85 00 	lds	r24, 0x0085
     dfc:	90 91 86 00 	lds	r25, 0x0086
     e00:	a0 91 87 00 	lds	r26, 0x0087
     e04:	b0 91 88 00 	lds	r27, 0x0088
     e08:	a8 01       	movw	r20, r16
     e0a:	97 01       	movw	r18, r14
     e0c:	28 1b       	sub	r18, r24
     e0e:	39 0b       	sbc	r19, r25
     e10:	4a 0b       	sbc	r20, r26
     e12:	5b 0b       	sbc	r21, r27
     e14:	2f 31       	cpi	r18, 0x1F	; 31
     e16:	31 05       	cpc	r19, r1
     e18:	41 05       	cpc	r20, r1
     e1a:	51 05       	cpc	r21, r1
     e1c:	48 f4       	brcc	.+18     	; 0xe30 <timer_doEvents+0x6a>
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	e3 16       	cp	r14, r19
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	f3 06       	cpc	r15, r19
     e26:	31 e0       	ldi	r19, 0x01	; 1
     e28:	03 07       	cpc	r16, r19
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	13 07       	cpc	r17, r19
     e2e:	98 f5       	brcc	.+102    	; 0xe96 <timer_doEvents+0xd0>
	{
		uint8_t low_ts = secstamp;
     e30:	8e 2d       	mov	r24, r14
		uint8_t timediff = (ntp_wait <= low_ts) ? (low_ts - ntp_wait) : (((uint16_t)low_ts + 255) - (uint16_t)ntp_wait);
     e32:	90 91 89 00 	lds	r25, 0x0089
     e36:	e9 16       	cp	r14, r25
     e38:	20 f0       	brcs	.+8      	; 0xe42 <timer_doEvents+0x7c>
     e3a:	4e 2d       	mov	r20, r14
     e3c:	49 1b       	sub	r20, r25
     e3e:	94 2f       	mov	r25, r20
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <timer_doEvents+0x80>
     e42:	90 95       	com	r25
     e44:	9e 0d       	add	r25, r14

		if (timediff > 15) {
     e46:	90 31       	cpi	r25, 0x10	; 16
     e48:	30 f0       	brcs	.+12     	; 0xe56 <timer_doEvents+0x90>
			ntp_wait = low_ts;
     e4a:	80 93 89 00 	sts	0x0089, r24
			ntp_client_start_request(nic_buffer);
     e4e:	81 e4       	ldi	r24, 0x41	; 65
     e50:	93 e0       	ldi	r25, 0x03	; 3
     e52:	0e 94 86 08 	call	0x110c	; 0x110c <ntp_client_start_request>
		}

		if ((secstamp - last_ntp_refresh) > (3*60)) {
     e56:	80 91 85 00 	lds	r24, 0x0085
     e5a:	90 91 86 00 	lds	r25, 0x0086
     e5e:	a0 91 87 00 	lds	r26, 0x0087
     e62:	b0 91 88 00 	lds	r27, 0x0088
     e66:	a8 01       	movw	r20, r16
     e68:	97 01       	movw	r18, r14
     e6a:	28 1b       	sub	r18, r24
     e6c:	39 0b       	sbc	r19, r25
     e6e:	4a 0b       	sbc	r20, r26
     e70:	5b 0b       	sbc	r21, r27
     e72:	25 3b       	cpi	r18, 0xB5	; 181
     e74:	31 05       	cpc	r19, r1
     e76:	41 05       	cpc	r20, r1
     e78:	51 05       	cpc	r21, r1
     e7a:	68 f0       	brcs	.+26     	; 0xe96 <timer_doEvents+0xd0>
			last_ntp_refresh = secstamp - (1*60);
     e7c:	d8 01       	movw	r26, r16
     e7e:	c7 01       	movw	r24, r14
     e80:	cc 97       	sbiw	r24, 0x3c	; 60
     e82:	a1 09       	sbc	r26, r1
     e84:	b1 09       	sbc	r27, r1
     e86:	80 93 85 00 	sts	0x0085, r24
     e8a:	90 93 86 00 	sts	0x0086, r25
     e8e:	a0 93 87 00 	sts	0x0087, r26
     e92:	b0 93 88 00 	sts	0x0088, r27
			//syslog_P(LOG_SEVERITY_INFORMATIONAL, LOG_FACILITY_LOCAL1, PSTR("ntpclient"), PSTR("response timeout"));
		}
	}
}
     e96:	1f 91       	pop	r17
     e98:	0f 91       	pop	r16
     e9a:	ff 90       	pop	r15
     e9c:	ef 90       	pop	r14
     e9e:	08 95       	ret

00000ea0 <ntp_client_init>:

int64_t ntp_offset[4];
uint64_t ntp_delay[4];

void ntp_client_init(uint32_t server_ip, void (*function)(uint64_t time)) {
	ntp_set_time = function;
     ea0:	50 93 90 02 	sts	0x0290, r21
     ea4:	40 93 8f 02 	sts	0x028F, r20
	ntp_server = server_ip;
     ea8:	60 93 b1 02 	sts	0x02B1, r22
     eac:	70 93 b2 02 	sts	0x02B2, r23
     eb0:	80 93 b3 02 	sts	0x02B3, r24
     eb4:	90 93 b4 02 	sts	0x02B4, r25
}
     eb8:	08 95       	ret

00000eba <ntp_client_timestamp_to_time>:
//convert unix timestamp to date/time.
//returns: year,month,day,hour,min,sec (year ist realyear-1970)
//
//inspired by code posted on mikrocontroller.net by peter dannegger:
// see http://www.mikrocontroller.net/forum/read-4-140631.html#new
void ntp_client_timestamp_to_time(unsigned long timestamp, unsigned char *time){
     eba:	ef 92       	push	r14
     ebc:	ff 92       	push	r15
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	7b 01       	movw	r14, r22
     ec8:	8c 01       	movw	r16, r24
     eca:	ea 01       	movw	r28, r20
	//Convert from UTC to GMT+1
	timestamp += 60*60;


	//Sommerzeit...
	timestamp += 60*60;
     ecc:	80 e2       	ldi	r24, 0x20	; 32
     ece:	9c e1       	ldi	r25, 0x1C	; 28
     ed0:	a0 e0       	ldi	r26, 0x00	; 0
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e8 0e       	add	r14, r24
     ed6:	f9 1e       	adc	r15, r25
     ed8:	0a 1f       	adc	r16, r26
     eda:	1b 1f       	adc	r17, r27

	//calculate seconds:
	time[NTP_TIME_SEC] = timestamp % 60;
     edc:	c8 01       	movw	r24, r16
     ede:	b7 01       	movw	r22, r14
     ee0:	2c e3       	ldi	r18, 0x3C	; 60
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	40 e0       	ldi	r20, 0x00	; 0
     ee6:	50 e0       	ldi	r21, 0x00	; 0
     ee8:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__udivmodsi4>
     eec:	6d 83       	std	Y+5, r22	; 0x05
	timestamp = timestamp / 60;
     eee:	c8 01       	movw	r24, r16
     ef0:	b7 01       	movw	r22, r14
     ef2:	2c e3       	ldi	r18, 0x3C	; 60
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	40 e0       	ldi	r20, 0x00	; 0
     ef8:	50 e0       	ldi	r21, 0x00	; 0
     efa:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__udivmodsi4>
     efe:	79 01       	movw	r14, r18
     f00:	8a 01       	movw	r16, r20

	//calculate minutes:
	time[NTP_TIME_MIN] = timestamp % 60;
     f02:	b9 01       	movw	r22, r18
     f04:	ca 01       	movw	r24, r20
     f06:	2c e3       	ldi	r18, 0x3C	; 60
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	40 e0       	ldi	r20, 0x00	; 0
     f0c:	50 e0       	ldi	r21, 0x00	; 0
     f0e:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__udivmodsi4>
     f12:	6c 83       	std	Y+4, r22	; 0x04
	timestamp = timestamp / 60;
     f14:	b7 01       	movw	r22, r14
     f16:	c8 01       	movw	r24, r16
     f18:	2c e3       	ldi	r18, 0x3C	; 60
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	40 e0       	ldi	r20, 0x00	; 0
     f1e:	50 e0       	ldi	r21, 0x00	; 0
     f20:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__udivmodsi4>
     f24:	f2 2e       	mov	r15, r18
     f26:	03 2f       	mov	r16, r19
     f28:	14 2f       	mov	r17, r20
     f2a:	e5 2e       	mov	r14, r21

	//calculate hours:
	time[NTP_TIME_HOUR] = timestamp % 24;
     f2c:	62 2f       	mov	r22, r18
     f2e:	73 2f       	mov	r23, r19
     f30:	84 2f       	mov	r24, r20
     f32:	95 2f       	mov	r25, r21
     f34:	28 e1       	ldi	r18, 0x18	; 24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	40 e0       	ldi	r20, 0x00	; 0
     f3a:	50 e0       	ldi	r21, 0x00	; 0
     f3c:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__udivmodsi4>
     f40:	6b 83       	std	Y+3, r22	; 0x03
	timestamp = timestamp / 24;
     f42:	6f 2d       	mov	r22, r15
     f44:	70 2f       	mov	r23, r16
     f46:	81 2f       	mov	r24, r17
     f48:	9e 2d       	mov	r25, r14
     f4a:	28 e1       	ldi	r18, 0x18	; 24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	40 e0       	ldi	r20, 0x00	; 0
     f50:	50 e0       	ldi	r21, 0x00	; 0
     f52:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__udivmodsi4>
     f56:	82 2f       	mov	r24, r18
     f58:	93 2f       	mov	r25, r19
     f5a:	a4 2f       	mov	r26, r20
     f5c:	b5 2f       	mov	r27, r21
     f5e:	34 e0       	ldi	r19, 0x04	; 4
     f60:	20 e0       	ldi	r18, 0x00	; 0
	while(1){
		tmp_day = 365;

		//leap year ?! (only check 3yr exception)
		//FIXME: add 400yr exception handling !
		if((tmp_year & 0x03)==0){
     f62:	42 2f       	mov	r20, r18
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	43 70       	andi	r20, 0x03	; 3
     f68:	50 70       	andi	r21, 0x00	; 0
     f6a:	41 15       	cp	r20, r1
     f6c:	51 05       	cpc	r21, r1
     f6e:	41 f4       	brne	.+16     	; 0xf80 <ntp_client_timestamp_to_time+0xc6>
			tmp_day = 365 + 1; //yes!

			//100/400 yr exception:
			if(tmp_year == 0 || tmp_year == 100 || tmp_year == 200) //100yr exc
     f70:	22 23       	and	r18, r18
     f72:	21 f0       	breq	.+8      	; 0xf7c <ntp_client_timestamp_to_time+0xc2>
     f74:	24 36       	cpi	r18, 0x64	; 100
     f76:	11 f0       	breq	.+4      	; 0xf7c <ntp_client_timestamp_to_time+0xc2>
     f78:	28 3c       	cpi	r18, 0xC8	; 200
     f7a:	29 f4       	brne	.+10     	; 0xf86 <ntp_client_timestamp_to_time+0xcc>
				if (--leap400)
     f7c:	31 50       	subi	r19, 0x01	; 1
     f7e:	19 f0       	breq	.+6      	; 0xf86 <ntp_client_timestamp_to_time+0xcc>
     f80:	4d e6       	ldi	r20, 0x6D	; 109
     f82:	51 e0       	ldi	r21, 0x01	; 1
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <ntp_client_timestamp_to_time+0xd0>
     f86:	4e e6       	ldi	r20, 0x6E	; 110
     f88:	51 e0       	ldi	r21, 0x01	; 1
					tmp_day = 365;
		}

		//is the rest smaller than the next whole year ?
		if( timestamp < tmp_day )
     f8a:	7a 01       	movw	r14, r20
     f8c:	00 e0       	ldi	r16, 0x00	; 0
     f8e:	10 e0       	ldi	r17, 0x00	; 0
     f90:	8e 15       	cp	r24, r14
     f92:	9f 05       	cpc	r25, r15
     f94:	a0 07       	cpc	r26, r16
     f96:	b1 07       	cpc	r27, r17
     f98:	30 f0       	brcs	.+12     	; 0xfa6 <ntp_client_timestamp_to_time+0xec>
			break; //yes -> exit

		//substract daycount of current year from timestamp
		timestamp -= tmp_day;
     f9a:	8e 19       	sub	r24, r14
     f9c:	9f 09       	sbc	r25, r15
     f9e:	a0 0b       	sbc	r26, r16
     fa0:	b1 0b       	sbc	r27, r17

		//increase year:
		tmp_year++;
     fa2:	2f 5f       	subi	r18, 0xFF	; 255
	}
     fa4:	de cf       	rjmp	.-68     	; 0xf62 <ntp_client_timestamp_to_time+0xa8>

	//tmp_year is now (Ynow-1900)
	time[NTP_TIME_YEAR] = tmp_year;
     fa6:	28 83       	st	Y, r18

	//timestamp is now how many days of the next year have
	//passed. -> calc month & day
	if ((tmp_day == 365) && timestamp > (30+28))
     fa8:	e1 e0       	ldi	r30, 0x01	; 1
     faa:	4d 36       	cpi	r20, 0x6D	; 109
     fac:	5e 07       	cpc	r21, r30
     fae:	41 f4       	brne	.+16     	; 0xfc0 <ntp_client_timestamp_to_time+0x106>
     fb0:	8b 33       	cpi	r24, 0x3B	; 59
     fb2:	91 05       	cpc	r25, r1
     fb4:	a1 05       	cpc	r26, r1
     fb6:	b1 05       	cpc	r27, r1
     fb8:	18 f0       	brcs	.+6      	; 0xfc0 <ntp_client_timestamp_to_time+0x106>
		timestamp++; //no leap year ! -> skip 29th feb
     fba:	01 96       	adiw	r24, 0x01	; 1
     fbc:	a1 1d       	adc	r26, r1
     fbe:	b1 1d       	adc	r27, r1
     fc0:	0f ee       	ldi	r16, 0xEF	; 239
     fc2:	12 e0       	ldi	r17, 0x02	; 2
     fc4:	21 e0       	ldi	r18, 0x01	; 1
     fc6:	a8 01       	movw	r20, r16

	//31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
	//calculate month:
	PGM_P mtd_ptr = NTP_CLIENT_MONTH_TO_DAYS;
	for(tmp=1; tmp<12; tmp++){
		timestamp -= pgm_read_byte(mtd_ptr++);
     fc8:	0f 5f       	subi	r16, 0xFF	; 255
     fca:	1f 4f       	sbci	r17, 0xFF	; 255
     fcc:	fa 01       	movw	r30, r20
     fce:	34 91       	lpm	r19, Z
     fd0:	83 1b       	sub	r24, r19
     fd2:	91 09       	sbc	r25, r1
     fd4:	a1 09       	sbc	r26, r1
     fd6:	b1 09       	sbc	r27, r1
		if (timestamp < pgm_read_byte(mtd_ptr))
     fd8:	f8 01       	movw	r30, r16
     fda:	44 91       	lpm	r20, Z
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	84 17       	cp	r24, r20
     fe4:	95 07       	cpc	r25, r21
     fe6:	a6 07       	cpc	r26, r22
     fe8:	b7 07       	cpc	r27, r23
     fea:	18 f0       	brcs	.+6      	; 0xff2 <ntp_client_timestamp_to_time+0x138>
		timestamp++; //no leap year ! -> skip 29th feb

	//31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
	//calculate month:
	PGM_P mtd_ptr = NTP_CLIENT_MONTH_TO_DAYS;
	for(tmp=1; tmp<12; tmp++){
     fec:	2f 5f       	subi	r18, 0xFF	; 255
     fee:	2c 30       	cpi	r18, 0x0C	; 12
     ff0:	51 f7       	brne	.-44     	; 0xfc6 <ntp_client_timestamp_to_time+0x10c>
		if (timestamp < pgm_read_byte(mtd_ptr))
			break;
	}

	//days are now in timestamp
	time[NTP_TIME_DAY] = timestamp;
     ff2:	8a 83       	std	Y+2, r24	; 0x02

	//current month is in tmp
	time[NTP_TIME_MONTH] = tmp+1;
     ff4:	2f 5f       	subi	r18, 0xFF	; 255
     ff6:	29 83       	std	Y+1, r18	; 0x01

	//finished
}
     ff8:	df 91       	pop	r29
     ffa:	cf 91       	pop	r28
     ffc:	1f 91       	pop	r17
     ffe:	0f 91       	pop	r16
    1000:	ff 90       	pop	r15
    1002:	ef 90       	pop	r14
    1004:	08 95       	ret

00001006 <get_daytime>:

uint16_t get_daytime(uint32_t timestamp) {
    1006:	df 93       	push	r29
    1008:	cf 93       	push	r28
    100a:	00 d0       	rcall	.+0      	; 0x100c <get_daytime+0x6>
    100c:	00 d0       	rcall	.+0      	; 0x100e <get_daytime+0x8>
    100e:	00 d0       	rcall	.+0      	; 0x1010 <get_daytime+0xa>
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
	unsigned char time[6];
	ntp_client_timestamp_to_time(timestamp, time);
    1014:	ae 01       	movw	r20, r28
    1016:	4f 5f       	subi	r20, 0xFF	; 255
    1018:	5f 4f       	sbci	r21, 0xFF	; 255
    101a:	0e 94 5d 07 	call	0xeba	; 0xeba <ntp_client_timestamp_to_time>
    101e:	2c 81       	ldd	r18, Y+4	; 0x04
    1020:	8c e3       	ldi	r24, 0x3C	; 60
    1022:	28 9f       	mul	r18, r24
    1024:	90 01       	movw	r18, r0
    1026:	11 24       	eor	r1, r1
    1028:	8d 81       	ldd	r24, Y+5	; 0x05
    102a:	28 0f       	add	r18, r24
    102c:	31 1d       	adc	r19, r1
	return time[NTP_TIME_MIN] + time[NTP_TIME_HOUR] * 60;
}
    102e:	c9 01       	movw	r24, r18
    1030:	26 96       	adiw	r28, 0x06	; 6
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	08 95       	ret

00001042 <ntp_client_send_request>:
void ntp_client_start_request(char *buffer) {
	ntp_state = 0;
	ntp_client_send_request(buffer);
}

void ntp_client_send_request(char *buffer){
    1042:	cf 92       	push	r12
    1044:	df 92       	push	r13
    1046:	ef 92       	push	r14
    1048:	ff 92       	push	r15
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	00 d0       	rcall	.+0      	; 0x1054 <ntp_client_send_request+0x12>
    1054:	00 d0       	rcall	.+0      	; 0x1056 <ntp_client_send_request+0x14>
    1056:	00 d0       	rcall	.+0      	; 0x1058 <ntp_client_send_request+0x16>
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	6c 01       	movw	r12, r24
	unsigned int i;

	//set NTP flags (client)
	buffer[NTP_POS_FLAGS] = 0xE3;
    105e:	83 ee       	ldi	r24, 0xE3	; 227
    1060:	f6 01       	movw	r30, r12
    1062:	82 a7       	std	Z+42, r24	; 0x2a

	//set peer clock stratum to unspecified
	buffer[NTP_POS_STRATUM] = 0x00;
    1064:	13 a6       	std	Z+43, r1	; 0x2b

	//set poll intervall to 4 (=16sec)
	buffer[NTP_POS_POLL_INTERVAL] = 0x04;
    1066:	84 e0       	ldi	r24, 0x04	; 4
    1068:	84 a7       	std	Z+44, r24	; 0x2c

	//set precision (??)
	buffer[NTP_POS_PRECISION] = 0xFA;
    106a:	8a ef       	ldi	r24, 0xFA	; 250
    106c:	85 a7       	std	Z+45, r24	; 0x2d
    106e:	8e e2       	ldi	r24, 0x2E	; 46
    1070:	90 e0       	ldi	r25, 0x00	; 0

	//clear data buffer:
	//-> we only need to set some values because many data is 0x00
	for(i=NTP_POS_ROOT_DELAY; i<NTP_POS_LAST_DATA; i++)
		buffer[i] = 0x00;
    1072:	f6 01       	movw	r30, r12
    1074:	e8 0f       	add	r30, r24
    1076:	f9 1f       	adc	r31, r25
    1078:	10 82       	st	Z, r1
	//set precision (??)
	buffer[NTP_POS_PRECISION] = 0xFA;

	//clear data buffer:
	//-> we only need to set some values because many data is 0x00
	for(i=NTP_POS_ROOT_DELAY; i<NTP_POS_LAST_DATA; i++)
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	8a 35       	cpi	r24, 0x5A	; 90
    107e:	91 05       	cpc	r25, r1
    1080:	c1 f7       	brne	.-16     	; 0x1072 <ntp_client_send_request+0x30>
		buffer[i] = 0x00;

	//set root delay to 1s -> 0x00 0x01 0x00 0x00
	buffer[NTP_POS_ROOT_DELAY+1] = 0x01; //rest is zero, see above
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	f6 01       	movw	r30, r12
    1086:	87 a7       	std	Z+47, r24	; 0x2f

	//set clock dispersion to 1s -> 0x00 0x01 0x00 0x00
	buffer[NTP_POS_CLOCK_DISP+1] = 0x01; //rest is zero, see above
    1088:	83 ab       	std	Z+51, r24	; 0x33
    108a:	ee 5b       	subi	r30, 0xBE	; 190
    108c:	ff 4f       	sbci	r31, 0xFF	; 255
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	90 e0       	ldi	r25, 0x00	; 0
	//originate timestamp         NULL= 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	//receive timestamp           NULL= 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00


	for(uint8_t i = 0; i < 8; i++) {
		buffer[NTP_POS_ORG_TIMESTAMP+i] = ((char*)&timestamp)[7-i];
    1092:	dc 01       	movw	r26, r24
    1094:	a4 59       	subi	r26, 0x94	; 148
    1096:	bf 4f       	sbci	r27, 0xFF	; 255
    1098:	17 96       	adiw	r26, 0x07	; 7
    109a:	2c 91       	ld	r18, X
    109c:	17 97       	sbiw	r26, 0x07	; 7
    109e:	20 83       	st	Z, r18
		buffer[NTP_POS_TX_TIMESTAMP+i] = ((char*)&timestamp)[7-i];
    10a0:	17 96       	adiw	r26, 0x07	; 7
    10a2:	2c 91       	ld	r18, X
    10a4:	17 97       	sbiw	r26, 0x07	; 7
    10a6:	20 8b       	std	Z+16, r18	; 0x10
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	31 96       	adiw	r30, 0x01	; 1
	//reference clock update time NULL = 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	//originate timestamp         NULL= 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	//receive timestamp           NULL= 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00


	for(uint8_t i = 0; i < 8; i++) {
    10ac:	2f ef       	ldi	r18, 0xFF	; 255
    10ae:	88 3f       	cpi	r24, 0xF8	; 248
    10b0:	92 07       	cpc	r25, r18
    10b2:	79 f7       	brne	.-34     	; 0x1092 <ntp_client_send_request+0x50>
	//send NULL ... MAYBE add timestamp calc from localclock here
	//tx timestamp           NULL= 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00


	unsigned char mac[6];
	if (arpGetMac(&ntp_server, mac, buffer)) {
    10b4:	81 eb       	ldi	r24, 0xB1	; 177
    10b6:	92 e0       	ldi	r25, 0x02	; 2
    10b8:	8e 01       	movw	r16, r28
    10ba:	0f 5f       	subi	r16, 0xFF	; 255
    10bc:	1f 4f       	sbci	r17, 0xFF	; 255
    10be:	b8 01       	movw	r22, r16
    10c0:	a6 01       	movw	r20, r12
    10c2:	0e 94 a3 11 	call	0x2346	; 0x2346 <arpGetMac>
    10c6:	88 23       	and	r24, r24
    10c8:	91 f0       	breq	.+36     	; 0x10ee <ntp_client_send_request+0xac>

		//no need to be called again, we know the mac address of gateway
		udp_generate_packet(buffer, &ntp_server, mac, 40123, IP_PORT_NTP, NTP_DATALENGTH);
    10ca:	c6 01       	movw	r24, r12
    10cc:	61 eb       	ldi	r22, 0xB1	; 177
    10ce:	72 e0       	ldi	r23, 0x02	; 2
    10d0:	a8 01       	movw	r20, r16
    10d2:	2b eb       	ldi	r18, 0xBB	; 187
    10d4:	3c e9       	ldi	r19, 0x9C	; 156
    10d6:	0b e7       	ldi	r16, 0x7B	; 123
    10d8:	10 e0       	ldi	r17, 0x00	; 0
    10da:	e0 e3       	ldi	r30, 0x30	; 48
    10dc:	ee 2e       	mov	r14, r30
    10de:	f1 2c       	mov	r15, r1
    10e0:	0e 94 3b 10 	call	0x2076	; 0x2076 <udp_generate_packet>

		//send packet:
		nic_send_packet(buffer, 14+(IP_HEADER_LENGTH<<2)+8+NTP_DATALENGTH);
    10e4:	c6 01       	movw	r24, r12
    10e6:	6a e5       	ldi	r22, 0x5A	; 90
    10e8:	70 e0       	ldi	r23, 0x00	; 0
    10ea:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <nic_send_packet>

	}
}
    10ee:	26 96       	adiw	r28, 0x06	; 6
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	1f 91       	pop	r17
    1100:	0f 91       	pop	r16
    1102:	ff 90       	pop	r15
    1104:	ef 90       	pop	r14
    1106:	df 90       	pop	r13
    1108:	cf 90       	pop	r12
    110a:	08 95       	ret

0000110c <ntp_client_start_request>:
	ntp_server = server_ip;
}


void ntp_client_start_request(char *buffer) {
	ntp_state = 0;
    110c:	10 92 8a 00 	sts	0x008A, r1
	ntp_client_send_request(buffer);
    1110:	0e 94 21 08 	call	0x1042	; 0x1042 <ntp_client_send_request>
}
    1114:	08 95       	ret

00001116 <ntp_client_decode_packet>:
}

//decode an ntp packet & extract time data
//this is called after ip+udp decidet this packet is valid & is for us.
//-> ip+udp checks are done before (!)
void ntp_client_decode_packet(char *buffer, unsigned int len){
    1116:	2f 92       	push	r2
    1118:	3f 92       	push	r3
    111a:	4f 92       	push	r4
    111c:	5f 92       	push	r5
    111e:	6f 92       	push	r6
    1120:	7f 92       	push	r7
    1122:	8f 92       	push	r8
    1124:	9f 92       	push	r9
    1126:	af 92       	push	r10
    1128:	bf 92       	push	r11
    112a:	cf 92       	push	r12
    112c:	df 92       	push	r13
    112e:	ef 92       	push	r14
    1130:	ff 92       	push	r15
    1132:	0f 93       	push	r16
    1134:	1f 93       	push	r17
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
    113e:	65 97       	sbiw	r28, 0x15	; 21
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	7c 01       	movw	r14, r24
	//check for valid flags, should be:
	//- NTP Version 4
	//- Server Mode
	//-> ignore Leap indicator

	if ((buffer[NTP_POS_FLAGS]&0x3F) != NTP_FLAG_NTP4_SERVER)
    114c:	dc 01       	movw	r26, r24
    114e:	9a 96       	adiw	r26, 0x2a	; 42
    1150:	8c 91       	ld	r24, X
    1152:	9a 97       	sbiw	r26, 0x2a	; 42
    1154:	8f 73       	andi	r24, 0x3F	; 63
    1156:	84 32       	cpi	r24, 0x24	; 36
    1158:	09 f0       	breq	.+2      	; 0x115c <ntp_client_decode_packet+0x46>
    115a:	8c c4       	rjmp	.+2328   	; 0x1a74 <ntp_client_decode_packet+0x95e>
	 */

	uint64_t ts;


	int64_t* offset_tmp = ntp_offset + ntp_state;
    115c:	e0 91 8a 00 	lds	r30, 0x008A
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	13 e0       	ldi	r17, 0x03	; 3
    1164:	ee 0f       	add	r30, r30
    1166:	ff 1f       	adc	r31, r31
    1168:	1a 95       	dec	r17
    116a:	e1 f7       	brne	.-8      	; 0x1164 <ntp_client_decode_packet+0x4e>
    116c:	b5 eb       	ldi	r27, 0xB5	; 181
    116e:	cb 2e       	mov	r12, r27
    1170:	b2 e0       	ldi	r27, 0x02	; 2
    1172:	db 2e       	mov	r13, r27
    1174:	ce 0e       	add	r12, r30
    1176:	df 1e       	adc	r13, r31
	uint64_t* delay_tmp = ntp_delay + ntp_state;
    1178:	ef 56       	subi	r30, 0x6F	; 111
    117a:	fd 4f       	sbci	r31, 0xFD	; 253

	*delay_tmp = timestamp;
    117c:	70 91 6c 00 	lds	r23, 0x006C
    1180:	60 91 6d 00 	lds	r22, 0x006D
    1184:	50 91 6e 00 	lds	r21, 0x006E
    1188:	40 91 6f 00 	lds	r20, 0x006F
    118c:	30 91 70 00 	lds	r19, 0x0070
    1190:	20 91 71 00 	lds	r18, 0x0071
    1194:	90 91 72 00 	lds	r25, 0x0072
    1198:	80 91 73 00 	lds	r24, 0x0073
    119c:	70 83       	st	Z, r23
    119e:	61 83       	std	Z+1, r22	; 0x01
    11a0:	52 83       	std	Z+2, r21	; 0x02
    11a2:	43 83       	std	Z+3, r20	; 0x03
    11a4:	34 83       	std	Z+4, r19	; 0x04
    11a6:	25 83       	std	Z+5, r18	; 0x05
    11a8:	96 83       	std	Z+6, r25	; 0x06
    11aa:	87 83       	std	Z+7, r24	; 0x07
    11ac:	a7 01       	movw	r20, r14
    11ae:	46 5b       	subi	r20, 0xB6	; 182
    11b0:	5f 4f       	sbci	r21, 0xFF	; 255
    11b2:	9e 01       	movw	r18, r28
    11b4:	25 5f       	subi	r18, 0xF5	; 245
    11b6:	3f 4f       	sbci	r19, 0xFF	; 255
    11b8:	3d 8b       	std	Y+21, r19	; 0x15
    11ba:	2c 8b       	std	Y+20, r18	; 0x14
}

//decode an ntp packet & extract time data
//this is called after ip+udp decidet this packet is valid & is for us.
//-> ip+udp checks are done before (!)
void ntp_client_decode_packet(char *buffer, unsigned int len){
    11bc:	ce 01       	movw	r24, r28
    11be:	03 96       	adiw	r24, 0x03	; 3
    11c0:	ba 01       	movw	r22, r20

	*delay_tmp = timestamp;


	for(uint8_t i = 0; i < 8; i++) {
		((char*)&ts)[7-i] = buffer[NTP_POS_RX_TIMESTAMP+i];
    11c2:	db 01       	movw	r26, r22
    11c4:	1d 91       	ld	r17, X+
    11c6:	bd 01       	movw	r22, r26
    11c8:	d9 01       	movw	r26, r18
    11ca:	17 96       	adiw	r26, 0x07	; 7
    11cc:	1c 93       	st	X, r17
    11ce:	17 97       	sbiw	r26, 0x07	; 7
    11d0:	21 50       	subi	r18, 0x01	; 1
    11d2:	30 40       	sbci	r19, 0x00	; 0
	uint64_t* delay_tmp = ntp_delay + ntp_state;

	*delay_tmp = timestamp;


	for(uint8_t i = 0; i < 8; i++) {
    11d4:	28 17       	cp	r18, r24
    11d6:	39 07       	cpc	r19, r25
    11d8:	a1 f7       	brne	.-24     	; 0x11c2 <ntp_client_decode_packet+0xac>
		((char*)&ts)[7-i] = buffer[NTP_POS_RX_TIMESTAMP+i];
	}
	*offset_tmp = (int64_t)ts;
    11da:	2b 85       	ldd	r18, Y+11	; 0x0b
    11dc:	d6 01       	movw	r26, r12
    11de:	2c 93       	st	X, r18
    11e0:	2c 85       	ldd	r18, Y+12	; 0x0c
    11e2:	11 96       	adiw	r26, 0x01	; 1
    11e4:	2c 93       	st	X, r18
    11e6:	11 97       	sbiw	r26, 0x01	; 1
    11e8:	2d 85       	ldd	r18, Y+13	; 0x0d
    11ea:	12 96       	adiw	r26, 0x02	; 2
    11ec:	2c 93       	st	X, r18
    11ee:	12 97       	sbiw	r26, 0x02	; 2
    11f0:	2e 85       	ldd	r18, Y+14	; 0x0e
    11f2:	13 96       	adiw	r26, 0x03	; 3
    11f4:	2c 93       	st	X, r18
    11f6:	13 97       	sbiw	r26, 0x03	; 3
    11f8:	2f 85       	ldd	r18, Y+15	; 0x0f
    11fa:	14 96       	adiw	r26, 0x04	; 4
    11fc:	2c 93       	st	X, r18
    11fe:	14 97       	sbiw	r26, 0x04	; 4
    1200:	28 89       	ldd	r18, Y+16	; 0x10
    1202:	15 96       	adiw	r26, 0x05	; 5
    1204:	2c 93       	st	X, r18
    1206:	15 97       	sbiw	r26, 0x05	; 5
    1208:	29 89       	ldd	r18, Y+17	; 0x11
    120a:	16 96       	adiw	r26, 0x06	; 6
    120c:	2c 93       	st	X, r18
    120e:	16 97       	sbiw	r26, 0x06	; 6
    1210:	2a 89       	ldd	r18, Y+18	; 0x12
    1212:	17 96       	adiw	r26, 0x07	; 7
    1214:	2c 93       	st	X, r18
    1216:	b7 01       	movw	r22, r14
    1218:	6e 5b       	subi	r22, 0xBE	; 190
    121a:	7f 4f       	sbci	r23, 0xFF	; 255
    121c:	2c 89       	ldd	r18, Y+20	; 0x14
    121e:	3d 89       	ldd	r19, Y+21	; 0x15

	for(uint8_t i = 0; i < 8; i++) {
		((char*)&ts)[7-i] = buffer[NTP_POS_ORG_TIMESTAMP+i];
    1220:	db 01       	movw	r26, r22
    1222:	1d 91       	ld	r17, X+
    1224:	bd 01       	movw	r22, r26
    1226:	d9 01       	movw	r26, r18
    1228:	17 96       	adiw	r26, 0x07	; 7
    122a:	1c 93       	st	X, r17
    122c:	17 97       	sbiw	r26, 0x07	; 7
    122e:	21 50       	subi	r18, 0x01	; 1
    1230:	30 40       	sbci	r19, 0x00	; 0
	for(uint8_t i = 0; i < 8; i++) {
		((char*)&ts)[7-i] = buffer[NTP_POS_RX_TIMESTAMP+i];
	}
	*offset_tmp = (int64_t)ts;

	for(uint8_t i = 0; i < 8; i++) {
    1232:	28 17       	cp	r18, r24
    1234:	39 07       	cpc	r19, r25
    1236:	a1 f7       	brne	.-24     	; 0x1220 <ntp_client_decode_packet+0x10a>
		((char*)&ts)[7-i] = buffer[NTP_POS_ORG_TIMESTAMP+i];
	}
	*offset_tmp -= (int64_t)ts;
    1238:	d6 01       	movw	r26, r12
    123a:	2c 91       	ld	r18, X
    123c:	11 96       	adiw	r26, 0x01	; 1
    123e:	8c 90       	ld	r8, X
    1240:	11 97       	sbiw	r26, 0x01	; 1
    1242:	12 96       	adiw	r26, 0x02	; 2
    1244:	9c 90       	ld	r9, X
    1246:	12 97       	sbiw	r26, 0x02	; 2
    1248:	13 96       	adiw	r26, 0x03	; 3
    124a:	ac 90       	ld	r10, X
    124c:	13 97       	sbiw	r26, 0x03	; 3
    124e:	14 96       	adiw	r26, 0x04	; 4
    1250:	bc 90       	ld	r11, X
    1252:	14 97       	sbiw	r26, 0x04	; 4
    1254:	15 96       	adiw	r26, 0x05	; 5
    1256:	0c 91       	ld	r16, X
    1258:	15 97       	sbiw	r26, 0x05	; 5
    125a:	16 96       	adiw	r26, 0x06	; 6
    125c:	1c 91       	ld	r17, X
    125e:	16 97       	sbiw	r26, 0x06	; 6
    1260:	17 96       	adiw	r26, 0x07	; 7
    1262:	7c 90       	ld	r7, X
    1264:	7b 85       	ldd	r23, Y+11	; 0x0b
    1266:	3c 85       	ldd	r19, Y+12	; 0x0c
    1268:	2d 84       	ldd	r2, Y+13	; 0x0d
    126a:	3e 84       	ldd	r3, Y+14	; 0x0e
    126c:	4f 84       	ldd	r4, Y+15	; 0x0f
    126e:	58 88       	ldd	r5, Y+16	; 0x10
    1270:	69 88       	ldd	r6, Y+17	; 0x11
    1272:	ba 89       	ldd	r27, Y+18	; 0x12
    1274:	62 2f       	mov	r22, r18
    1276:	67 1b       	sub	r22, r23
    1278:	76 2f       	mov	r23, r22
    127a:	61 e0       	ldi	r22, 0x01	; 1
    127c:	27 17       	cp	r18, r23
    127e:	08 f0       	brcs	.+2      	; 0x1282 <ntp_client_decode_packet+0x16c>
    1280:	60 e0       	ldi	r22, 0x00	; 0
    1282:	a8 2d       	mov	r26, r8
    1284:	a3 1b       	sub	r26, r19
    1286:	3a 2f       	mov	r19, r26
    1288:	21 e0       	ldi	r18, 0x01	; 1
    128a:	8a 16       	cp	r8, r26
    128c:	08 f0       	brcs	.+2      	; 0x1290 <ntp_client_decode_packet+0x17a>
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	a3 2f       	mov	r26, r19
    1292:	a6 1b       	sub	r26, r22
    1294:	6a 2f       	mov	r22, r26
    1296:	88 24       	eor	r8, r8
    1298:	83 94       	inc	r8
    129a:	3a 17       	cp	r19, r26
    129c:	08 f0       	brcs	.+2      	; 0x12a0 <ntp_client_decode_packet+0x18a>
    129e:	88 24       	eor	r8, r8
    12a0:	28 29       	or	r18, r8
    12a2:	39 2d       	mov	r19, r9
    12a4:	32 19       	sub	r19, r2
    12a6:	23 2e       	mov	r2, r19
    12a8:	31 e0       	ldi	r19, 0x01	; 1
    12aa:	92 14       	cp	r9, r2
    12ac:	08 f0       	brcs	.+2      	; 0x12b0 <ntp_client_decode_packet+0x19a>
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	a2 2d       	mov	r26, r2
    12b2:	a2 1b       	sub	r26, r18
    12b4:	2a 2f       	mov	r18, r26
    12b6:	99 24       	eor	r9, r9
    12b8:	93 94       	inc	r9
    12ba:	2a 16       	cp	r2, r26
    12bc:	08 f0       	brcs	.+2      	; 0x12c0 <ntp_client_decode_packet+0x1aa>
    12be:	99 24       	eor	r9, r9
    12c0:	39 29       	or	r19, r9
    12c2:	aa 2d       	mov	r26, r10
    12c4:	a3 19       	sub	r26, r3
    12c6:	3a 2e       	mov	r3, r26
    12c8:	99 24       	eor	r9, r9
    12ca:	93 94       	inc	r9
    12cc:	aa 16       	cp	r10, r26
    12ce:	08 f0       	brcs	.+2      	; 0x12d2 <ntp_client_decode_packet+0x1bc>
    12d0:	99 24       	eor	r9, r9
    12d2:	a3 2c       	mov	r10, r3
    12d4:	a3 1a       	sub	r10, r19
    12d6:	31 e0       	ldi	r19, 0x01	; 1
    12d8:	3a 14       	cp	r3, r10
    12da:	08 f0       	brcs	.+2      	; 0x12de <ntp_client_decode_packet+0x1c8>
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	93 2a       	or	r9, r19
    12e0:	3b 2d       	mov	r19, r11
    12e2:	34 19       	sub	r19, r4
    12e4:	43 2e       	mov	r4, r19
    12e6:	31 e0       	ldi	r19, 0x01	; 1
    12e8:	b4 14       	cp	r11, r4
    12ea:	08 f0       	brcs	.+2      	; 0x12ee <ntp_client_decode_packet+0x1d8>
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	a4 2d       	mov	r26, r4
    12f0:	a9 19       	sub	r26, r9
    12f2:	9a 2e       	mov	r9, r26
    12f4:	bb 24       	eor	r11, r11
    12f6:	b3 94       	inc	r11
    12f8:	4a 16       	cp	r4, r26
    12fa:	08 f0       	brcs	.+2      	; 0x12fe <ntp_client_decode_packet+0x1e8>
    12fc:	bb 24       	eor	r11, r11
    12fe:	3b 29       	or	r19, r11
    1300:	a0 2f       	mov	r26, r16
    1302:	a5 19       	sub	r26, r5
    1304:	5a 2e       	mov	r5, r26
    1306:	bb 24       	eor	r11, r11
    1308:	b3 94       	inc	r11
    130a:	0a 17       	cp	r16, r26
    130c:	08 f0       	brcs	.+2      	; 0x1310 <ntp_client_decode_packet+0x1fa>
    130e:	bb 24       	eor	r11, r11
    1310:	05 2d       	mov	r16, r5
    1312:	03 1b       	sub	r16, r19
    1314:	31 e0       	ldi	r19, 0x01	; 1
    1316:	50 16       	cp	r5, r16
    1318:	08 f0       	brcs	.+2      	; 0x131c <ntp_client_decode_packet+0x206>
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	b3 2a       	or	r11, r19
    131e:	31 2f       	mov	r19, r17
    1320:	36 19       	sub	r19, r6
    1322:	63 2e       	mov	r6, r19
    1324:	31 e0       	ldi	r19, 0x01	; 1
    1326:	16 15       	cp	r17, r6
    1328:	08 f0       	brcs	.+2      	; 0x132c <ntp_client_decode_packet+0x216>
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	a6 2d       	mov	r26, r6
    132e:	ab 19       	sub	r26, r11
    1330:	ba 2e       	mov	r11, r26
    1332:	11 e0       	ldi	r17, 0x01	; 1
    1334:	6a 16       	cp	r6, r26
    1336:	08 f0       	brcs	.+2      	; 0x133a <ntp_client_decode_packet+0x224>
    1338:	10 e0       	ldi	r17, 0x00	; 0
    133a:	31 2b       	or	r19, r17
    133c:	7b 1a       	sub	r7, r27
    133e:	73 1a       	sub	r7, r19
    1340:	d6 01       	movw	r26, r12
    1342:	7c 93       	st	X, r23
    1344:	11 96       	adiw	r26, 0x01	; 1
    1346:	6c 93       	st	X, r22
    1348:	11 97       	sbiw	r26, 0x01	; 1
    134a:	12 96       	adiw	r26, 0x02	; 2
    134c:	2c 93       	st	X, r18
    134e:	12 97       	sbiw	r26, 0x02	; 2
    1350:	13 96       	adiw	r26, 0x03	; 3
    1352:	ac 92       	st	X, r10
    1354:	13 97       	sbiw	r26, 0x03	; 3
    1356:	14 96       	adiw	r26, 0x04	; 4
    1358:	9c 92       	st	X, r9
    135a:	14 97       	sbiw	r26, 0x04	; 4
    135c:	15 96       	adiw	r26, 0x05	; 5
    135e:	0c 93       	st	X, r16
    1360:	15 97       	sbiw	r26, 0x05	; 5
    1362:	16 96       	adiw	r26, 0x06	; 6
    1364:	bc 92       	st	X, r11
    1366:	16 97       	sbiw	r26, 0x06	; 6
    1368:	17 96       	adiw	r26, 0x07	; 7
    136a:	7c 92       	st	X, r7
	*delay_tmp -= (uint64_t)ts;
    136c:	20 81       	ld	r18, Z
    136e:	81 80       	ldd	r8, Z+1	; 0x01
    1370:	92 80       	ldd	r9, Z+2	; 0x02
    1372:	a3 80       	ldd	r10, Z+3	; 0x03
    1374:	b4 80       	ldd	r11, Z+4	; 0x04
    1376:	05 81       	ldd	r16, Z+5	; 0x05
    1378:	16 81       	ldd	r17, Z+6	; 0x06
    137a:	77 80       	ldd	r7, Z+7	; 0x07
    137c:	7b 85       	ldd	r23, Y+11	; 0x0b
    137e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1380:	2d 84       	ldd	r2, Y+13	; 0x0d
    1382:	3e 84       	ldd	r3, Y+14	; 0x0e
    1384:	4f 84       	ldd	r4, Y+15	; 0x0f
    1386:	58 88       	ldd	r5, Y+16	; 0x10
    1388:	69 88       	ldd	r6, Y+17	; 0x11
    138a:	ba 89       	ldd	r27, Y+18	; 0x12
    138c:	62 2f       	mov	r22, r18
    138e:	67 1b       	sub	r22, r23
    1390:	76 2f       	mov	r23, r22
    1392:	61 e0       	ldi	r22, 0x01	; 1
    1394:	27 17       	cp	r18, r23
    1396:	08 f0       	brcs	.+2      	; 0x139a <ntp_client_decode_packet+0x284>
    1398:	60 e0       	ldi	r22, 0x00	; 0
    139a:	a8 2d       	mov	r26, r8
    139c:	a3 1b       	sub	r26, r19
    139e:	3a 2f       	mov	r19, r26
    13a0:	21 e0       	ldi	r18, 0x01	; 1
    13a2:	8a 16       	cp	r8, r26
    13a4:	08 f0       	brcs	.+2      	; 0x13a8 <ntp_client_decode_packet+0x292>
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	a3 2f       	mov	r26, r19
    13aa:	a6 1b       	sub	r26, r22
    13ac:	6a 2f       	mov	r22, r26
    13ae:	88 24       	eor	r8, r8
    13b0:	83 94       	inc	r8
    13b2:	3a 17       	cp	r19, r26
    13b4:	08 f0       	brcs	.+2      	; 0x13b8 <ntp_client_decode_packet+0x2a2>
    13b6:	88 24       	eor	r8, r8
    13b8:	28 29       	or	r18, r8
    13ba:	39 2d       	mov	r19, r9
    13bc:	32 19       	sub	r19, r2
    13be:	23 2e       	mov	r2, r19
    13c0:	31 e0       	ldi	r19, 0x01	; 1
    13c2:	92 14       	cp	r9, r2
    13c4:	08 f0       	brcs	.+2      	; 0x13c8 <ntp_client_decode_packet+0x2b2>
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	a2 2d       	mov	r26, r2
    13ca:	a2 1b       	sub	r26, r18
    13cc:	2a 2f       	mov	r18, r26
    13ce:	99 24       	eor	r9, r9
    13d0:	93 94       	inc	r9
    13d2:	2a 16       	cp	r2, r26
    13d4:	08 f0       	brcs	.+2      	; 0x13d8 <ntp_client_decode_packet+0x2c2>
    13d6:	99 24       	eor	r9, r9
    13d8:	39 29       	or	r19, r9
    13da:	aa 2d       	mov	r26, r10
    13dc:	a3 19       	sub	r26, r3
    13de:	3a 2e       	mov	r3, r26
    13e0:	99 24       	eor	r9, r9
    13e2:	93 94       	inc	r9
    13e4:	aa 16       	cp	r10, r26
    13e6:	08 f0       	brcs	.+2      	; 0x13ea <ntp_client_decode_packet+0x2d4>
    13e8:	99 24       	eor	r9, r9
    13ea:	a3 2c       	mov	r10, r3
    13ec:	a3 1a       	sub	r10, r19
    13ee:	31 e0       	ldi	r19, 0x01	; 1
    13f0:	3a 14       	cp	r3, r10
    13f2:	08 f0       	brcs	.+2      	; 0x13f6 <ntp_client_decode_packet+0x2e0>
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	93 2a       	or	r9, r19
    13f8:	3b 2d       	mov	r19, r11
    13fa:	34 19       	sub	r19, r4
    13fc:	43 2e       	mov	r4, r19
    13fe:	31 e0       	ldi	r19, 0x01	; 1
    1400:	b4 14       	cp	r11, r4
    1402:	08 f0       	brcs	.+2      	; 0x1406 <ntp_client_decode_packet+0x2f0>
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	a4 2d       	mov	r26, r4
    1408:	a9 19       	sub	r26, r9
    140a:	9a 2e       	mov	r9, r26
    140c:	bb 24       	eor	r11, r11
    140e:	b3 94       	inc	r11
    1410:	4a 16       	cp	r4, r26
    1412:	08 f0       	brcs	.+2      	; 0x1416 <ntp_client_decode_packet+0x300>
    1414:	bb 24       	eor	r11, r11
    1416:	3b 29       	or	r19, r11
    1418:	a0 2f       	mov	r26, r16
    141a:	a5 19       	sub	r26, r5
    141c:	5a 2e       	mov	r5, r26
    141e:	bb 24       	eor	r11, r11
    1420:	b3 94       	inc	r11
    1422:	0a 17       	cp	r16, r26
    1424:	08 f0       	brcs	.+2      	; 0x1428 <ntp_client_decode_packet+0x312>
    1426:	bb 24       	eor	r11, r11
    1428:	05 2d       	mov	r16, r5
    142a:	03 1b       	sub	r16, r19
    142c:	31 e0       	ldi	r19, 0x01	; 1
    142e:	50 16       	cp	r5, r16
    1430:	08 f0       	brcs	.+2      	; 0x1434 <ntp_client_decode_packet+0x31e>
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	b3 2a       	or	r11, r19
    1436:	31 2f       	mov	r19, r17
    1438:	36 19       	sub	r19, r6
    143a:	63 2e       	mov	r6, r19
    143c:	31 e0       	ldi	r19, 0x01	; 1
    143e:	16 15       	cp	r17, r6
    1440:	08 f0       	brcs	.+2      	; 0x1444 <ntp_client_decode_packet+0x32e>
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	a6 2d       	mov	r26, r6
    1446:	ab 19       	sub	r26, r11
    1448:	ba 2e       	mov	r11, r26
    144a:	11 e0       	ldi	r17, 0x01	; 1
    144c:	6a 16       	cp	r6, r26
    144e:	08 f0       	brcs	.+2      	; 0x1452 <ntp_client_decode_packet+0x33c>
    1450:	10 e0       	ldi	r17, 0x00	; 0
    1452:	31 2b       	or	r19, r17
    1454:	7b 1a       	sub	r7, r27
    1456:	73 1a       	sub	r7, r19
    1458:	70 83       	st	Z, r23
    145a:	61 83       	std	Z+1, r22	; 0x01
    145c:	22 83       	std	Z+2, r18	; 0x02
    145e:	a3 82       	std	Z+3, r10	; 0x03
    1460:	94 82       	std	Z+4, r9	; 0x04
    1462:	05 83       	std	Z+5, r16	; 0x05
    1464:	b6 82       	std	Z+6, r11	; 0x06
    1466:	77 82       	std	Z+7, r7	; 0x07
    1468:	2c 89       	ldd	r18, Y+20	; 0x14
    146a:	3d 89       	ldd	r19, Y+21	; 0x15

	for(uint8_t i = 0; i < 8; i++) {
		((char*)&ts)[7-i] = buffer[NTP_POS_RX_TIMESTAMP+i];
    146c:	da 01       	movw	r26, r20
    146e:	6d 91       	ld	r22, X+
    1470:	ad 01       	movw	r20, r26
    1472:	d9 01       	movw	r26, r18
    1474:	17 96       	adiw	r26, 0x07	; 7
    1476:	6c 93       	st	X, r22
    1478:	17 97       	sbiw	r26, 0x07	; 7
    147a:	21 50       	subi	r18, 0x01	; 1
    147c:	30 40       	sbci	r19, 0x00	; 0
		((char*)&ts)[7-i] = buffer[NTP_POS_ORG_TIMESTAMP+i];
	}
	*offset_tmp -= (int64_t)ts;
	*delay_tmp -= (uint64_t)ts;

	for(uint8_t i = 0; i < 8; i++) {
    147e:	28 17       	cp	r18, r24
    1480:	39 07       	cpc	r19, r25
    1482:	a1 f7       	brne	.-24     	; 0x146c <ntp_client_decode_packet+0x356>
		((char*)&ts)[7-i] = buffer[NTP_POS_RX_TIMESTAMP+i];
	}
	*delay_tmp += (uint64_t)ts;
    1484:	30 81       	ld	r19, Z
    1486:	a1 80       	ldd	r10, Z+1	; 0x01
    1488:	b2 80       	ldd	r11, Z+2	; 0x02
    148a:	43 80       	ldd	r4, Z+3	; 0x03
    148c:	54 80       	ldd	r5, Z+4	; 0x04
    148e:	65 80       	ldd	r6, Z+5	; 0x05
    1490:	96 80       	ldd	r9, Z+6	; 0x06
    1492:	77 80       	ldd	r7, Z+7	; 0x07
    1494:	2b 85       	ldd	r18, Y+11	; 0x0b
    1496:	4c 85       	ldd	r20, Y+12	; 0x0c
    1498:	3d 84       	ldd	r3, Y+13	; 0x0d
    149a:	1e 85       	ldd	r17, Y+14	; 0x0e
    149c:	7f 85       	ldd	r23, Y+15	; 0x0f
    149e:	58 89       	ldd	r21, Y+16	; 0x10
    14a0:	69 89       	ldd	r22, Y+17	; 0x11
    14a2:	8a 88       	ldd	r8, Y+18	; 0x12
    14a4:	23 0f       	add	r18, r19
    14a6:	01 e0       	ldi	r16, 0x01	; 1
    14a8:	23 17       	cp	r18, r19
    14aa:	08 f0       	brcs	.+2      	; 0x14ae <ntp_client_decode_packet+0x398>
    14ac:	00 e0       	ldi	r16, 0x00	; 0
    14ae:	4a 0d       	add	r20, r10
    14b0:	31 e0       	ldi	r19, 0x01	; 1
    14b2:	4a 15       	cp	r20, r10
    14b4:	08 f0       	brcs	.+2      	; 0x14b8 <ntp_client_decode_packet+0x3a2>
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	a0 2e       	mov	r10, r16
    14ba:	a4 0e       	add	r10, r20
    14bc:	01 e0       	ldi	r16, 0x01	; 1
    14be:	a4 16       	cp	r10, r20
    14c0:	08 f0       	brcs	.+2      	; 0x14c4 <ntp_client_decode_packet+0x3ae>
    14c2:	00 e0       	ldi	r16, 0x00	; 0
    14c4:	30 2b       	or	r19, r16
    14c6:	0b 2d       	mov	r16, r11
    14c8:	03 0d       	add	r16, r3
    14ca:	41 e0       	ldi	r20, 0x01	; 1
    14cc:	0b 15       	cp	r16, r11
    14ce:	08 f0       	brcs	.+2      	; 0x14d2 <ntp_client_decode_packet+0x3bc>
    14d0:	40 e0       	ldi	r20, 0x00	; 0
    14d2:	b3 2e       	mov	r11, r19
    14d4:	b0 0e       	add	r11, r16
    14d6:	31 e0       	ldi	r19, 0x01	; 1
    14d8:	b0 16       	cp	r11, r16
    14da:	08 f0       	brcs	.+2      	; 0x14de <ntp_client_decode_packet+0x3c8>
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	43 2b       	or	r20, r19
    14e0:	14 0d       	add	r17, r4
    14e2:	31 e0       	ldi	r19, 0x01	; 1
    14e4:	14 15       	cp	r17, r4
    14e6:	08 f0       	brcs	.+2      	; 0x14ea <ntp_client_decode_packet+0x3d4>
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	04 2f       	mov	r16, r20
    14ec:	01 0f       	add	r16, r17
    14ee:	41 e0       	ldi	r20, 0x01	; 1
    14f0:	01 17       	cp	r16, r17
    14f2:	08 f0       	brcs	.+2      	; 0x14f6 <ntp_client_decode_packet+0x3e0>
    14f4:	40 e0       	ldi	r20, 0x00	; 0
    14f6:	34 2b       	or	r19, r20
    14f8:	75 0d       	add	r23, r5
    14fa:	41 e0       	ldi	r20, 0x01	; 1
    14fc:	75 15       	cp	r23, r5
    14fe:	08 f0       	brcs	.+2      	; 0x1502 <ntp_client_decode_packet+0x3ec>
    1500:	40 e0       	ldi	r20, 0x00	; 0
    1502:	13 2f       	mov	r17, r19
    1504:	17 0f       	add	r17, r23
    1506:	31 e0       	ldi	r19, 0x01	; 1
    1508:	17 17       	cp	r17, r23
    150a:	08 f0       	brcs	.+2      	; 0x150e <ntp_client_decode_packet+0x3f8>
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	43 2b       	or	r20, r19
    1510:	56 0d       	add	r21, r6
    1512:	31 e0       	ldi	r19, 0x01	; 1
    1514:	56 15       	cp	r21, r6
    1516:	08 f0       	brcs	.+2      	; 0x151a <ntp_client_decode_packet+0x404>
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	45 0f       	add	r20, r21
    151c:	71 e0       	ldi	r23, 0x01	; 1
    151e:	45 17       	cp	r20, r21
    1520:	08 f0       	brcs	.+2      	; 0x1524 <ntp_client_decode_packet+0x40e>
    1522:	70 e0       	ldi	r23, 0x00	; 0
    1524:	37 2b       	or	r19, r23
    1526:	69 0d       	add	r22, r9
    1528:	71 e0       	ldi	r23, 0x01	; 1
    152a:	69 15       	cp	r22, r9
    152c:	08 f0       	brcs	.+2      	; 0x1530 <ntp_client_decode_packet+0x41a>
    152e:	70 e0       	ldi	r23, 0x00	; 0
    1530:	36 0f       	add	r19, r22
    1532:	51 e0       	ldi	r21, 0x01	; 1
    1534:	36 17       	cp	r19, r22
    1536:	08 f0       	brcs	.+2      	; 0x153a <ntp_client_decode_packet+0x424>
    1538:	50 e0       	ldi	r21, 0x00	; 0
    153a:	57 2b       	or	r21, r23
    153c:	87 0c       	add	r8, r7
    153e:	58 0d       	add	r21, r8
    1540:	20 83       	st	Z, r18
    1542:	a1 82       	std	Z+1, r10	; 0x01
    1544:	b2 82       	std	Z+2, r11	; 0x02
    1546:	03 83       	std	Z+3, r16	; 0x03
    1548:	14 83       	std	Z+4, r17	; 0x04
    154a:	45 83       	std	Z+5, r20	; 0x05
    154c:	36 83       	std	Z+6, r19	; 0x06
    154e:	57 83       	std	Z+7, r21	; 0x07
    1550:	97 01       	movw	r18, r14
    1552:	2e 5a       	subi	r18, 0xAE	; 174
    1554:	3f 4f       	sbci	r19, 0xFF	; 255

	for(uint8_t i = 0; i < 8; i++) {
		((char*)&ts)[7-i] = buffer[NTP_POS_TX_TIMESTAMP+i];
    1556:	d9 01       	movw	r26, r18
    1558:	4d 91       	ld	r20, X+
    155a:	9d 01       	movw	r18, r26
    155c:	ac 89       	ldd	r26, Y+20	; 0x14
    155e:	bd 89       	ldd	r27, Y+21	; 0x15
    1560:	17 96       	adiw	r26, 0x07	; 7
    1562:	4c 93       	st	X, r20
    1564:	17 97       	sbiw	r26, 0x07	; 7
    1566:	11 97       	sbiw	r26, 0x01	; 1
    1568:	bd 8b       	std	Y+21, r27	; 0x15
    156a:	ac 8b       	std	Y+20, r26	; 0x14
	for(uint8_t i = 0; i < 8; i++) {
		((char*)&ts)[7-i] = buffer[NTP_POS_RX_TIMESTAMP+i];
	}
	*delay_tmp += (uint64_t)ts;

	for(uint8_t i = 0; i < 8; i++) {
    156c:	a8 17       	cp	r26, r24
    156e:	b9 07       	cpc	r27, r25
    1570:	91 f7       	brne	.-28     	; 0x1556 <ntp_client_decode_packet+0x440>
		((char*)&ts)[7-i] = buffer[NTP_POS_TX_TIMESTAMP+i];
	}
	*offset_tmp += (int64_t)ts;
    1572:	d6 01       	movw	r26, r12
    1574:	9c 91       	ld	r25, X
    1576:	11 96       	adiw	r26, 0x01	; 1
    1578:	7c 90       	ld	r7, X
    157a:	11 97       	sbiw	r26, 0x01	; 1
    157c:	12 96       	adiw	r26, 0x02	; 2
    157e:	5c 90       	ld	r5, X
    1580:	12 97       	sbiw	r26, 0x02	; 2
    1582:	13 96       	adiw	r26, 0x03	; 3
    1584:	8c 90       	ld	r8, X
    1586:	13 97       	sbiw	r26, 0x03	; 3
    1588:	14 96       	adiw	r26, 0x04	; 4
    158a:	9c 90       	ld	r9, X
    158c:	14 97       	sbiw	r26, 0x04	; 4
    158e:	15 96       	adiw	r26, 0x05	; 5
    1590:	ac 90       	ld	r10, X
    1592:	15 97       	sbiw	r26, 0x05	; 5
    1594:	16 96       	adiw	r26, 0x06	; 6
    1596:	bc 90       	ld	r11, X
    1598:	16 97       	sbiw	r26, 0x06	; 6
    159a:	17 96       	adiw	r26, 0x07	; 7
    159c:	0c 91       	ld	r16, X
    159e:	8b 85       	ldd	r24, Y+11	; 0x0b
    15a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    15a2:	7d 85       	ldd	r23, Y+13	; 0x0d
    15a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    15a6:	5f 85       	ldd	r21, Y+15	; 0x0f
    15a8:	38 89       	ldd	r19, Y+16	; 0x10
    15aa:	49 89       	ldd	r20, Y+17	; 0x11
    15ac:	1a 89       	ldd	r17, Y+18	; 0x12
    15ae:	89 0f       	add	r24, r25
    15b0:	b1 e0       	ldi	r27, 0x01	; 1
    15b2:	89 17       	cp	r24, r25
    15b4:	08 f0       	brcs	.+2      	; 0x15b8 <ntp_client_decode_packet+0x4a2>
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	27 0d       	add	r18, r7
    15ba:	91 e0       	ldi	r25, 0x01	; 1
    15bc:	27 15       	cp	r18, r7
    15be:	08 f0       	brcs	.+2      	; 0x15c2 <ntp_client_decode_packet+0x4ac>
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	7b 2e       	mov	r7, r27
    15c4:	72 0e       	add	r7, r18
    15c6:	61 e0       	ldi	r22, 0x01	; 1
    15c8:	72 16       	cp	r7, r18
    15ca:	08 f0       	brcs	.+2      	; 0x15ce <ntp_client_decode_packet+0x4b8>
    15cc:	60 e0       	ldi	r22, 0x00	; 0
    15ce:	96 2b       	or	r25, r22
    15d0:	75 0d       	add	r23, r5
    15d2:	21 e0       	ldi	r18, 0x01	; 1
    15d4:	75 15       	cp	r23, r5
    15d6:	08 f0       	brcs	.+2      	; 0x15da <ntp_client_decode_packet+0x4c4>
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	59 2e       	mov	r5, r25
    15dc:	57 0e       	add	r5, r23
    15de:	91 e0       	ldi	r25, 0x01	; 1
    15e0:	57 16       	cp	r5, r23
    15e2:	08 f0       	brcs	.+2      	; 0x15e6 <ntp_client_decode_packet+0x4d0>
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	29 2b       	or	r18, r25
    15e8:	68 2d       	mov	r22, r8
    15ea:	66 0d       	add	r22, r6
    15ec:	91 e0       	ldi	r25, 0x01	; 1
    15ee:	68 15       	cp	r22, r8
    15f0:	08 f0       	brcs	.+2      	; 0x15f4 <ntp_client_decode_packet+0x4de>
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	72 2f       	mov	r23, r18
    15f6:	76 0f       	add	r23, r22
    15f8:	21 e0       	ldi	r18, 0x01	; 1
    15fa:	76 17       	cp	r23, r22
    15fc:	08 f0       	brcs	.+2      	; 0x1600 <ntp_client_decode_packet+0x4ea>
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	92 2b       	or	r25, r18
    1602:	59 0d       	add	r21, r9
    1604:	21 e0       	ldi	r18, 0x01	; 1
    1606:	59 15       	cp	r21, r9
    1608:	08 f0       	brcs	.+2      	; 0x160c <ntp_client_decode_packet+0x4f6>
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	69 2f       	mov	r22, r25
    160e:	65 0f       	add	r22, r21
    1610:	91 e0       	ldi	r25, 0x01	; 1
    1612:	65 17       	cp	r22, r21
    1614:	08 f0       	brcs	.+2      	; 0x1618 <ntp_client_decode_packet+0x502>
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	29 2b       	or	r18, r25
    161a:	3a 0d       	add	r19, r10
    161c:	91 e0       	ldi	r25, 0x01	; 1
    161e:	3a 15       	cp	r19, r10
    1620:	08 f0       	brcs	.+2      	; 0x1624 <ntp_client_decode_packet+0x50e>
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	23 0f       	add	r18, r19
    1626:	51 e0       	ldi	r21, 0x01	; 1
    1628:	23 17       	cp	r18, r19
    162a:	08 f0       	brcs	.+2      	; 0x162e <ntp_client_decode_packet+0x518>
    162c:	50 e0       	ldi	r21, 0x00	; 0
    162e:	95 2b       	or	r25, r21
    1630:	4b 0d       	add	r20, r11
    1632:	31 e0       	ldi	r19, 0x01	; 1
    1634:	4b 15       	cp	r20, r11
    1636:	08 f0       	brcs	.+2      	; 0x163a <ntp_client_decode_packet+0x524>
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	59 2f       	mov	r21, r25
    163c:	54 0f       	add	r21, r20
    163e:	91 e0       	ldi	r25, 0x01	; 1
    1640:	54 17       	cp	r21, r20
    1642:	08 f0       	brcs	.+2      	; 0x1646 <ntp_client_decode_packet+0x530>
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	39 2b       	or	r19, r25
    1648:	10 0f       	add	r17, r16
    164a:	31 0f       	add	r19, r17
    164c:	d6 01       	movw	r26, r12
    164e:	8c 93       	st	X, r24
    1650:	11 96       	adiw	r26, 0x01	; 1
    1652:	7c 92       	st	X, r7
    1654:	11 97       	sbiw	r26, 0x01	; 1
    1656:	12 96       	adiw	r26, 0x02	; 2
    1658:	5c 92       	st	X, r5
    165a:	12 97       	sbiw	r26, 0x02	; 2
    165c:	13 96       	adiw	r26, 0x03	; 3
    165e:	7c 93       	st	X, r23
    1660:	13 97       	sbiw	r26, 0x03	; 3
    1662:	14 96       	adiw	r26, 0x04	; 4
    1664:	6c 93       	st	X, r22
    1666:	14 97       	sbiw	r26, 0x04	; 4
    1668:	15 96       	adiw	r26, 0x05	; 5
    166a:	2c 93       	st	X, r18
    166c:	15 97       	sbiw	r26, 0x05	; 5
    166e:	16 96       	adiw	r26, 0x06	; 6
    1670:	5c 93       	st	X, r21
    1672:	16 97       	sbiw	r26, 0x06	; 6
    1674:	17 96       	adiw	r26, 0x07	; 7
    1676:	3c 93       	st	X, r19
	*delay_tmp -= (uint64_t)ts;
    1678:	90 81       	ld	r25, Z
    167a:	71 80       	ldd	r7, Z+1	; 0x01
    167c:	a2 81       	ldd	r26, Z+2	; 0x02
    167e:	83 80       	ldd	r8, Z+3	; 0x03
    1680:	94 80       	ldd	r9, Z+4	; 0x04
    1682:	a5 80       	ldd	r10, Z+5	; 0x05
    1684:	b6 80       	ldd	r11, Z+6	; 0x06
    1686:	27 81       	ldd	r18, Z+7	; 0x07
    1688:	1b 85       	ldd	r17, Y+11	; 0x0b
    168a:	8c 85       	ldd	r24, Y+12	; 0x0c
    168c:	7d 85       	ldd	r23, Y+13	; 0x0d
    168e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1690:	5f 85       	ldd	r21, Y+15	; 0x0f
    1692:	48 89       	ldd	r20, Y+16	; 0x10
    1694:	39 89       	ldd	r19, Y+17	; 0x11
    1696:	0a 89       	ldd	r16, Y+18	; 0x12
    1698:	b9 2f       	mov	r27, r25
    169a:	b1 1b       	sub	r27, r17
    169c:	1b 2f       	mov	r17, r27
    169e:	b1 e0       	ldi	r27, 0x01	; 1
    16a0:	91 17       	cp	r25, r17
    16a2:	08 f0       	brcs	.+2      	; 0x16a6 <ntp_client_decode_packet+0x590>
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	67 2d       	mov	r22, r7
    16a8:	68 1b       	sub	r22, r24
    16aa:	86 2f       	mov	r24, r22
    16ac:	91 e0       	ldi	r25, 0x01	; 1
    16ae:	76 16       	cp	r7, r22
    16b0:	08 f0       	brcs	.+2      	; 0x16b4 <ntp_client_decode_packet+0x59e>
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	68 2f       	mov	r22, r24
    16b6:	6b 1b       	sub	r22, r27
    16b8:	b6 2f       	mov	r27, r22
    16ba:	61 e0       	ldi	r22, 0x01	; 1
    16bc:	8b 17       	cp	r24, r27
    16be:	08 f0       	brcs	.+2      	; 0x16c2 <ntp_client_decode_packet+0x5ac>
    16c0:	60 e0       	ldi	r22, 0x00	; 0
    16c2:	96 2b       	or	r25, r22
    16c4:	8a 2f       	mov	r24, r26
    16c6:	87 1b       	sub	r24, r23
    16c8:	78 2f       	mov	r23, r24
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	a7 17       	cp	r26, r23
    16ce:	08 f0       	brcs	.+2      	; 0x16d2 <ntp_client_decode_packet+0x5bc>
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	a7 2f       	mov	r26, r23
    16d4:	a9 1b       	sub	r26, r25
    16d6:	91 e0       	ldi	r25, 0x01	; 1
    16d8:	7a 17       	cp	r23, r26
    16da:	08 f0       	brcs	.+2      	; 0x16de <ntp_client_decode_packet+0x5c8>
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	89 2b       	or	r24, r25
    16e0:	68 2d       	mov	r22, r8
    16e2:	66 19       	sub	r22, r6
    16e4:	91 e0       	ldi	r25, 0x01	; 1
    16e6:	86 16       	cp	r8, r22
    16e8:	08 f0       	brcs	.+2      	; 0x16ec <ntp_client_decode_packet+0x5d6>
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	76 2f       	mov	r23, r22
    16ee:	78 1b       	sub	r23, r24
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	67 17       	cp	r22, r23
    16f4:	08 f0       	brcs	.+2      	; 0x16f8 <ntp_client_decode_packet+0x5e2>
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	98 2b       	or	r25, r24
    16fa:	69 2d       	mov	r22, r9
    16fc:	65 1b       	sub	r22, r21
    16fe:	56 2f       	mov	r21, r22
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	96 16       	cp	r9, r22
    1704:	08 f0       	brcs	.+2      	; 0x1708 <ntp_client_decode_packet+0x5f2>
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	65 2f       	mov	r22, r21
    170a:	69 1b       	sub	r22, r25
    170c:	91 e0       	ldi	r25, 0x01	; 1
    170e:	56 17       	cp	r21, r22
    1710:	08 f0       	brcs	.+2      	; 0x1714 <ntp_client_decode_packet+0x5fe>
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	89 2b       	or	r24, r25
    1716:	9a 2d       	mov	r25, r10
    1718:	94 1b       	sub	r25, r20
    171a:	49 2f       	mov	r20, r25
    171c:	91 e0       	ldi	r25, 0x01	; 1
    171e:	a4 16       	cp	r10, r20
    1720:	08 f0       	brcs	.+2      	; 0x1724 <ntp_client_decode_packet+0x60e>
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	54 2f       	mov	r21, r20
    1726:	58 1b       	sub	r21, r24
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	45 17       	cp	r20, r21
    172c:	08 f0       	brcs	.+2      	; 0x1730 <ntp_client_decode_packet+0x61a>
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	98 2b       	or	r25, r24
    1732:	4b 2d       	mov	r20, r11
    1734:	43 1b       	sub	r20, r19
    1736:	34 2f       	mov	r19, r20
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	b4 16       	cp	r11, r20
    173c:	08 f0       	brcs	.+2      	; 0x1740 <ntp_client_decode_packet+0x62a>
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	43 2f       	mov	r20, r19
    1742:	49 1b       	sub	r20, r25
    1744:	91 e0       	ldi	r25, 0x01	; 1
    1746:	34 17       	cp	r19, r20
    1748:	08 f0       	brcs	.+2      	; 0x174c <ntp_client_decode_packet+0x636>
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	89 2b       	or	r24, r25
    174e:	20 1b       	sub	r18, r16
    1750:	28 1b       	sub	r18, r24
    1752:	10 83       	st	Z, r17
    1754:	b1 83       	std	Z+1, r27	; 0x01
    1756:	a2 83       	std	Z+2, r26	; 0x02
    1758:	73 83       	std	Z+3, r23	; 0x03
    175a:	64 83       	std	Z+4, r22	; 0x04
    175c:	55 83       	std	Z+5, r21	; 0x05
    175e:	46 83       	std	Z+6, r20	; 0x06
    1760:	27 83       	std	Z+7, r18	; 0x07

	*offset_tmp -= timestamp;
    1762:	20 91 6c 00 	lds	r18, 0x006C
    1766:	50 91 6d 00 	lds	r21, 0x006D
    176a:	60 91 6e 00 	lds	r22, 0x006E
    176e:	70 91 6f 00 	lds	r23, 0x006F
    1772:	90 90 70 00 	lds	r9, 0x0070
    1776:	e0 91 71 00 	lds	r30, 0x0071
    177a:	f0 91 72 00 	lds	r31, 0x0072
    177e:	10 91 73 00 	lds	r17, 0x0073

	*offset_tmp >>=1;
    1782:	d6 01       	movw	r26, r12
    1784:	4c 91       	ld	r20, X
    1786:	11 96       	adiw	r26, 0x01	; 1
    1788:	8c 91       	ld	r24, X
    178a:	11 97       	sbiw	r26, 0x01	; 1
    178c:	12 96       	adiw	r26, 0x02	; 2
    178e:	ac 90       	ld	r10, X
    1790:	12 97       	sbiw	r26, 0x02	; 2
    1792:	13 96       	adiw	r26, 0x03	; 3
    1794:	bc 90       	ld	r11, X
    1796:	13 97       	sbiw	r26, 0x03	; 3
    1798:	14 96       	adiw	r26, 0x04	; 4
    179a:	0c 91       	ld	r16, X
    179c:	14 97       	sbiw	r26, 0x04	; 4
    179e:	15 96       	adiw	r26, 0x05	; 5
    17a0:	8c 90       	ld	r8, X
    17a2:	15 97       	sbiw	r26, 0x05	; 5
    17a4:	16 96       	adiw	r26, 0x06	; 6
    17a6:	7c 90       	ld	r7, X
    17a8:	16 97       	sbiw	r26, 0x06	; 6
    17aa:	17 96       	adiw	r26, 0x07	; 7
    17ac:	9c 91       	ld	r25, X
    17ae:	b4 2f       	mov	r27, r20
    17b0:	b2 1b       	sub	r27, r18
    17b2:	2b 2f       	mov	r18, r27
    17b4:	31 e0       	ldi	r19, 0x01	; 1
    17b6:	4b 17       	cp	r20, r27
    17b8:	08 f0       	brcs	.+2      	; 0x17bc <ntp_client_decode_packet+0x6a6>
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	48 2f       	mov	r20, r24
    17be:	45 1b       	sub	r20, r21
    17c0:	54 2f       	mov	r21, r20
    17c2:	41 e0       	ldi	r20, 0x01	; 1
    17c4:	85 17       	cp	r24, r21
    17c6:	08 f0       	brcs	.+2      	; 0x17ca <ntp_client_decode_packet+0x6b4>
    17c8:	40 e0       	ldi	r20, 0x00	; 0
    17ca:	85 2f       	mov	r24, r21
    17cc:	83 1b       	sub	r24, r19
    17ce:	38 2f       	mov	r19, r24
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	53 17       	cp	r21, r19
    17d4:	08 f0       	brcs	.+2      	; 0x17d8 <ntp_client_decode_packet+0x6c2>
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	48 2b       	or	r20, r24
    17da:	aa 2d       	mov	r26, r10
    17dc:	a6 1b       	sub	r26, r22
    17de:	6a 2f       	mov	r22, r26
    17e0:	51 e0       	ldi	r21, 0x01	; 1
    17e2:	aa 16       	cp	r10, r26
    17e4:	08 f0       	brcs	.+2      	; 0x17e8 <ntp_client_decode_packet+0x6d2>
    17e6:	50 e0       	ldi	r21, 0x00	; 0
    17e8:	b6 2f       	mov	r27, r22
    17ea:	b4 1b       	sub	r27, r20
    17ec:	4b 2f       	mov	r20, r27
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	6b 17       	cp	r22, r27
    17f2:	08 f0       	brcs	.+2      	; 0x17f6 <ntp_client_decode_packet+0x6e0>
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	58 2b       	or	r21, r24
    17f8:	6b 2d       	mov	r22, r11
    17fa:	67 1b       	sub	r22, r23
    17fc:	76 2f       	mov	r23, r22
    17fe:	61 e0       	ldi	r22, 0x01	; 1
    1800:	b7 16       	cp	r11, r23
    1802:	08 f0       	brcs	.+2      	; 0x1806 <ntp_client_decode_packet+0x6f0>
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	87 2f       	mov	r24, r23
    1808:	85 1b       	sub	r24, r21
    180a:	58 2f       	mov	r21, r24
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	75 17       	cp	r23, r21
    1810:	08 f0       	brcs	.+2      	; 0x1814 <ntp_client_decode_packet+0x6fe>
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	68 2b       	or	r22, r24
    1816:	80 2f       	mov	r24, r16
    1818:	89 19       	sub	r24, r9
    181a:	71 e0       	ldi	r23, 0x01	; 1
    181c:	08 17       	cp	r16, r24
    181e:	08 f0       	brcs	.+2      	; 0x1822 <ntp_client_decode_packet+0x70c>
    1820:	70 e0       	ldi	r23, 0x00	; 0
    1822:	a8 2f       	mov	r26, r24
    1824:	a6 1b       	sub	r26, r22
    1826:	6a 2f       	mov	r22, r26
    1828:	01 e0       	ldi	r16, 0x01	; 1
    182a:	8a 17       	cp	r24, r26
    182c:	08 f0       	brcs	.+2      	; 0x1830 <ntp_client_decode_packet+0x71a>
    182e:	00 e0       	ldi	r16, 0x00	; 0
    1830:	70 2b       	or	r23, r16
    1832:	b8 2d       	mov	r27, r8
    1834:	be 1b       	sub	r27, r30
    1836:	eb 2f       	mov	r30, r27
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	8b 16       	cp	r8, r27
    183c:	08 f0       	brcs	.+2      	; 0x1840 <ntp_client_decode_packet+0x72a>
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	ae 2f       	mov	r26, r30
    1842:	a7 1b       	sub	r26, r23
    1844:	7a 2f       	mov	r23, r26
    1846:	b1 e0       	ldi	r27, 0x01	; 1
    1848:	ea 17       	cp	r30, r26
    184a:	08 f0       	brcs	.+2      	; 0x184e <ntp_client_decode_packet+0x738>
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	8b 2b       	or	r24, r27
    1850:	b7 2d       	mov	r27, r7
    1852:	bf 1b       	sub	r27, r31
    1854:	fb 2f       	mov	r31, r27
    1856:	e1 e0       	ldi	r30, 0x01	; 1
    1858:	7b 16       	cp	r7, r27
    185a:	08 f0       	brcs	.+2      	; 0x185e <ntp_client_decode_packet+0x748>
    185c:	e0 e0       	ldi	r30, 0x00	; 0
    185e:	af 2f       	mov	r26, r31
    1860:	a8 1b       	sub	r26, r24
    1862:	8a 2f       	mov	r24, r26
    1864:	a1 e0       	ldi	r26, 0x01	; 1
    1866:	f8 17       	cp	r31, r24
    1868:	08 f0       	brcs	.+2      	; 0x186c <ntp_client_decode_packet+0x756>
    186a:	a0 e0       	ldi	r26, 0x00	; 0
    186c:	ea 2b       	or	r30, r26
    186e:	91 1b       	sub	r25, r17
    1870:	9e 1b       	sub	r25, r30
    1872:	01 e0       	ldi	r16, 0x01	; 1
    1874:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <__ashrdi3>
    1878:	f6 01       	movw	r30, r12
    187a:	20 83       	st	Z, r18
    187c:	31 83       	std	Z+1, r19	; 0x01
    187e:	42 83       	std	Z+2, r20	; 0x02
    1880:	53 83       	std	Z+3, r21	; 0x03
    1882:	64 83       	std	Z+4, r22	; 0x04
    1884:	75 83       	std	Z+5, r23	; 0x05
    1886:	86 83       	std	Z+6, r24	; 0x06
    1888:	97 83       	std	Z+7, r25	; 0x07

	ntp_state++;
    188a:	80 91 8a 00 	lds	r24, 0x008A
    188e:	8f 5f       	subi	r24, 0xFF	; 255
    1890:	80 93 8a 00 	sts	0x008A, r24

	if (ntp_state == 4) {
    1894:	84 30       	cpi	r24, 0x04	; 4
    1896:	09 f0       	breq	.+2      	; 0x189a <ntp_client_decode_packet+0x784>
    1898:	ea c0       	rjmp	.+468    	; 0x1a6e <ntp_client_decode_packet+0x958>
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	99 24       	eor	r9, r9
    18a0:	9a 94       	dec	r9
    18a2:	af ef       	ldi	r26, 0xFF	; 255
    18a4:	7f ef       	ldi	r23, 0xFF	; 255
    18a6:	6f ef       	ldi	r22, 0xFF	; 255
    18a8:	5f ef       	ldi	r21, 0xFF	; 255
    18aa:	4f ef       	ldi	r20, 0xFF	; 255
    18ac:	3f ef       	ldi	r19, 0xFF	; 255
    18ae:	2f ef       	ldi	r18, 0xFF	; 255
		uint64_t diff_tmp = ~0; //0xFFFFFFFFFFFFFFFF;
		for(uint8_t i = 0; i < 4; i++) {
			if (ntp_delay[i] < diff_tmp) {
    18b0:	fc 01       	movw	r30, r24
    18b2:	ef 56       	subi	r30, 0x6F	; 111
    18b4:	fd 4f       	sbci	r31, 0xFD	; 253
    18b6:	80 80       	ld	r8, Z
    18b8:	a1 80       	ldd	r10, Z+1	; 0x01
    18ba:	b2 80       	ldd	r11, Z+2	; 0x02
    18bc:	e3 80       	ldd	r14, Z+3	; 0x03
    18be:	04 81       	ldd	r16, Z+4	; 0x04
    18c0:	15 81       	ldd	r17, Z+5	; 0x05
    18c2:	b6 81       	ldd	r27, Z+6	; 0x06
    18c4:	e7 81       	ldd	r30, Z+7	; 0x07
    18c6:	e2 17       	cp	r30, r18
    18c8:	28 f1       	brcs	.+74     	; 0x1914 <ntp_client_decode_packet+0x7fe>
    18ca:	2e 17       	cp	r18, r30
    18cc:	d1 f4       	brne	.+52     	; 0x1902 <ntp_client_decode_packet+0x7ec>
    18ce:	b3 17       	cp	r27, r19
    18d0:	08 f1       	brcs	.+66     	; 0x1914 <ntp_client_decode_packet+0x7fe>
    18d2:	3b 17       	cp	r19, r27
    18d4:	b1 f4       	brne	.+44     	; 0x1902 <ntp_client_decode_packet+0x7ec>
    18d6:	14 17       	cp	r17, r20
    18d8:	e8 f0       	brcs	.+58     	; 0x1914 <ntp_client_decode_packet+0x7fe>
    18da:	41 17       	cp	r20, r17
    18dc:	91 f4       	brne	.+36     	; 0x1902 <ntp_client_decode_packet+0x7ec>
    18de:	05 17       	cp	r16, r21
    18e0:	c8 f0       	brcs	.+50     	; 0x1914 <ntp_client_decode_packet+0x7fe>
    18e2:	50 17       	cp	r21, r16
    18e4:	71 f4       	brne	.+28     	; 0x1902 <ntp_client_decode_packet+0x7ec>
    18e6:	e6 16       	cp	r14, r22
    18e8:	a8 f0       	brcs	.+42     	; 0x1914 <ntp_client_decode_packet+0x7fe>
    18ea:	6e 15       	cp	r22, r14
    18ec:	51 f4       	brne	.+20     	; 0x1902 <ntp_client_decode_packet+0x7ec>
    18ee:	b7 16       	cp	r11, r23
    18f0:	88 f0       	brcs	.+34     	; 0x1914 <ntp_client_decode_packet+0x7fe>
    18f2:	7b 15       	cp	r23, r11
    18f4:	31 f4       	brne	.+12     	; 0x1902 <ntp_client_decode_packet+0x7ec>
    18f6:	aa 16       	cp	r10, r26
    18f8:	68 f0       	brcs	.+26     	; 0x1914 <ntp_client_decode_packet+0x7fe>
    18fa:	aa 15       	cp	r26, r10
    18fc:	11 f4       	brne	.+4      	; 0x1902 <ntp_client_decode_packet+0x7ec>
    18fe:	89 14       	cp	r8, r9
    1900:	48 f0       	brcs	.+18     	; 0x1914 <ntp_client_decode_packet+0x7fe>
    1902:	89 2c       	mov	r8, r9
    1904:	aa 2e       	mov	r10, r26
    1906:	b7 2e       	mov	r11, r23
    1908:	e6 2e       	mov	r14, r22
    190a:	05 2f       	mov	r16, r21
    190c:	14 2f       	mov	r17, r20
    190e:	b3 2f       	mov	r27, r19
    1910:	e2 2f       	mov	r30, r18
    1912:	06 c0       	rjmp	.+12     	; 0x1920 <ntp_client_decode_packet+0x80a>
    1914:	a5 eb       	ldi	r26, 0xB5	; 181
    1916:	ca 2e       	mov	r12, r26
    1918:	a2 e0       	ldi	r26, 0x02	; 2
    191a:	da 2e       	mov	r13, r26
    191c:	c8 0e       	add	r12, r24
    191e:	d9 1e       	adc	r13, r25
    1920:	08 96       	adiw	r24, 0x08	; 8

	ntp_state++;

	if (ntp_state == 4) {
		uint64_t diff_tmp = ~0; //0xFFFFFFFFFFFFFFFF;
		for(uint8_t i = 0; i < 4; i++) {
    1922:	80 32       	cpi	r24, 0x20	; 32
    1924:	91 05       	cpc	r25, r1
    1926:	49 f0       	breq	.+18     	; 0x193a <ntp_client_decode_packet+0x824>
    1928:	98 2c       	mov	r9, r8
    192a:	aa 2d       	mov	r26, r10
    192c:	7b 2d       	mov	r23, r11
    192e:	6e 2d       	mov	r22, r14
    1930:	50 2f       	mov	r21, r16
    1932:	41 2f       	mov	r20, r17
    1934:	3b 2f       	mov	r19, r27
    1936:	2e 2f       	mov	r18, r30
    1938:	bb cf       	rjmp	.-138    	; 0x18b0 <ntp_client_decode_packet+0x79a>
		}



		//(ntp_set_time)((timestamp + (0xFFFFFFFF * 1000)));
		timer_timestamp_set(timestamp + *offset_tmp);
    193a:	40 91 6c 00 	lds	r20, 0x006C
    193e:	a0 90 6d 00 	lds	r10, 0x006D
    1942:	b0 90 6e 00 	lds	r11, 0x006E
    1946:	e0 90 6f 00 	lds	r14, 0x006F
    194a:	10 91 70 00 	lds	r17, 0x0070
    194e:	b0 91 71 00 	lds	r27, 0x0071
    1952:	a0 91 72 00 	lds	r26, 0x0072
    1956:	00 91 73 00 	lds	r16, 0x0073
    195a:	f6 01       	movw	r30, r12
    195c:	20 81       	ld	r18, Z
    195e:	51 81       	ldd	r21, Z+1	; 0x01
    1960:	62 81       	ldd	r22, Z+2	; 0x02
    1962:	73 81       	ldd	r23, Z+3	; 0x03
    1964:	94 80       	ldd	r9, Z+4	; 0x04
    1966:	85 80       	ldd	r8, Z+5	; 0x05
    1968:	76 80       	ldd	r7, Z+6	; 0x06
    196a:	97 81       	ldd	r25, Z+7	; 0x07
    196c:	24 0f       	add	r18, r20
    196e:	31 e0       	ldi	r19, 0x01	; 1
    1970:	24 17       	cp	r18, r20
    1972:	08 f0       	brcs	.+2      	; 0x1976 <ntp_client_decode_packet+0x860>
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	5a 0d       	add	r21, r10
    1978:	41 e0       	ldi	r20, 0x01	; 1
    197a:	5a 15       	cp	r21, r10
    197c:	08 f0       	brcs	.+2      	; 0x1980 <ntp_client_decode_packet+0x86a>
    197e:	40 e0       	ldi	r20, 0x00	; 0
    1980:	35 0f       	add	r19, r21
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	35 17       	cp	r19, r21
    1986:	08 f0       	brcs	.+2      	; 0x198a <ntp_client_decode_packet+0x874>
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	48 2b       	or	r20, r24
    198c:	6b 0d       	add	r22, r11
    198e:	51 e0       	ldi	r21, 0x01	; 1
    1990:	6b 15       	cp	r22, r11
    1992:	08 f0       	brcs	.+2      	; 0x1996 <ntp_client_decode_packet+0x880>
    1994:	50 e0       	ldi	r21, 0x00	; 0
    1996:	46 0f       	add	r20, r22
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	46 17       	cp	r20, r22
    199c:	08 f0       	brcs	.+2      	; 0x19a0 <ntp_client_decode_packet+0x88a>
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	58 2b       	or	r21, r24
    19a2:	7e 0d       	add	r23, r14
    19a4:	61 e0       	ldi	r22, 0x01	; 1
    19a6:	7e 15       	cp	r23, r14
    19a8:	08 f0       	brcs	.+2      	; 0x19ac <ntp_client_decode_packet+0x896>
    19aa:	60 e0       	ldi	r22, 0x00	; 0
    19ac:	57 0f       	add	r21, r23
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	57 17       	cp	r21, r23
    19b2:	08 f0       	brcs	.+2      	; 0x19b6 <ntp_client_decode_packet+0x8a0>
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	68 2b       	or	r22, r24
    19b8:	81 2f       	mov	r24, r17
    19ba:	89 0d       	add	r24, r9
    19bc:	71 e0       	ldi	r23, 0x01	; 1
    19be:	81 17       	cp	r24, r17
    19c0:	08 f0       	brcs	.+2      	; 0x19c4 <ntp_client_decode_packet+0x8ae>
    19c2:	70 e0       	ldi	r23, 0x00	; 0
    19c4:	68 0f       	add	r22, r24
    19c6:	11 e0       	ldi	r17, 0x01	; 1
    19c8:	68 17       	cp	r22, r24
    19ca:	08 f0       	brcs	.+2      	; 0x19ce <ntp_client_decode_packet+0x8b8>
    19cc:	10 e0       	ldi	r17, 0x00	; 0
    19ce:	71 2b       	or	r23, r17
    19d0:	e8 2d       	mov	r30, r8
    19d2:	eb 0f       	add	r30, r27
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	eb 17       	cp	r30, r27
    19d8:	08 f0       	brcs	.+2      	; 0x19dc <ntp_client_decode_packet+0x8c6>
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	7e 0f       	add	r23, r30
    19de:	b1 e0       	ldi	r27, 0x01	; 1
    19e0:	7e 17       	cp	r23, r30
    19e2:	08 f0       	brcs	.+2      	; 0x19e6 <ntp_client_decode_packet+0x8d0>
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	8b 2b       	or	r24, r27
    19e8:	f7 2d       	mov	r31, r7
    19ea:	fa 0f       	add	r31, r26
    19ec:	e1 e0       	ldi	r30, 0x01	; 1
    19ee:	fa 17       	cp	r31, r26
    19f0:	08 f0       	brcs	.+2      	; 0x19f4 <ntp_client_decode_packet+0x8de>
    19f2:	e0 e0       	ldi	r30, 0x00	; 0
    19f4:	8f 0f       	add	r24, r31
    19f6:	a1 e0       	ldi	r26, 0x01	; 1
    19f8:	8f 17       	cp	r24, r31
    19fa:	08 f0       	brcs	.+2      	; 0x19fe <ntp_client_decode_packet+0x8e8>
    19fc:	a0 e0       	ldi	r26, 0x00	; 0
    19fe:	ea 2b       	or	r30, r26
    1a00:	90 0f       	add	r25, r16
    1a02:	9e 0f       	add	r25, r30
    1a04:	0e 94 b5 05 	call	0xb6a	; 0xb6a <timer_timestamp_set>


		uint32_t dest_ip = IP(172,18,101,121);
    1a08:	89 e7       	ldi	r24, 0x79	; 121
    1a0a:	95 e6       	ldi	r25, 0x65	; 101
    1a0c:	a2 e1       	ldi	r26, 0x12	; 18
    1a0e:	bc ea       	ldi	r27, 0xAC	; 172
    1a10:	89 83       	std	Y+1, r24	; 0x01
    1a12:	9a 83       	std	Y+2, r25	; 0x02
    1a14:	ab 83       	std	Y+3, r26	; 0x03
    1a16:	bc 83       	std	Y+4, r27	; 0x04
		unsigned char dest_mac[6];

		if (arpGetMac(&dest_ip, dest_mac, nic_buffer)) {
    1a18:	8e 01       	movw	r16, r28
    1a1a:	0b 5f       	subi	r16, 0xFB	; 251
    1a1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a1e:	7e 01       	movw	r14, r28
    1a20:	08 94       	sec
    1a22:	e1 1c       	adc	r14, r1
    1a24:	f1 1c       	adc	r15, r1
    1a26:	c7 01       	movw	r24, r14
    1a28:	b8 01       	movw	r22, r16
    1a2a:	41 e4       	ldi	r20, 0x41	; 65
    1a2c:	53 e0       	ldi	r21, 0x03	; 3
    1a2e:	0e 94 a3 11 	call	0x2346	; 0x2346 <arpGetMac>
    1a32:	88 23       	and	r24, r24
    1a34:	f9 f0       	breq	.+62     	; 0x1a74 <ntp_client_decode_packet+0x95e>

			udp_generate_packet(nic_buffer, &dest_ip, dest_mac, 55000, 55001, 8);
    1a36:	81 e4       	ldi	r24, 0x41	; 65
    1a38:	93 e0       	ldi	r25, 0x03	; 3
    1a3a:	b7 01       	movw	r22, r14
    1a3c:	a8 01       	movw	r20, r16
    1a3e:	28 ed       	ldi	r18, 0xD8	; 216
    1a40:	36 ed       	ldi	r19, 0xD6	; 214
    1a42:	09 ed       	ldi	r16, 0xD9	; 217
    1a44:	16 ed       	ldi	r17, 0xD6	; 214
    1a46:	f8 e0       	ldi	r31, 0x08	; 8
    1a48:	ef 2e       	mov	r14, r31
    1a4a:	f1 2c       	mov	r15, r1
    1a4c:	0e 94 3b 10 	call	0x2076	; 0x2076 <udp_generate_packet>
			memcpy(&nic_buffer[UDP_POS_DATA], offset_tmp, 8);
    1a50:	ab e6       	ldi	r26, 0x6B	; 107
    1a52:	b3 e0       	ldi	r27, 0x03	; 3
    1a54:	f6 01       	movw	r30, r12
    1a56:	88 e0       	ldi	r24, 0x08	; 8
    1a58:	01 90       	ld	r0, Z+
    1a5a:	0d 92       	st	X+, r0
    1a5c:	81 50       	subi	r24, 0x01	; 1
    1a5e:	e1 f7       	brne	.-8      	; 0x1a58 <ntp_client_decode_packet+0x942>
			nic_send_packet(nic_buffer, 42+8);
    1a60:	81 e4       	ldi	r24, 0x41	; 65
    1a62:	93 e0       	ldi	r25, 0x03	; 3
    1a64:	62 e3       	ldi	r22, 0x32	; 50
    1a66:	70 e0       	ldi	r23, 0x00	; 0
    1a68:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <nic_send_packet>
    1a6c:	03 c0       	rjmp	.+6      	; 0x1a74 <ntp_client_decode_packet+0x95e>
		}

	} else {
		ntp_client_send_request(buffer);
    1a6e:	c7 01       	movw	r24, r14
    1a70:	0e 94 21 08 	call	0x1042	; 0x1042 <ntp_client_send_request>
	}

	//kurz unsere eigentliche Zeit aktualisieren

}
    1a74:	65 96       	adiw	r28, 0x15	; 21
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	cf 91       	pop	r28
    1a82:	df 91       	pop	r29
    1a84:	1f 91       	pop	r17
    1a86:	0f 91       	pop	r16
    1a88:	ff 90       	pop	r15
    1a8a:	ef 90       	pop	r14
    1a8c:	df 90       	pop	r13
    1a8e:	cf 90       	pop	r12
    1a90:	bf 90       	pop	r11
    1a92:	af 90       	pop	r10
    1a94:	9f 90       	pop	r9
    1a96:	8f 90       	pop	r8
    1a98:	7f 90       	pop	r7
    1a9a:	6f 90       	pop	r6
    1a9c:	5f 90       	pop	r5
    1a9e:	4f 90       	pop	r4
    1aa0:	3f 90       	pop	r3
    1aa2:	2f 90       	pop	r2
    1aa4:	08 95       	ret

00001aa6 <dhcp_init>:
	nic_ip_to_buffer(&buffer[UDP_POS_DATA + current_pos + 2], ip);
	return current_pos + 6;
}

void dhcp_init(char* name) {
	dhcp_name = name;
    1aa6:	90 93 d6 02 	sts	0x02D6, r25
    1aaa:	80 93 d5 02 	sts	0x02D5, r24
}
    1aae:	08 95       	ret

00001ab0 <dhcp_generate_base_packet>:
	}

}

void dhcp_generate_base_packet(char *buffer, uint16_t length)
{
    1ab0:	8f 92       	push	r8
    1ab2:	9f 92       	push	r9
    1ab4:	af 92       	push	r10
    1ab6:	bf 92       	push	r11
    1ab8:	cf 92       	push	r12
    1aba:	df 92       	push	r13
    1abc:	ef 92       	push	r14
    1abe:	ff 92       	push	r15
    1ac0:	0f 93       	push	r16
    1ac2:	1f 93       	push	r17
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	2a 97       	sbiw	r28, 0x0a	; 10
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	de bf       	out	0x3e, r29	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	cd bf       	out	0x3d, r28	; 61
    1ad8:	6c 01       	movw	r12, r24
    1ada:	7b 01       	movw	r14, r22
	unsigned char c;

	uint32_t dest_ip = 0xFFFFFFFF;
    1adc:	8f ef       	ldi	r24, 0xFF	; 255
    1ade:	9f ef       	ldi	r25, 0xFF	; 255
    1ae0:	af ef       	ldi	r26, 0xFF	; 255
    1ae2:	bf ef       	ldi	r27, 0xFF	; 255
    1ae4:	89 83       	std	Y+1, r24	; 0x01
    1ae6:	9a 83       	std	Y+2, r25	; 0x02
    1ae8:	ab 83       	std	Y+3, r26	; 0x03
    1aea:	bc 83       	std	Y+4, r27	; 0x04
	unsigned char dest_mac[] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
    1aec:	de 01       	movw	r26, r28
    1aee:	15 96       	adiw	r26, 0x05	; 5
    1af0:	e5 e7       	ldi	r30, 0x75	; 117
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	86 e0       	ldi	r24, 0x06	; 6
    1af6:	01 90       	ld	r0, Z+
    1af8:	0d 92       	st	X+, r0
    1afa:	81 50       	subi	r24, 0x01	; 1
    1afc:	e1 f7       	brne	.-8      	; 0x1af6 <dhcp_generate_base_packet+0x46>
	uint32_t tmp_nic_ip;

	tmp_nic_ip = nic_ip;
    1afe:	80 90 ac 05 	lds	r8, 0x05AC
    1b02:	90 90 ad 05 	lds	r9, 0x05AD
    1b06:	a0 90 ae 05 	lds	r10, 0x05AE
    1b0a:	b0 90 af 05 	lds	r11, 0x05AF
	nic_ip = 0x00000000;
    1b0e:	10 92 ac 05 	sts	0x05AC, r1
    1b12:	10 92 ad 05 	sts	0x05AD, r1
    1b16:	10 92 ae 05 	sts	0x05AE, r1
    1b1a:	10 92 af 05 	sts	0x05AF, r1
	udp_generate_packet(buffer, &dest_ip, dest_mac, 68, 67, length);
    1b1e:	c6 01       	movw	r24, r12
    1b20:	be 01       	movw	r22, r28
    1b22:	6f 5f       	subi	r22, 0xFF	; 255
    1b24:	7f 4f       	sbci	r23, 0xFF	; 255
    1b26:	ae 01       	movw	r20, r28
    1b28:	4b 5f       	subi	r20, 0xFB	; 251
    1b2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b2c:	24 e4       	ldi	r18, 0x44	; 68
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	03 e4       	ldi	r16, 0x43	; 67
    1b32:	10 e0       	ldi	r17, 0x00	; 0
    1b34:	0e 94 3b 10 	call	0x2076	; 0x2076 <udp_generate_packet>
	nic_ip = tmp_nic_ip;
    1b38:	80 92 ac 05 	sts	0x05AC, r8
    1b3c:	90 92 ad 05 	sts	0x05AD, r9
    1b40:	a0 92 ae 05 	sts	0x05AE, r10
    1b44:	b0 92 af 05 	sts	0x05AF, r11

	//Initialise as DHCP + ID
	memcpy_P(&buffer[UDP_POS_DATA+0], DHCP_Basic_Content, 4);
    1b48:	c6 01       	movw	r24, r12
    1b4a:	8a 96       	adiw	r24, 0x2a	; 42
    1b4c:	6b ef       	ldi	r22, 0xFB	; 251
    1b4e:	72 e0       	ldi	r23, 0x02	; 2
    1b50:	44 e0       	ldi	r20, 0x04	; 4
    1b52:	50 e0       	ldi	r21, 0x00	; 0
    1b54:	0e 94 c8 1b 	call	0x3790	; 0x3790 <memcpy_P>
	memcpy_P(&buffer[UDP_POS_DATA+4], DHCP_Transaction_ID, 4);
    1b58:	c6 01       	movw	r24, r12
    1b5a:	8e 96       	adiw	r24, 0x2e	; 46
    1b5c:	6f ef       	ldi	r22, 0xFF	; 255
    1b5e:	72 e0       	ldi	r23, 0x02	; 2
    1b60:	44 e0       	ldi	r20, 0x04	; 4
    1b62:	50 e0       	ldi	r21, 0x00	; 0
    1b64:	0e 94 c8 1b 	call	0x3790	; 0x3790 <memcpy_P>
    1b68:	f6 01       	movw	r30, r12
    1b6a:	f2 96       	adiw	r30, 0x32	; 50
    1b6c:	88 e0       	ldi	r24, 0x08	; 8

	//Some Zeros
	for(c = 8; c < 235; c++)
		buffer[UDP_POS_DATA+c] = 0x00;
    1b6e:	11 92       	st	Z+, r1
	//Initialise as DHCP + ID
	memcpy_P(&buffer[UDP_POS_DATA+0], DHCP_Basic_Content, 4);
	memcpy_P(&buffer[UDP_POS_DATA+4], DHCP_Transaction_ID, 4);

	//Some Zeros
	for(c = 8; c < 235; c++)
    1b70:	8f 5f       	subi	r24, 0xFF	; 255
    1b72:	8b 3e       	cpi	r24, 0xEB	; 235
    1b74:	e1 f7       	brne	.-8      	; 0x1b6e <dhcp_generate_base_packet+0xbe>
    1b76:	e6 ea       	ldi	r30, 0xA6	; 166
    1b78:	f5 e0       	ldi	r31, 0x05	; 5
    1b7a:	d6 01       	movw	r26, r12
    1b7c:	aa 5b       	subi	r26, 0xBA	; 186
    1b7e:	bf 4f       	sbci	r27, 0xFF	; 255
		buffer[UDP_POS_DATA+c] = 0x00;

	for (c=0; c<6; c++)
		//set source mac address:
		buffer[UDP_POS_DATA+c+28] = nic_mac[c];
    1b80:	81 91       	ld	r24, Z+
    1b82:	8d 93       	st	X+, r24

	//Some Zeros
	for(c = 8; c < 235; c++)
		buffer[UDP_POS_DATA+c] = 0x00;

	for (c=0; c<6; c++)
    1b84:	85 e0       	ldi	r24, 0x05	; 5
    1b86:	ec 3a       	cpi	r30, 0xAC	; 172
    1b88:	f8 07       	cpc	r31, r24
    1b8a:	d1 f7       	brne	.-12     	; 0x1b80 <dhcp_generate_base_packet+0xd0>
		buffer[UDP_POS_DATA+c+28] = nic_mac[c];



	//Magic Cookie - alles klar?!
	memcpy_P(&buffer[UDP_POS_DATA+236], DHCP_Magic_Cookie, 4);
    1b8c:	c6 01       	movw	r24, r12
    1b8e:	8a 5e       	subi	r24, 0xEA	; 234
    1b90:	9e 4f       	sbci	r25, 0xFE	; 254
    1b92:	63 e0       	ldi	r22, 0x03	; 3
    1b94:	73 e0       	ldi	r23, 0x03	; 3
    1b96:	44 e0       	ldi	r20, 0x04	; 4
    1b98:	50 e0       	ldi	r21, 0x00	; 0
    1b9a:	0e 94 c8 1b 	call	0x3790	; 0x3790 <memcpy_P>
}
    1b9e:	2a 96       	adiw	r28, 0x0a	; 10
    1ba0:	0f b6       	in	r0, 0x3f	; 63
    1ba2:	f8 94       	cli
    1ba4:	de bf       	out	0x3e, r29	; 62
    1ba6:	0f be       	out	0x3f, r0	; 63
    1ba8:	cd bf       	out	0x3d, r28	; 61
    1baa:	cf 91       	pop	r28
    1bac:	df 91       	pop	r29
    1bae:	1f 91       	pop	r17
    1bb0:	0f 91       	pop	r16
    1bb2:	ff 90       	pop	r15
    1bb4:	ef 90       	pop	r14
    1bb6:	df 90       	pop	r13
    1bb8:	cf 90       	pop	r12
    1bba:	bf 90       	pop	r11
    1bbc:	af 90       	pop	r10
    1bbe:	9f 90       	pop	r9
    1bc0:	8f 90       	pop	r8
    1bc2:	08 95       	ret

00001bc4 <dhcp_add_option>:
PROGMEM char DHCP_Option_Discover[] = { 0x35, 0x01, 0x01 };
PROGMEM char DHCP_Option_Request[] = { 0x35, 0x01, 0x03 };

char *dhcp_name;

uint16_t dhcp_add_option(char *buffer, uint16_t current_pos, PGM_P option) {
    1bc4:	ef 92       	push	r14
    1bc6:	ff 92       	push	r15
    1bc8:	0f 93       	push	r16
    1bca:	1f 93       	push	r17
    1bcc:	cf 93       	push	r28
    1bce:	df 93       	push	r29
    1bd0:	8b 01       	movw	r16, r22
    1bd2:	ba 01       	movw	r22, r20
	uint16_t length = pgm_read_byte(option+1) + 2;
    1bd4:	ea 01       	movw	r28, r20
    1bd6:	21 96       	adiw	r28, 0x01	; 1
    1bd8:	fe 01       	movw	r30, r28
    1bda:	24 91       	lpm	r18, Z
    1bdc:	c2 2f       	mov	r28, r18
    1bde:	d0 e0       	ldi	r29, 0x00	; 0
    1be0:	22 96       	adiw	r28, 0x02	; 2
	memcpy_P(buffer + UDP_POS_DATA + current_pos, option, length);
    1be2:	98 01       	movw	r18, r16
    1be4:	26 5d       	subi	r18, 0xD6	; 214
    1be6:	3f 4f       	sbci	r19, 0xFF	; 255
    1be8:	82 0f       	add	r24, r18
    1bea:	93 1f       	adc	r25, r19
    1bec:	ae 01       	movw	r20, r28
    1bee:	0e 94 c8 1b 	call	0x3790	; 0x3790 <memcpy_P>
    1bf2:	c0 0f       	add	r28, r16
    1bf4:	d1 1f       	adc	r29, r17
	return current_pos + length;
}
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	df 91       	pop	r29
    1bfa:	cf 91       	pop	r28
    1bfc:	1f 91       	pop	r17
    1bfe:	0f 91       	pop	r16
    1c00:	ff 90       	pop	r15
    1c02:	ef 90       	pop	r14
    1c04:	08 95       	ret

00001c06 <dhcp_add_serveridentifier_option>:
	buffer[UDP_POS_DATA + current_pos + 1] = 0x04;
	nic_ip_to_buffer(&buffer[UDP_POS_DATA + current_pos + 2], ip);
	return current_pos + 6;
}

uint16_t dhcp_add_serveridentifier_option(char *buffer, uint16_t current_pos, uint32_t ip) {
    1c06:	ef 92       	push	r14
    1c08:	ff 92       	push	r15
    1c0a:	cf 93       	push	r28
    1c0c:	df 93       	push	r29
    1c0e:	eb 01       	movw	r28, r22
    1c10:	ba 01       	movw	r22, r20
    1c12:	a9 01       	movw	r20, r18
	buffer[UDP_POS_DATA + current_pos] = 0x36;
    1c14:	fc 01       	movw	r30, r24
    1c16:	ec 0f       	add	r30, r28
    1c18:	fd 1f       	adc	r31, r29
    1c1a:	26 e3       	ldi	r18, 0x36	; 54
    1c1c:	22 a7       	std	Z+42, r18	; 0x2a
	buffer[UDP_POS_DATA + current_pos + 1] = 0x04;
    1c1e:	24 e0       	ldi	r18, 0x04	; 4
    1c20:	23 a7       	std	Z+43, r18	; 0x2b
	nic_ip_to_buffer(&buffer[UDP_POS_DATA + current_pos + 2], ip);
    1c22:	9e 01       	movw	r18, r28
    1c24:	24 5d       	subi	r18, 0xD4	; 212
    1c26:	3f 4f       	sbci	r19, 0xFF	; 255
    1c28:	82 0f       	add	r24, r18
    1c2a:	93 1f       	adc	r25, r19
    1c2c:	0e 94 8b 14 	call	0x2916	; 0x2916 <nic_ip_to_buffer>
    1c30:	26 96       	adiw	r28, 0x06	; 6
	return current_pos + 6;
}
    1c32:	ce 01       	movw	r24, r28
    1c34:	df 91       	pop	r29
    1c36:	cf 91       	pop	r28
    1c38:	ff 90       	pop	r15
    1c3a:	ef 90       	pop	r14
    1c3c:	08 95       	ret

00001c3e <dhcp_add_iprequest_option>:
	buffer[UDP_POS_DATA + current_pos + 1] = length;
	memcpy(buffer + UDP_POS_DATA + current_pos + 2, name, buffer[UDP_POS_DATA + current_pos + 1]);
	return current_pos + length + 2;
}

uint16_t dhcp_add_iprequest_option(char *buffer, uint16_t current_pos, uint32_t ip) {
    1c3e:	ef 92       	push	r14
    1c40:	ff 92       	push	r15
    1c42:	cf 93       	push	r28
    1c44:	df 93       	push	r29
    1c46:	eb 01       	movw	r28, r22
    1c48:	ba 01       	movw	r22, r20
    1c4a:	a9 01       	movw	r20, r18
	buffer[UDP_POS_DATA + current_pos] = 0x32;
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	ec 0f       	add	r30, r28
    1c50:	fd 1f       	adc	r31, r29
    1c52:	22 e3       	ldi	r18, 0x32	; 50
    1c54:	22 a7       	std	Z+42, r18	; 0x2a
	buffer[UDP_POS_DATA + current_pos + 1] = 0x04;
    1c56:	24 e0       	ldi	r18, 0x04	; 4
    1c58:	23 a7       	std	Z+43, r18	; 0x2b
	nic_ip_to_buffer(&buffer[UDP_POS_DATA + current_pos + 2], ip);
    1c5a:	9e 01       	movw	r18, r28
    1c5c:	24 5d       	subi	r18, 0xD4	; 212
    1c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c60:	82 0f       	add	r24, r18
    1c62:	93 1f       	adc	r25, r19
    1c64:	0e 94 8b 14 	call	0x2916	; 0x2916 <nic_ip_to_buffer>
    1c68:	26 96       	adiw	r28, 0x06	; 6
	return current_pos + 6;
}
    1c6a:	ce 01       	movw	r24, r28
    1c6c:	df 91       	pop	r29
    1c6e:	cf 91       	pop	r28
    1c70:	ff 90       	pop	r15
    1c72:	ef 90       	pop	r14
    1c74:	08 95       	ret

00001c76 <dhcp_add_name_option>:
	uint16_t length = pgm_read_byte(option+1) + 2;
	memcpy_P(buffer + UDP_POS_DATA + current_pos, option, length);
	return current_pos + length;
}

uint16_t dhcp_add_name_option(char *buffer, uint16_t current_pos, char *name) {
    1c76:	0f 93       	push	r16
    1c78:	1f 93       	push	r17
    1c7a:	cf 93       	push	r28
    1c7c:	df 93       	push	r29
    1c7e:	8b 01       	movw	r16, r22
	uint16_t length = strlen(name);
    1c80:	ea 01       	movw	r28, r20
    1c82:	09 90       	ld	r0, Y+
    1c84:	00 20       	and	r0, r0
    1c86:	e9 f7       	brne	.-6      	; 0x1c82 <dhcp_add_name_option+0xc>
    1c88:	21 97       	sbiw	r28, 0x01	; 1
    1c8a:	c4 1b       	sub	r28, r20
    1c8c:	d5 0b       	sbc	r29, r21
	buffer[UDP_POS_DATA + current_pos] = 0x0c;
    1c8e:	fc 01       	movw	r30, r24
    1c90:	e6 0f       	add	r30, r22
    1c92:	f7 1f       	adc	r31, r23
    1c94:	2c e0       	ldi	r18, 0x0C	; 12
    1c96:	22 a7       	std	Z+42, r18	; 0x2a
	buffer[UDP_POS_DATA + current_pos + 1] = length;
    1c98:	c3 a7       	std	Z+43, r28	; 0x2b
	memcpy(buffer + UDP_POS_DATA + current_pos + 2, name, buffer[UDP_POS_DATA + current_pos + 1]);
    1c9a:	9b 01       	movw	r18, r22
    1c9c:	24 5d       	subi	r18, 0xD4	; 212
    1c9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca0:	28 0f       	add	r18, r24
    1ca2:	39 1f       	adc	r19, r25
    1ca4:	c9 01       	movw	r24, r18
    1ca6:	ba 01       	movw	r22, r20
    1ca8:	4c 2f       	mov	r20, r28
    1caa:	50 e0       	ldi	r21, 0x00	; 0
    1cac:	0e 94 df 1b 	call	0x37be	; 0x37be <memcpy>
    1cb0:	0e 5f       	subi	r16, 0xFE	; 254
    1cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb4:	0c 0f       	add	r16, r28
    1cb6:	1d 1f       	adc	r17, r29
	return current_pos + length + 2;
}
    1cb8:	c8 01       	movw	r24, r16
    1cba:	df 91       	pop	r29
    1cbc:	cf 91       	pop	r28
    1cbe:	1f 91       	pop	r17
    1cc0:	0f 91       	pop	r16
    1cc2:	08 95       	ret

00001cc4 <dhcp_generate_request_packet>:
	buffer[UDP_POS_DATA+current_pos] = 0xff;

	return current_pos + 1;
}

uint16_t dhcp_generate_request_packet(char *buffer, uint32_t request_ip, uint32_t server_ip) {
    1cc4:	af 92       	push	r10
    1cc6:	bf 92       	push	r11
    1cc8:	cf 92       	push	r12
    1cca:	df 92       	push	r13
    1ccc:	ef 92       	push	r14
    1cce:	ff 92       	push	r15
    1cd0:	0f 93       	push	r16
    1cd2:	1f 93       	push	r17
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	ec 01       	movw	r28, r24
    1cda:	5a 01       	movw	r10, r20
    1cdc:	6b 01       	movw	r12, r22
    1cde:	78 01       	movw	r14, r16
    1ce0:	89 01       	movw	r16, r18
	length += 6;

	//server identifier
	length += 6;

	if (dhcp_name != 0x00) {
    1ce2:	80 91 d5 02 	lds	r24, 0x02D5
    1ce6:	90 91 d6 02 	lds	r25, 0x02D6
    1cea:	00 97       	sbiw	r24, 0x00	; 0
    1cec:	19 f4       	brne	.+6      	; 0x1cf4 <dhcp_generate_request_packet+0x30>
    1cee:	60 e0       	ldi	r22, 0x00	; 0
    1cf0:	71 e0       	ldi	r23, 0x01	; 1
    1cf2:	09 c0       	rjmp	.+18     	; 0x1d06 <dhcp_generate_request_packet+0x42>
		length += 2 + strlen(dhcp_name);
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	0d 90       	ld	r0, X+
    1cf8:	00 20       	and	r0, r0
    1cfa:	e9 f7       	brne	.-6      	; 0x1cf6 <dhcp_generate_request_packet+0x32>
    1cfc:	bd 01       	movw	r22, r26
    1cfe:	68 1b       	sub	r22, r24
    1d00:	79 0b       	sbc	r23, r25
    1d02:	6f 5f       	subi	r22, 0xFF	; 255
    1d04:	7e 4f       	sbci	r23, 0xFE	; 254
	}


	dhcp_generate_base_packet(buffer, length);
    1d06:	ce 01       	movw	r24, r28
    1d08:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <dhcp_generate_base_packet>
	uint16_t current_pos = 240;

	current_pos = dhcp_add_option(buffer, current_pos, DHCP_Option_Request);
    1d0c:	ce 01       	movw	r24, r28
    1d0e:	60 ef       	ldi	r22, 0xF0	; 240
    1d10:	70 e0       	ldi	r23, 0x00	; 0
    1d12:	4a e0       	ldi	r20, 0x0A	; 10
    1d14:	53 e0       	ldi	r21, 0x03	; 3
    1d16:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <dhcp_add_option>
    1d1a:	bc 01       	movw	r22, r24

	current_pos = dhcp_add_iprequest_option(buffer, current_pos, request_ip);
    1d1c:	ce 01       	movw	r24, r28
    1d1e:	a6 01       	movw	r20, r12
    1d20:	95 01       	movw	r18, r10
    1d22:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <dhcp_add_iprequest_option>
    1d26:	bc 01       	movw	r22, r24

	current_pos = dhcp_add_serveridentifier_option(buffer, current_pos, server_ip);
    1d28:	ce 01       	movw	r24, r28
    1d2a:	a8 01       	movw	r20, r16
    1d2c:	97 01       	movw	r18, r14
    1d2e:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <dhcp_add_serveridentifier_option>
    1d32:	bc 01       	movw	r22, r24

	if (dhcp_name != 0x00)
    1d34:	40 91 d5 02 	lds	r20, 0x02D5
    1d38:	50 91 d6 02 	lds	r21, 0x02D6
    1d3c:	41 15       	cp	r20, r1
    1d3e:	51 05       	cpc	r21, r1
    1d40:	21 f0       	breq	.+8      	; 0x1d4a <dhcp_generate_request_packet+0x86>
		current_pos = dhcp_add_name_option(buffer, current_pos, dhcp_name);
    1d42:	ce 01       	movw	r24, r28
    1d44:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <dhcp_add_name_option>
    1d48:	bc 01       	movw	r22, r24

	//end option
	buffer[UDP_POS_DATA+current_pos] = 0xff;
    1d4a:	c6 0f       	add	r28, r22
    1d4c:	d7 1f       	adc	r29, r23
    1d4e:	8f ef       	ldi	r24, 0xFF	; 255
    1d50:	8a a7       	std	Y+42, r24	; 0x2a
    1d52:	6f 5f       	subi	r22, 0xFF	; 255
    1d54:	7f 4f       	sbci	r23, 0xFF	; 255

	return current_pos + 1;
}
    1d56:	cb 01       	movw	r24, r22
    1d58:	df 91       	pop	r29
    1d5a:	cf 91       	pop	r28
    1d5c:	1f 91       	pop	r17
    1d5e:	0f 91       	pop	r16
    1d60:	ff 90       	pop	r15
    1d62:	ef 90       	pop	r14
    1d64:	df 90       	pop	r13
    1d66:	cf 90       	pop	r12
    1d68:	bf 90       	pop	r11
    1d6a:	af 90       	pop	r10
    1d6c:	08 95       	ret

00001d6e <dhcp_get_packet>:


void dhcp_get_packet(char *buffer, unsigned int len)
{
    1d6e:	4f 92       	push	r4
    1d70:	5f 92       	push	r5
    1d72:	6f 92       	push	r6
    1d74:	7f 92       	push	r7
    1d76:	8f 92       	push	r8
    1d78:	9f 92       	push	r9
    1d7a:	af 92       	push	r10
    1d7c:	bf 92       	push	r11
    1d7e:	df 92       	push	r13
    1d80:	ef 92       	push	r14
    1d82:	ff 92       	push	r15
    1d84:	0f 93       	push	r16
    1d86:	1f 93       	push	r17
    1d88:	cf 93       	push	r28
    1d8a:	df 93       	push	r29
    1d8c:	ec 01       	movw	r28, r24
	//No Reply
	if (buffer[UDP_POS_DATA] != 0x02)
    1d8e:	8a a5       	ldd	r24, Y+42	; 0x2a
    1d90:	82 30       	cpi	r24, 0x02	; 2
    1d92:	09 f0       	breq	.+2      	; 0x1d96 <dhcp_get_packet+0x28>
    1d94:	94 c0       	rjmp	.+296    	; 0x1ebe <dhcp_get_packet+0x150>
		return;

	//not our ID
	if (memcmp_P(buffer + UDP_POS_DATA + 4, DHCP_Transaction_ID, 4))
    1d96:	ce 01       	movw	r24, r28
    1d98:	8e 96       	adiw	r24, 0x2e	; 46
    1d9a:	6f ef       	ldi	r22, 0xFF	; 255
    1d9c:	72 e0       	ldi	r23, 0x02	; 2
    1d9e:	44 e0       	ldi	r20, 0x04	; 4
    1da0:	50 e0       	ldi	r21, 0x00	; 0
    1da2:	0e 94 bb 1b 	call	0x3776	; 0x3776 <memcmp_P>
    1da6:	00 97       	sbiw	r24, 0x00	; 0
    1da8:	09 f0       	breq	.+2      	; 0x1dac <dhcp_get_packet+0x3e>
    1daa:	89 c0       	rjmp	.+274    	; 0x1ebe <dhcp_get_packet+0x150>
		return;

	//DHCP Offer
	if ((buffer[UDP_POS_DATA+240] == 0x35)
    1dac:	fe 01       	movw	r30, r28
    1dae:	e6 5e       	subi	r30, 0xE6	; 230
    1db0:	fe 4f       	sbci	r31, 0xFE	; 254
    1db2:	80 81       	ld	r24, Z
    1db4:	85 33       	cpi	r24, 0x35	; 53
    1db6:	09 f0       	breq	.+2      	; 0x1dba <dhcp_get_packet+0x4c>
    1db8:	82 c0       	rjmp	.+260    	; 0x1ebe <dhcp_get_packet+0x150>
			&& (buffer[UDP_POS_DATA+241] == 0x01)
    1dba:	fe 01       	movw	r30, r28
    1dbc:	e5 5e       	subi	r30, 0xE5	; 229
    1dbe:	fe 4f       	sbci	r31, 0xFE	; 254
    1dc0:	80 81       	ld	r24, Z
    1dc2:	81 30       	cpi	r24, 0x01	; 1
    1dc4:	09 f0       	breq	.+2      	; 0x1dc8 <dhcp_get_packet+0x5a>
    1dc6:	7b c0       	rjmp	.+246    	; 0x1ebe <dhcp_get_packet+0x150>
			&& (buffer[UDP_POS_DATA+242] == 0x02))
    1dc8:	fe 01       	movw	r30, r28
    1dca:	e4 5e       	subi	r30, 0xE4	; 228
    1dcc:	fe 4f       	sbci	r31, 0xFE	; 254
    1dce:	80 81       	ld	r24, Z
	//not our ID
	if (memcmp_P(buffer + UDP_POS_DATA + 4, DHCP_Transaction_ID, 4))
		return;

	//DHCP Offer
	if ((buffer[UDP_POS_DATA+240] == 0x35)
    1dd0:	82 30       	cpi	r24, 0x02	; 2
    1dd2:	c1 f4       	brne	.+48     	; 0x1e04 <dhcp_get_packet+0x96>

		uint32_t server_ip;
		uint32_t offered_ip;

		//Rescue offered data
		server_ip = nic_buffer_to_ip(&buffer[IP_POS_SRC_IP]);
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	4a 96       	adiw	r24, 0x1a	; 26
    1dd8:	0e 94 60 14 	call	0x28c0	; 0x28c0 <nic_buffer_to_ip>
    1ddc:	7b 01       	movw	r14, r22
    1dde:	8c 01       	movw	r16, r24
		offered_ip = nic_buffer_to_ip(&buffer[UDP_POS_DATA+16]);
    1de0:	ce 01       	movw	r24, r28
    1de2:	ca 96       	adiw	r24, 0x3a	; 58
    1de4:	0e 94 60 14 	call	0x28c0	; 0x28c0 <nic_buffer_to_ip>
    1de8:	ab 01       	movw	r20, r22
    1dea:	bc 01       	movw	r22, r24

		uint16_t length = dhcp_generate_request_packet(buffer, offered_ip, server_ip);
    1dec:	ce 01       	movw	r24, r28
    1dee:	98 01       	movw	r18, r16
    1df0:	87 01       	movw	r16, r14
    1df2:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <dhcp_generate_request_packet>
		nic_send_packet(buffer, 42+length);
    1df6:	bc 01       	movw	r22, r24
    1df8:	66 5d       	subi	r22, 0xD6	; 214
    1dfa:	7f 4f       	sbci	r23, 0xFF	; 255
    1dfc:	ce 01       	movw	r24, r28
    1dfe:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <nic_send_packet>
	//not our ID
	if (memcmp_P(buffer + UDP_POS_DATA + 4, DHCP_Transaction_ID, 4))
		return;

	//DHCP Offer
	if ((buffer[UDP_POS_DATA+240] == 0x35)
    1e02:	5d c0       	rjmp	.+186    	; 0x1ebe <dhcp_get_packet+0x150>
		uint16_t length = dhcp_generate_request_packet(buffer, offered_ip, server_ip);
		nic_send_packet(buffer, 42+length);
	}

	//DHCP Ack
	else if ((buffer[UDP_POS_DATA+240] == 0x35)
    1e04:	85 30       	cpi	r24, 0x05	; 5
    1e06:	09 f0       	breq	.+2      	; 0x1e0a <dhcp_get_packet+0x9c>
    1e08:	5a c0       	rjmp	.+180    	; 0x1ebe <dhcp_get_packet+0x150>
		uint32_t offered_ip = 0;
		uint32_t subnet_mask = 0;
		uint32_t router_ip = 0;
		uint32_t ntp_ip = 0;

		offered_ip = nic_buffer_to_ip(&buffer[UDP_POS_DATA+16]);
    1e0a:	ce 01       	movw	r24, r28
    1e0c:	ca 96       	adiw	r24, 0x3a	; 58
    1e0e:	0e 94 60 14 	call	0x28c0	; 0x28c0 <nic_buffer_to_ip>
    1e12:	2b 01       	movw	r4, r22
    1e14:	3c 01       	movw	r6, r24

		lease_renew_time = 60*60;
    1e16:	80 e1       	ldi	r24, 0x10	; 16
    1e18:	9e e0       	ldi	r25, 0x0E	; 14
    1e1a:	90 93 8c 00 	sts	0x008C, r25
    1e1e:	80 93 8b 00 	sts	0x008B, r24
    1e22:	88 24       	eor	r8, r8
    1e24:	99 24       	eor	r9, r9
    1e26:	54 01       	movw	r10, r8
    1e28:	dd 24       	eor	r13, r13

		uint8_t c = 0;

		while(buffer[UDP_POS_DATA+240+c] != 0xff)
    1e2a:	29 c0       	rjmp	.+82     	; 0x1e7e <dhcp_get_packet+0x110>
		{
			if (buffer[UDP_POS_DATA+240+c] == 0x03)
    1e2c:	83 30       	cpi	r24, 0x03	; 3
    1e2e:	49 f4       	brne	.+18     	; 0x1e42 <dhcp_get_packet+0xd4>
					router_ip = nic_buffer_to_ip(&buffer[UDP_POS_DATA+242+c]);
    1e30:	c7 01       	movw	r24, r14
    1e32:	84 5e       	subi	r24, 0xE4	; 228
    1e34:	9e 4f       	sbci	r25, 0xFE	; 254
    1e36:	8c 0f       	add	r24, r28
    1e38:	9d 1f       	adc	r25, r29
    1e3a:	0e 94 60 14 	call	0x28c0	; 0x28c0 <nic_buffer_to_ip>
    1e3e:	4b 01       	movw	r8, r22
    1e40:	5c 01       	movw	r10, r24

			if (buffer[UDP_POS_DATA+240+c] == 0x01)
    1e42:	f8 01       	movw	r30, r16
    1e44:	80 81       	ld	r24, Z
    1e46:	81 30       	cpi	r24, 0x01	; 1
    1e48:	39 f4       	brne	.+14     	; 0x1e58 <dhcp_get_packet+0xea>
					subnet_mask = nic_buffer_to_ip(&buffer[UDP_POS_DATA+242+c]);
    1e4a:	c7 01       	movw	r24, r14
    1e4c:	84 5e       	subi	r24, 0xE4	; 228
    1e4e:	9e 4f       	sbci	r25, 0xFE	; 254
    1e50:	8c 0f       	add	r24, r28
    1e52:	9d 1f       	adc	r25, r29
    1e54:	0e 94 60 14 	call	0x28c0	; 0x28c0 <nic_buffer_to_ip>

			if (buffer[UDP_POS_DATA+240+c] == 0x2a)
    1e58:	f8 01       	movw	r30, r16
    1e5a:	80 81       	ld	r24, Z
    1e5c:	8a 32       	cpi	r24, 0x2A	; 42
    1e5e:	39 f4       	brne	.+14     	; 0x1e6e <dhcp_get_packet+0x100>
					ntp_ip = nic_buffer_to_ip(&buffer[UDP_POS_DATA+242+c]);
    1e60:	c7 01       	movw	r24, r14
    1e62:	84 5e       	subi	r24, 0xE4	; 228
    1e64:	9e 4f       	sbci	r25, 0xFE	; 254
    1e66:	8c 0f       	add	r24, r28
    1e68:	9d 1f       	adc	r25, r29
    1e6a:	0e 94 60 14 	call	0x28c0	; 0x28c0 <nic_buffer_to_ip>
				if (lease_t < lease_renew_time)
					lease_renew_time = lease_t;

			}

			c += buffer[UDP_POS_DATA+241+c] + 2;
    1e6e:	fe 01       	movw	r30, r28
    1e70:	ee 0d       	add	r30, r14
    1e72:	ff 1d       	adc	r31, r15
    1e74:	e5 5e       	subi	r30, 0xE5	; 229
    1e76:	fe 4f       	sbci	r31, 0xFE	; 254
    1e78:	80 81       	ld	r24, Z
    1e7a:	8e 5f       	subi	r24, 0xFE	; 254
    1e7c:	d8 0e       	add	r13, r24

		lease_renew_time = 60*60;

		uint8_t c = 0;

		while(buffer[UDP_POS_DATA+240+c] != 0xff)
    1e7e:	ed 2c       	mov	r14, r13
    1e80:	ff 24       	eor	r15, r15
    1e82:	87 01       	movw	r16, r14
    1e84:	06 5e       	subi	r16, 0xE6	; 230
    1e86:	1e 4f       	sbci	r17, 0xFE	; 254
    1e88:	0c 0f       	add	r16, r28
    1e8a:	1d 1f       	adc	r17, r29
    1e8c:	f8 01       	movw	r30, r16
    1e8e:	80 81       	ld	r24, Z
    1e90:	8f 3f       	cpi	r24, 0xFF	; 255
    1e92:	61 f6       	brne	.-104    	; 0x1e2c <dhcp_get_packet+0xbe>
			}

			c += buffer[UDP_POS_DATA+241+c] + 2;
		}

		nic_ip = offered_ip;
    1e94:	40 92 ac 05 	sts	0x05AC, r4
    1e98:	50 92 ad 05 	sts	0x05AD, r5
    1e9c:	60 92 ae 05 	sts	0x05AE, r6
    1ea0:	70 92 af 05 	sts	0x05AF, r7
		nic_gateway_ip = router_ip;
    1ea4:	80 92 9c 05 	sts	0x059C, r8
    1ea8:	90 92 9d 05 	sts	0x059D, r9
    1eac:	a0 92 9e 05 	sts	0x059E, r10
    1eb0:	b0 92 9f 05 	sts	0x059F, r11
		uint8_t i;
		for(i = 31; (i > 0 ) && (subnet_mask & (1<<i)); i--) {

		}
		nic_netmask_bits = 32 - i;
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	80 93 a0 05 	sts	0x05A0, r24

		nic_ip_valid = 1;
    1eba:	80 93 a1 05 	sts	0x05A1, r24

	}

}
    1ebe:	df 91       	pop	r29
    1ec0:	cf 91       	pop	r28
    1ec2:	1f 91       	pop	r17
    1ec4:	0f 91       	pop	r16
    1ec6:	ff 90       	pop	r15
    1ec8:	ef 90       	pop	r14
    1eca:	df 90       	pop	r13
    1ecc:	bf 90       	pop	r11
    1ece:	af 90       	pop	r10
    1ed0:	9f 90       	pop	r9
    1ed2:	8f 90       	pop	r8
    1ed4:	7f 90       	pop	r7
    1ed6:	6f 90       	pop	r6
    1ed8:	5f 90       	pop	r5
    1eda:	4f 90       	pop	r4
    1edc:	08 95       	ret

00001ede <dhcp_generate_discover_packet>:

	//end option
	buffer[UDP_POS_DATA+current_pos] = 0xff;
}

uint16_t dhcp_generate_discover_packet(char *buffer) {
    1ede:	cf 93       	push	r28
    1ee0:	df 93       	push	r29
    1ee2:	ec 01       	movw	r28, r24
	uint16_t length = 241;

	//Discover Option
	length += 3;

	if (dhcp_name != 0x00) {
    1ee4:	80 91 d5 02 	lds	r24, 0x02D5
    1ee8:	90 91 d6 02 	lds	r25, 0x02D6
    1eec:	00 97       	sbiw	r24, 0x00	; 0
    1eee:	19 f4       	brne	.+6      	; 0x1ef6 <dhcp_generate_discover_packet+0x18>
    1ef0:	64 ef       	ldi	r22, 0xF4	; 244
    1ef2:	70 e0       	ldi	r23, 0x00	; 0
    1ef4:	09 c0       	rjmp	.+18     	; 0x1f08 <dhcp_generate_discover_packet+0x2a>
		length += 2 + strlen(dhcp_name);
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	0d 90       	ld	r0, X+
    1efa:	00 20       	and	r0, r0
    1efc:	e9 f7       	brne	.-6      	; 0x1ef8 <dhcp_generate_discover_packet+0x1a>
    1efe:	bd 01       	movw	r22, r26
    1f00:	68 1b       	sub	r22, r24
    1f02:	79 0b       	sbc	r23, r25
    1f04:	6b 50       	subi	r22, 0x0B	; 11
    1f06:	7f 4f       	sbci	r23, 0xFF	; 255
	}


	dhcp_generate_base_packet(buffer, length);
    1f08:	ce 01       	movw	r24, r28
    1f0a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <dhcp_generate_base_packet>
	uint16_t current_pos = 240;

	current_pos = dhcp_add_option(buffer, current_pos, DHCP_Option_Discover);
    1f0e:	ce 01       	movw	r24, r28
    1f10:	60 ef       	ldi	r22, 0xF0	; 240
    1f12:	70 e0       	ldi	r23, 0x00	; 0
    1f14:	47 e0       	ldi	r20, 0x07	; 7
    1f16:	53 e0       	ldi	r21, 0x03	; 3
    1f18:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <dhcp_add_option>
    1f1c:	bc 01       	movw	r22, r24

	if (dhcp_name != 0x00)
    1f1e:	40 91 d5 02 	lds	r20, 0x02D5
    1f22:	50 91 d6 02 	lds	r21, 0x02D6
    1f26:	41 15       	cp	r20, r1
    1f28:	51 05       	cpc	r21, r1
    1f2a:	21 f0       	breq	.+8      	; 0x1f34 <dhcp_generate_discover_packet+0x56>
		current_pos = dhcp_add_name_option(buffer, current_pos, dhcp_name);
    1f2c:	ce 01       	movw	r24, r28
    1f2e:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <dhcp_add_name_option>
    1f32:	bc 01       	movw	r22, r24

	//end option
	buffer[UDP_POS_DATA+current_pos] = 0xff;
    1f34:	c6 0f       	add	r28, r22
    1f36:	d7 1f       	adc	r29, r23
    1f38:	8f ef       	ldi	r24, 0xFF	; 255
    1f3a:	8a a7       	std	Y+42, r24	; 0x2a
    1f3c:	6f 5f       	subi	r22, 0xFF	; 255
    1f3e:	7f 4f       	sbci	r23, 0xFF	; 255

	return current_pos + 1;
}
    1f40:	cb 01       	movw	r24, r22
    1f42:	df 91       	pop	r29
    1f44:	cf 91       	pop	r28
    1f46:	08 95       	ret

00001f48 <dhcp_send_discover>:
}



void dhcp_send_discover(char *buffer)
{
    1f48:	cf 93       	push	r28
    1f4a:	df 93       	push	r29
    1f4c:	ec 01       	movw	r28, r24

	uint16_t length = dhcp_generate_discover_packet(buffer);
    1f4e:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <dhcp_generate_discover_packet>
	nic_send_packet(buffer, 42+length);
    1f52:	bc 01       	movw	r22, r24
    1f54:	66 5d       	subi	r22, 0xD6	; 214
    1f56:	7f 4f       	sbci	r23, 0xFF	; 255
    1f58:	ce 01       	movw	r24, r28
    1f5a:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <nic_send_packet>
}
    1f5e:	df 91       	pop	r29
    1f60:	cf 91       	pop	r28
    1f62:	08 95       	ret

00001f64 <dhcp_doEvents>:
}

uint16_t lease_renew_time = 0;

uint32_t schneller_timer;
void dhcp_doEvents(char *buffer) {
    1f64:	ef 92       	push	r14
    1f66:	ff 92       	push	r15
    1f68:	0f 93       	push	r16
    1f6a:	1f 93       	push	r17

	if (schneller_timer++ == 1000) {
    1f6c:	20 91 d7 02 	lds	r18, 0x02D7
    1f70:	30 91 d8 02 	lds	r19, 0x02D8
    1f74:	40 91 d9 02 	lds	r20, 0x02D9
    1f78:	50 91 da 02 	lds	r21, 0x02DA
    1f7c:	79 01       	movw	r14, r18
    1f7e:	8a 01       	movw	r16, r20
    1f80:	08 94       	sec
    1f82:	e1 1c       	adc	r14, r1
    1f84:	f1 1c       	adc	r15, r1
    1f86:	01 1d       	adc	r16, r1
    1f88:	11 1d       	adc	r17, r1
    1f8a:	e0 92 d7 02 	sts	0x02D7, r14
    1f8e:	f0 92 d8 02 	sts	0x02D8, r15
    1f92:	00 93 d9 02 	sts	0x02D9, r16
    1f96:	10 93 da 02 	sts	0x02DA, r17
    1f9a:	28 3e       	cpi	r18, 0xE8	; 232
    1f9c:	63 e0       	ldi	r22, 0x03	; 3
    1f9e:	36 07       	cpc	r19, r22
    1fa0:	60 e0       	ldi	r22, 0x00	; 0
    1fa2:	46 07       	cpc	r20, r22
    1fa4:	60 e0       	ldi	r22, 0x00	; 0
    1fa6:	56 07       	cpc	r21, r22
    1fa8:	91 f4       	brne	.+36     	; 0x1fce <dhcp_doEvents+0x6a>
		lease_renew_time--;
    1faa:	20 91 8b 00 	lds	r18, 0x008B
    1fae:	30 91 8c 00 	lds	r19, 0x008C
    1fb2:	21 50       	subi	r18, 0x01	; 1
    1fb4:	30 40       	sbci	r19, 0x00	; 0
    1fb6:	30 93 8c 00 	sts	0x008C, r19
    1fba:	20 93 8b 00 	sts	0x008B, r18
		schneller_timer = 0;
    1fbe:	10 92 d7 02 	sts	0x02D7, r1
    1fc2:	10 92 d8 02 	sts	0x02D8, r1
    1fc6:	10 92 d9 02 	sts	0x02D9, r1
    1fca:	10 92 da 02 	sts	0x02DA, r1
	}

	if (!lease_renew_time) {
    1fce:	20 91 8b 00 	lds	r18, 0x008B
    1fd2:	30 91 8c 00 	lds	r19, 0x008C
    1fd6:	21 15       	cp	r18, r1
    1fd8:	31 05       	cpc	r19, r1
    1fda:	41 f4       	brne	.+16     	; 0x1fec <dhcp_doEvents+0x88>
		dhcp_send_discover(buffer);
    1fdc:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <dhcp_send_discover>
		lease_renew_time = 15;
    1fe0:	8f e0       	ldi	r24, 0x0F	; 15
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	90 93 8c 00 	sts	0x008C, r25
    1fe8:	80 93 8b 00 	sts	0x008B, r24
	}

}
    1fec:	1f 91       	pop	r17
    1fee:	0f 91       	pop	r16
    1ff0:	ff 90       	pop	r15
    1ff2:	ef 90       	pop	r14
    1ff4:	08 95       	ret

00001ff6 <dhcp_send_discover_packet>:

	//Magic Cookie - alles klar?!
	memcpy_P(&buffer[UDP_POS_DATA+236], DHCP_Magic_Cookie, 4);
}

void dhcp_send_discover_packet(char *buffer) {
    1ff6:	cf 93       	push	r28
    1ff8:	df 93       	push	r29
    1ffa:	ec 01       	movw	r28, r24
	uint8_t length = 241;

	//Discover Option
	length += 3;

	if (dhcp_name != 0x00) {
    1ffc:	80 91 d5 02 	lds	r24, 0x02D5
    2000:	90 91 d6 02 	lds	r25, 0x02D6
    2004:	00 97       	sbiw	r24, 0x00	; 0
    2006:	11 f4       	brne	.+4      	; 0x200c <dhcp_send_discover_packet+0x16>
    2008:	64 ef       	ldi	r22, 0xF4	; 244
    200a:	07 c0       	rjmp	.+14     	; 0x201a <dhcp_send_discover_packet+0x24>
		length += 2 + strlen(dhcp_name);
    200c:	dc 01       	movw	r26, r24
    200e:	0d 90       	ld	r0, X+
    2010:	00 20       	and	r0, r0
    2012:	e9 f7       	brne	.-6      	; 0x200e <dhcp_send_discover_packet+0x18>
    2014:	bd 01       	movw	r22, r26
    2016:	68 1b       	sub	r22, r24
    2018:	6b 50       	subi	r22, 0x0B	; 11
	}


	dhcp_generate_base_packet(buffer, length);
    201a:	ce 01       	movw	r24, r28
    201c:	70 e0       	ldi	r23, 0x00	; 0
    201e:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <dhcp_generate_base_packet>
	uint16_t current_pos = 240;

	current_pos = dhcp_add_option(buffer, current_pos, DHCP_Option_Discover);
    2022:	ce 01       	movw	r24, r28
    2024:	60 ef       	ldi	r22, 0xF0	; 240
    2026:	70 e0       	ldi	r23, 0x00	; 0
    2028:	47 e0       	ldi	r20, 0x07	; 7
    202a:	53 e0       	ldi	r21, 0x03	; 3
    202c:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <dhcp_add_option>
    2030:	bc 01       	movw	r22, r24

	if (dhcp_name != 0x00)
    2032:	40 91 d5 02 	lds	r20, 0x02D5
    2036:	50 91 d6 02 	lds	r21, 0x02D6
    203a:	41 15       	cp	r20, r1
    203c:	51 05       	cpc	r21, r1
    203e:	21 f0       	breq	.+8      	; 0x2048 <dhcp_send_discover_packet+0x52>
		current_pos = dhcp_add_name_option(buffer, current_pos, dhcp_name);
    2040:	ce 01       	movw	r24, r28
    2042:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <dhcp_add_name_option>
    2046:	bc 01       	movw	r22, r24

	//end option
	buffer[UDP_POS_DATA+current_pos] = 0xff;
    2048:	c6 0f       	add	r28, r22
    204a:	d7 1f       	adc	r29, r23
    204c:	8f ef       	ldi	r24, 0xFF	; 255
    204e:	8a a7       	std	Y+42, r24	; 0x2a
}
    2050:	df 91       	pop	r29
    2052:	cf 91       	pop	r28
    2054:	08 95       	ret

00002056 <udp_get_src_port>:
	#include "../dhcp-client/dhcp_client.h"
#endif

#include "../../../panel-controller.h"

uint16_t udp_get_src_port(char* buffer) {
    2056:	fc 01       	movw	r30, r24
    2058:	32 a1       	ldd	r19, Z+34	; 0x22
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	83 a1       	ldd	r24, Z+35	; 0x23
    205e:	28 0f       	add	r18, r24
    2060:	31 1d       	adc	r19, r1
	return (buffer[UDP_POS_SRC_PORT] << 8) + buffer[UDP_POS_SRC_PORT+1];
}
    2062:	c9 01       	movw	r24, r18
    2064:	08 95       	ret

00002066 <udp_get_dest_port>:

uint16_t udp_get_dest_port(char* buffer) {
    2066:	fc 01       	movw	r30, r24
    2068:	34 a1       	ldd	r19, Z+36	; 0x24
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	85 a1       	ldd	r24, Z+37	; 0x25
    206e:	28 0f       	add	r18, r24
    2070:	31 1d       	adc	r19, r1
	return (buffer[UDP_POS_DEST_PORT] << 8) + buffer[UDP_POS_DEST_PORT+1];
}
    2072:	c9 01       	movw	r24, r18
    2074:	08 95       	ret

00002076 <udp_generate_packet>:
// - call nic_send_packet(buffer) to TX

void udp_generate_packet(char *buffer,
                         uint32_t *dest_ip,
                         unsigned char *dest_mac, unsigned int source_port,
                         unsigned int dest_port, unsigned int data_length){
    2076:	8f 92       	push	r8
    2078:	9f 92       	push	r9
    207a:	bf 92       	push	r11
    207c:	cf 92       	push	r12
    207e:	df 92       	push	r13
    2080:	ef 92       	push	r14
    2082:	ff 92       	push	r15
    2084:	0f 93       	push	r16
    2086:	1f 93       	push	r17
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	0f 92       	push	r0
    208e:	cd b7       	in	r28, 0x3d	; 61
    2090:	de b7       	in	r29, 0x3e	; 62
    2092:	4c 01       	movw	r8, r24
    2094:	b2 2e       	mov	r11, r18
    2096:	68 01       	movw	r12, r16

	//datalength = udpheader + datalen
	data_length = data_length + 8;
    2098:	88 e0       	ldi	r24, 0x08	; 8
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	e8 0e       	add	r14, r24
    209e:	f9 1e       	adc	r15, r25

	//generate an ip packet (includes ethernet header)
	ip_generate_packet(buffer, dest_ip, dest_mac, IP_PROTOCOL_UDP, data_length);
    20a0:	c4 01       	movw	r24, r8
    20a2:	21 e1       	ldi	r18, 0x11	; 17
    20a4:	87 01       	movw	r16, r14
    20a6:	39 83       	std	Y+1, r19	; 0x01
    20a8:	0e 94 a5 13 	call	0x274a	; 0x274a <ip_generate_packet>

	//setup soure/dest port:
	buffer[IP_POS_DATA + 0] = (source_port>>8);
    20ac:	39 81       	ldd	r19, Y+1	; 0x01
    20ae:	f4 01       	movw	r30, r8
    20b0:	32 a3       	std	Z+34, r19	; 0x22
	buffer[IP_POS_DATA + 1] = (source_port   );
    20b2:	b3 a2       	std	Z+35, r11	; 0x23
	buffer[IP_POS_DATA + 2] = (  dest_port>>8);
    20b4:	d4 a2       	std	Z+36, r13	; 0x24
	buffer[IP_POS_DATA + 3] = (  dest_port   );
    20b6:	c5 a2       	std	Z+37, r12	; 0x25

	//setup data length of udp
	buffer[IP_POS_DATA + 4] = (data_length>>8);
    20b8:	f6 a2       	std	Z+38, r15	; 0x26
	buffer[IP_POS_DATA + 5] = (data_length   );
    20ba:	e7 a2       	std	Z+39, r14	; 0x27

	//store checksum: (0x0000 -> checksum disable)
	buffer[IP_POS_DATA + 6] = 0x00;
    20bc:	10 a6       	std	Z+40, r1	; 0x28
	buffer[IP_POS_DATA + 7] = 0x00;
    20be:	11 a6       	std	Z+41, r1	; 0x29

	//calculate checksum now: (for ip header + udp header + data !!!
	//add pseudo header (sourceip+targetip + 0x00 + PROTOCOL + LEN) after udp data:

}
    20c0:	0f 90       	pop	r0
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	1f 91       	pop	r17
    20c8:	0f 91       	pop	r16
    20ca:	ff 90       	pop	r15
    20cc:	ef 90       	pop	r14
    20ce:	df 90       	pop	r13
    20d0:	cf 90       	pop	r12
    20d2:	bf 90       	pop	r11
    20d4:	9f 90       	pop	r9
    20d6:	8f 90       	pop	r8
    20d8:	08 95       	ret

000020da <udp_packet_in>:

uint16_t udp_get_dest_port(char* buffer) {
	return (buffer[UDP_POS_DEST_PORT] << 8) + buffer[UDP_POS_DEST_PORT+1];
}

void udp_packet_in(char* buffer, unsigned int len) {
    20da:	ef 92       	push	r14
    20dc:	ff 92       	push	r15
    20de:	0f 93       	push	r16
    20e0:	1f 93       	push	r17
    20e2:	cf 93       	push	r28
    20e4:	df 93       	push	r29
    20e6:	ec 01       	movw	r28, r24
    20e8:	8b 01       	movw	r16, r22

	uint16_t port = (buffer[UDP_POS_DEST_PORT]<<8) + buffer[UDP_POS_DEST_PORT+1];
    20ea:	9c a1       	ldd	r25, Y+36	; 0x24
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	ed a0       	ldd	r14, Y+37	; 0x25
    20f0:	9c 01       	movw	r18, r24
    20f2:	2e 0d       	add	r18, r14
    20f4:	31 1d       	adc	r19, r1
    20f6:	79 01       	movw	r14, r18
	uint32_t dest_ip = nic_buffer_to_ip(&buffer[IP_POS_DST_IP]);
    20f8:	ce 01       	movw	r24, r28
    20fa:	4e 96       	adiw	r24, 0x1e	; 30
    20fc:	0e 94 60 14 	call	0x28c0	; 0x28c0 <nic_buffer_to_ip>

	switch (port){
    2100:	34 e4       	ldi	r19, 0x44	; 68
    2102:	e3 16       	cp	r14, r19
    2104:	f1 04       	cpc	r15, r1
    2106:	81 f0       	breq	.+32     	; 0x2128 <udp_packet_in+0x4e>
    2108:	2c ef       	ldi	r18, 0xFC	; 252
    210a:	e2 16       	cp	r14, r18
    210c:	23 e0       	ldi	r18, 0x03	; 3
    210e:	f2 06       	cpc	r15, r18
    2110:	81 f0       	breq	.+32     	; 0x2132 <udp_packet_in+0x58>
    2112:	3d ef       	ldi	r19, 0xFD	; 253
    2114:	e3 16       	cp	r14, r19
    2116:	33 e0       	ldi	r19, 0x03	; 3
    2118:	f3 06       	cpc	r15, r19
    211a:	e9 f0       	breq	.+58     	; 0x2156 <udp_packet_in+0x7c>
    211c:	2b eb       	ldi	r18, 0xBB	; 187
    211e:	e2 16       	cp	r14, r18
    2120:	2c e9       	ldi	r18, 0x9C	; 156
    2122:	f2 06       	cpc	r15, r18
    2124:	d9 f5       	brne	.+118    	; 0x219c <udp_packet_in+0xc2>
    2126:	29 c0       	rjmp	.+82     	; 0x217a <udp_packet_in+0xa0>

//#ifdef _CONFIG_USE_DHCP_CLIENT
		case(68):

			dhcp_get_packet(buffer,len);
    2128:	ce 01       	movw	r24, r28
    212a:	b8 01       	movw	r22, r16
    212c:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <dhcp_get_packet>
		break;
    2130:	35 c0       	rjmp	.+106    	; 0x219c <udp_packet_in+0xc2>
//#endif

		case(1020):
			if (nic_ip == dest_ip)
    2132:	20 91 ac 05 	lds	r18, 0x05AC
    2136:	30 91 ad 05 	lds	r19, 0x05AD
    213a:	40 91 ae 05 	lds	r20, 0x05AE
    213e:	50 91 af 05 	lds	r21, 0x05AF
    2142:	26 17       	cp	r18, r22
    2144:	37 07       	cpc	r19, r23
    2146:	48 07       	cpc	r20, r24
    2148:	59 07       	cpc	r21, r25
    214a:	41 f5       	brne	.+80     	; 0x219c <udp_packet_in+0xc2>
				panel_get_text_packet(buffer, len);
    214c:	ce 01       	movw	r24, r28
    214e:	b8 01       	movw	r22, r16
    2150:	0e 94 36 05 	call	0xa6c	; 0xa6c <panel_get_text_packet>
    2154:	23 c0       	rjmp	.+70     	; 0x219c <udp_packet_in+0xc2>
			break;

		case(1021):
			if (nic_ip == dest_ip)
    2156:	20 91 ac 05 	lds	r18, 0x05AC
    215a:	30 91 ad 05 	lds	r19, 0x05AD
    215e:	40 91 ae 05 	lds	r20, 0x05AE
    2162:	50 91 af 05 	lds	r21, 0x05AF
    2166:	26 17       	cp	r18, r22
    2168:	37 07       	cpc	r19, r23
    216a:	48 07       	cpc	r20, r24
    216c:	59 07       	cpc	r21, r25
    216e:	b1 f4       	brne	.+44     	; 0x219c <udp_packet_in+0xc2>
				panel_get_binary_packet(buffer, len);
    2170:	ce 01       	movw	r24, r28
    2172:	b8 01       	movw	r22, r16
    2174:	0e 94 c0 04 	call	0x980	; 0x980 <panel_get_binary_packet>
    2178:	11 c0       	rjmp	.+34     	; 0x219c <udp_packet_in+0xc2>
			break;

#ifdef _CONFIG_USE_NTP_CLIENT
		//NTP Reply
		case(40123):
			if (nic_ip == dest_ip)
    217a:	20 91 ac 05 	lds	r18, 0x05AC
    217e:	30 91 ad 05 	lds	r19, 0x05AD
    2182:	40 91 ae 05 	lds	r20, 0x05AE
    2186:	50 91 af 05 	lds	r21, 0x05AF
    218a:	26 17       	cp	r18, r22
    218c:	37 07       	cpc	r19, r23
    218e:	48 07       	cpc	r20, r24
    2190:	59 07       	cpc	r21, r25
    2192:	21 f4       	brne	.+8      	; 0x219c <udp_packet_in+0xc2>
				ntp_client_decode_packet(buffer, len);
    2194:	ce 01       	movw	r24, r28
    2196:	b8 01       	movw	r22, r16
    2198:	0e 94 8b 08 	call	0x1116	; 0x1116 <ntp_client_decode_packet>
		//case(17086):
		//	if (nic_ip == dest_ip)
		//		nordlicht_connector_get_packet(buffer, len);
		//break;
	}
}
    219c:	df 91       	pop	r29
    219e:	cf 91       	pop	r28
    21a0:	1f 91       	pop	r17
    21a2:	0f 91       	pop	r16
    21a4:	ff 90       	pop	r15
    21a6:	ef 90       	pop	r14
    21a8:	08 95       	ret

000021aa <tcp_packet_in>:
		case(5000):
			//if (nic_ip == dest_ip)
			//get_udp(nic_buffer, len);
		break;
	}
}
    21aa:	08 95       	ret

000021ac <arp_init>:

struct arp_entry arp_table[ARP_TABLE_SIZE];


//param initialise arp table:
void arp_init(void){
    21ac:	eb ed       	ldi	r30, 0xDB	; 219
    21ae:	f2 e0       	ldi	r31, 0x02	; 2
	for(uint8_t i = 0; i < ARP_TABLE_SIZE; i++){
		arp_table[i].ip  = 0;
    21b0:	10 82       	st	Z, r1
    21b2:	11 82       	std	Z+1, r1	; 0x01
    21b4:	12 82       	std	Z+2, r1	; 0x02
    21b6:	13 82       	std	Z+3, r1	; 0x03
    21b8:	3a 96       	adiw	r30, 0x0a	; 10
struct arp_entry arp_table[ARP_TABLE_SIZE];


//param initialise arp table:
void arp_init(void){
	for(uint8_t i = 0; i < ARP_TABLE_SIZE; i++){
    21ba:	83 e0       	ldi	r24, 0x03	; 3
    21bc:	ef 33       	cpi	r30, 0x3F	; 63
    21be:	f8 07       	cpc	r31, r24
    21c0:	b9 f7       	brne	.-18     	; 0x21b0 <arp_init+0x4>
		arp_table[i].ip  = 0;
	}
}
    21c2:	08 95       	ret

000021c4 <arp_search_by_ip>:





uint8_t arp_search_by_ip(uint32_t ip){
    21c4:	ef 92       	push	r14
    21c6:	ff 92       	push	r15
    21c8:	0f 93       	push	r16
    21ca:	1f 93       	push	r17
    21cc:	9b 01       	movw	r18, r22
    21ce:	ac 01       	movw	r20, r24
    21d0:	eb ed       	ldi	r30, 0xDB	; 219
    21d2:	f2 e0       	ldi	r31, 0x02	; 2
    21d4:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t i;
	for (i = 0; i < ARP_TABLE_SIZE; i++){
		if (arp_table[i].ip == ip) {
    21d6:	e0 80       	ld	r14, Z
    21d8:	f1 80       	ldd	r15, Z+1	; 0x01
    21da:	02 81       	ldd	r16, Z+2	; 0x02
    21dc:	13 81       	ldd	r17, Z+3	; 0x03
    21de:	e2 16       	cp	r14, r18
    21e0:	f3 06       	cpc	r15, r19
    21e2:	04 07       	cpc	r16, r20
    21e4:	15 07       	cpc	r17, r21
    21e6:	29 f0       	breq	.+10     	; 0x21f2 <arp_search_by_ip+0x2e>



uint8_t arp_search_by_ip(uint32_t ip){
	uint8_t i;
	for (i = 0; i < ARP_TABLE_SIZE; i++){
    21e8:	8f 5f       	subi	r24, 0xFF	; 255
    21ea:	3a 96       	adiw	r30, 0x0a	; 10
    21ec:	8a 30       	cpi	r24, 0x0A	; 10
    21ee:	99 f7       	brne	.-26     	; 0x21d6 <arp_search_by_ip+0x12>
    21f0:	8f ef       	ldi	r24, 0xFF	; 255

	}
	//if we get here, ip is unknown

	return 255;
}
    21f2:	1f 91       	pop	r17
    21f4:	0f 91       	pop	r16
    21f6:	ff 90       	pop	r15
    21f8:	ef 90       	pop	r14
    21fa:	08 95       	ret

000021fc <arp_add_mac2ip>:


void arp_add_mac2ip(char *buffer, uint32_t *ip){
    21fc:	ef 92       	push	r14
    21fe:	ff 92       	push	r15
    2200:	0f 93       	push	r16
    2202:	1f 93       	push	r17
    2204:	cf 93       	push	r28
    2206:	df 93       	push	r29
    2208:	eb 01       	movw	r28, r22


	if (arp_search_by_ip(*ip) != 255)
    220a:	28 81       	ld	r18, Y
    220c:	39 81       	ldd	r19, Y+1	; 0x01
    220e:	4a 81       	ldd	r20, Y+2	; 0x02
    2210:	5b 81       	ldd	r21, Y+3	; 0x03
    2212:	ab ed       	ldi	r26, 0xDB	; 219
    2214:	b2 e0       	ldi	r27, 0x02	; 2

	return 255;
}


void arp_add_mac2ip(char *buffer, uint32_t *ip){
    2216:	fd 01       	movw	r30, r26


uint8_t arp_search_by_ip(uint32_t ip){
	uint8_t i;
	for (i = 0; i < ARP_TABLE_SIZE; i++){
		if (arp_table[i].ip == ip) {
    2218:	ed 90       	ld	r14, X+
    221a:	fd 90       	ld	r15, X+
    221c:	0d 91       	ld	r16, X+
    221e:	1c 91       	ld	r17, X
    2220:	13 97       	sbiw	r26, 0x03	; 3
    2222:	e2 16       	cp	r14, r18
    2224:	f3 06       	cpc	r15, r19
    2226:	04 07       	cpc	r16, r20
    2228:	15 07       	cpc	r17, r21
    222a:	c9 f1       	breq	.+114    	; 0x229e <arp_add_mac2ip+0xa2>
    222c:	1a 96       	adiw	r26, 0x0a	; 10



uint8_t arp_search_by_ip(uint32_t ip){
	uint8_t i;
	for (i = 0; i < ARP_TABLE_SIZE; i++){
    222e:	63 e0       	ldi	r22, 0x03	; 3
    2230:	af 33       	cpi	r26, 0x3F	; 63
    2232:	b6 07       	cpc	r27, r22
    2234:	89 f7       	brne	.-30     	; 0x2218 <arp_add_mac2ip+0x1c>
		return;

	uint8_t c;

	for(uint8_t i = 1; i < ARP_TABLE_SIZE; i++){
		arp_table[i-1].ip  = arp_table[i].ip;
    2236:	22 85       	ldd	r18, Z+10	; 0x0a
    2238:	33 85       	ldd	r19, Z+11	; 0x0b
    223a:	44 85       	ldd	r20, Z+12	; 0x0c
    223c:	55 85       	ldd	r21, Z+13	; 0x0d
    223e:	20 83       	st	Z, r18
    2240:	31 83       	std	Z+1, r19	; 0x01
    2242:	42 83       	std	Z+2, r20	; 0x02
    2244:	53 83       	std	Z+3, r21	; 0x03

		for (c=0; c<6; c++)
			arp_table[i-1].mac[c] = arp_table[i].mac[c];
    2246:	26 85       	ldd	r18, Z+14	; 0x0e
    2248:	24 83       	std	Z+4, r18	; 0x04
    224a:	27 85       	ldd	r18, Z+15	; 0x0f
    224c:	25 83       	std	Z+5, r18	; 0x05
    224e:	20 89       	ldd	r18, Z+16	; 0x10
    2250:	26 83       	std	Z+6, r18	; 0x06
    2252:	21 89       	ldd	r18, Z+17	; 0x11
    2254:	27 83       	std	Z+7, r18	; 0x07
    2256:	22 89       	ldd	r18, Z+18	; 0x12
    2258:	20 87       	std	Z+8, r18	; 0x08
    225a:	23 89       	ldd	r18, Z+19	; 0x13
    225c:	21 87       	std	Z+9, r18	; 0x09
    225e:	3a 96       	adiw	r30, 0x0a	; 10
	if (arp_search_by_ip(*ip) != 255)
		return;

	uint8_t c;

	for(uint8_t i = 1; i < ARP_TABLE_SIZE; i++){
    2260:	23 e0       	ldi	r18, 0x03	; 3
    2262:	e5 33       	cpi	r30, 0x35	; 53
    2264:	f2 07       	cpc	r31, r18
    2266:	39 f7       	brne	.-50     	; 0x2236 <arp_add_mac2ip+0x3a>
		for (c=0; c<6; c++)
			arp_table[i-1].mac[c] = arp_table[i].mac[c];
	}

	//set ip
	arp_table[ARP_TABLE_SIZE - 1].ip = *ip;
    2268:	28 81       	ld	r18, Y
    226a:	39 81       	ldd	r19, Y+1	; 0x01
    226c:	4a 81       	ldd	r20, Y+2	; 0x02
    226e:	5b 81       	ldd	r21, Y+3	; 0x03
    2270:	20 93 35 03 	sts	0x0335, r18
    2274:	30 93 36 03 	sts	0x0336, r19
    2278:	40 93 37 03 	sts	0x0337, r20
    227c:	50 93 38 03 	sts	0x0338, r21
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0

	//set mac:
	for (c = 0; c < 6; c++){
		arp_table[ARP_TABLE_SIZE - 1].mac[c] = buffer[c];
    2284:	f9 01       	movw	r30, r18
    2286:	e7 5c       	subi	r30, 0xC7	; 199
    2288:	fc 4f       	sbci	r31, 0xFC	; 252
    228a:	dc 01       	movw	r26, r24
    228c:	a2 0f       	add	r26, r18
    228e:	b3 1f       	adc	r27, r19
    2290:	4c 91       	ld	r20, X
    2292:	40 83       	st	Z, r20
    2294:	2f 5f       	subi	r18, 0xFF	; 255
    2296:	3f 4f       	sbci	r19, 0xFF	; 255

	//set ip
	arp_table[ARP_TABLE_SIZE - 1].ip = *ip;

	//set mac:
	for (c = 0; c < 6; c++){
    2298:	26 30       	cpi	r18, 0x06	; 6
    229a:	31 05       	cpc	r19, r1
    229c:	99 f7       	brne	.-26     	; 0x2284 <arp_add_mac2ip+0x88>
		arp_table[ARP_TABLE_SIZE - 1].mac[c] = buffer[c];
	}
}
    229e:	df 91       	pop	r29
    22a0:	cf 91       	pop	r28
    22a2:	1f 91       	pop	r17
    22a4:	0f 91       	pop	r16
    22a6:	ff 90       	pop	r15
    22a8:	ef 90       	pop	r14
    22aa:	08 95       	ret

000022ac <nic_buffer_to_unsigned_int>:


unsigned int nic_buffer_to_unsigned_int(char *buffer) {
    22ac:	fc 01       	movw	r30, r24
    22ae:	54 89       	ldd	r21, Z+20	; 0x14
    22b0:	40 e0       	ldi	r20, 0x00	; 0
    22b2:	25 89       	ldd	r18, Z+21	; 0x15
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	24 2b       	or	r18, r20
    22b8:	35 2b       	or	r19, r21
	unsigned int res = ((unsigned int) buffer[20] << 8) | buffer[21];
	return res;
}
    22ba:	c9 01       	movw	r24, r18
    22bc:	08 95       	ret

000022be <arp_send_request>:
}


//send an arp request
void arp_send_request(char *buffer, uint32_t *dest_ip)
{
    22be:	0f 93       	push	r16
    22c0:	1f 93       	push	r17
    22c2:	cf 93       	push	r28
    22c4:	df 93       	push	r29
    22c6:	ec 01       	movw	r28, r24
    22c8:	8b 01       	movw	r16, r22
    22ca:	fc 01       	movw	r30, r24
    22cc:	a6 ea       	ldi	r26, 0xA6	; 166
    22ce:	b5 e0       	ldi	r27, 0x05	; 5
	//generate ethernet packet:
	for (uint8_t c = 0; c < 6; c++){
		//set destination mac address:
		buffer[c]   = 0xFF; //BROADCAST!
    22d0:	8f ef       	ldi	r24, 0xFF	; 255
    22d2:	80 83       	st	Z, r24
		//set source mac address:
		buffer[c+6] = nic_mac[c];
    22d4:	9d 91       	ld	r25, X+
    22d6:	96 83       	std	Z+6, r25	; 0x06

		//set target mac to 0xFF:
		buffer[ARP_POS_DST_MAC+c] = 0xFF;
    22d8:	80 a3       	std	Z+32, r24	; 0x20
    22da:	31 96       	adiw	r30, 0x01	; 1

//send an arp request
void arp_send_request(char *buffer, uint32_t *dest_ip)
{
	//generate ethernet packet:
	for (uint8_t c = 0; c < 6; c++){
    22dc:	95 e0       	ldi	r25, 0x05	; 5
    22de:	ac 3a       	cpi	r26, 0xAC	; 172
    22e0:	b9 07       	cpc	r27, r25
    22e2:	b9 f7       	brne	.-18     	; 0x22d2 <arp_send_request+0x14>
		//set target mac to 0xFF:
		buffer[ARP_POS_DST_MAC+c] = 0xFF;
	}

	//set ethernet packettype to ARP
	buffer[12] = 0x08;
    22e4:	28 e0       	ldi	r18, 0x08	; 8
    22e6:	2c 87       	std	Y+12, r18	; 0x0c
	buffer[13] = 0x06;
    22e8:	96 e0       	ldi	r25, 0x06	; 6
    22ea:	9d 87       	std	Y+13, r25	; 0x0d

	//set hardware type to ethernet:
	buffer[ARP_POS_HARDWARE_TYPE+0] = 0x00;
    22ec:	1e 86       	std	Y+14, r1	; 0x0e
	buffer[ARP_POS_HARDWARE_TYPE+1] = 0x01;
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	8f 87       	std	Y+15, r24	; 0x0f

	//set protocol to IP:
	buffer[ARP_POS_PROTOCOL+0] = 0x08;
    22f2:	28 8b       	std	Y+16, r18	; 0x10
	buffer[ARP_POS_PROTOCOL+1] = 0x00;
    22f4:	19 8a       	std	Y+17, r1	; 0x11

	//set hw size:
	buffer[ARP_POS_HARDWARE_SIZE] = 0x06;
    22f6:	9a 8b       	std	Y+18, r25	; 0x12

	//set protocol size
	buffer[ARP_POS_PROTOCOL_SIZE] = 0x04;
    22f8:	94 e0       	ldi	r25, 0x04	; 4
    22fa:	9b 8b       	std	Y+19, r25	; 0x13

	//set ARP type to REQUEST
	buffer[ARP_POS_OP+0] = ARP_OP_REQUEST>>8;
    22fc:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[ARP_POS_OP+1] = ARP_OP_REQUEST;
    22fe:	8d 8b       	std	Y+21, r24	; 0x15

	//setup sender mac & ip:
	nic_copy_mac_to_buf(&buffer[ARP_POS_SRC_MAC]);
    2300:	ce 01       	movw	r24, r28
    2302:	46 96       	adiw	r24, 0x16	; 22
    2304:	0e 94 91 14 	call	0x2922	; 0x2922 <nic_copy_mac_to_buf>
	nic_ip_to_buffer(&buffer[ARP_POS_SRC_IP], nic_ip);
    2308:	40 91 ac 05 	lds	r20, 0x05AC
    230c:	50 91 ad 05 	lds	r21, 0x05AD
    2310:	60 91 ae 05 	lds	r22, 0x05AE
    2314:	70 91 af 05 	lds	r23, 0x05AF
    2318:	ce 01       	movw	r24, r28
    231a:	4c 96       	adiw	r24, 0x1c	; 28
    231c:	0e 94 8b 14 	call	0x2916	; 0x2916 <nic_ip_to_buffer>

	//set target ip:
	nic_ip_to_buffer(&buffer[ARP_POS_DST_IP], *dest_ip);
    2320:	f8 01       	movw	r30, r16
    2322:	40 81       	ld	r20, Z
    2324:	51 81       	ldd	r21, Z+1	; 0x01
    2326:	62 81       	ldd	r22, Z+2	; 0x02
    2328:	73 81       	ldd	r23, Z+3	; 0x03
    232a:	ce 01       	movw	r24, r28
    232c:	86 96       	adiw	r24, 0x26	; 38
    232e:	0e 94 8b 14 	call	0x2916	; 0x2916 <nic_ip_to_buffer>

	//send arp request:
	nic_send_packet(buffer, 14+28);
    2332:	ce 01       	movw	r24, r28
    2334:	6a e2       	ldi	r22, 0x2A	; 42
    2336:	70 e0       	ldi	r23, 0x00	; 0
    2338:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <nic_send_packet>
}
    233c:	df 91       	pop	r29
    233e:	cf 91       	pop	r28
    2340:	1f 91       	pop	r17
    2342:	0f 91       	pop	r16
    2344:	08 95       	ret

00002346 <arpGetMac>:

uint8_t arpGetMac(uint32_t* ip, unsigned char* mac, char* buffer) {
    2346:	2f 92       	push	r2
    2348:	3f 92       	push	r3
    234a:	4f 92       	push	r4
    234c:	5f 92       	push	r5
    234e:	6f 92       	push	r6
    2350:	7f 92       	push	r7
    2352:	8f 92       	push	r8
    2354:	9f 92       	push	r9
    2356:	af 92       	push	r10
    2358:	bf 92       	push	r11
    235a:	cf 92       	push	r12
    235c:	df 92       	push	r13
    235e:	ef 92       	push	r14
    2360:	ff 92       	push	r15
    2362:	0f 93       	push	r16
    2364:	1f 93       	push	r17
    2366:	cf 93       	push	r28
    2368:	df 93       	push	r29
    236a:	8c 01       	movw	r16, r24
    236c:	eb 01       	movw	r28, r22
    236e:	7a 01       	movw	r14, r20

	unsigned long *server_ip;

	//target ip in the same network ?!
	if ((*ip & netmask_bits_to_netmask(nic_netmask_bits)) != (nic_ip & netmask_bits_to_netmask(nic_netmask_bits))){
    2370:	fc 01       	movw	r30, r24
    2372:	a0 80       	ld	r10, Z
    2374:	b1 80       	ldd	r11, Z+1	; 0x01
    2376:	c2 80       	ldd	r12, Z+2	; 0x02
    2378:	d3 80       	ldd	r13, Z+3	; 0x03
    237a:	80 91 a0 05 	lds	r24, 0x05A0
    237e:	0e 94 48 14 	call	0x2890	; 0x2890 <netmask_bits_to_netmask>
    2382:	3b 01       	movw	r6, r22
    2384:	4c 01       	movw	r8, r24
    2386:	20 90 ac 05 	lds	r2, 0x05AC
    238a:	30 90 ad 05 	lds	r3, 0x05AD
    238e:	40 90 ae 05 	lds	r4, 0x05AE
    2392:	50 90 af 05 	lds	r5, 0x05AF
    2396:	80 91 a0 05 	lds	r24, 0x05A0
    239a:	0e 94 48 14 	call	0x2890	; 0x2890 <netmask_bits_to_netmask>
    239e:	a6 20       	and	r10, r6
    23a0:	b7 20       	and	r11, r7
    23a2:	c8 20       	and	r12, r8
    23a4:	d9 20       	and	r13, r9
    23a6:	62 21       	and	r22, r2
    23a8:	73 21       	and	r23, r3
    23aa:	84 21       	and	r24, r4
    23ac:	95 21       	and	r25, r5
    23ae:	a6 16       	cp	r10, r22
    23b0:	b7 06       	cpc	r11, r23
    23b2:	c8 06       	cpc	r12, r24
    23b4:	d9 06       	cpc	r13, r25
    23b6:	11 f4       	brne	.+4      	; 0x23bc <arpGetMac+0x76>
    23b8:	b8 01       	movw	r22, r16
    23ba:	02 c0       	rjmp	.+4      	; 0x23c0 <arpGetMac+0x7a>
    23bc:	6c e9       	ldi	r22, 0x9C	; 156
    23be:	75 e0       	ldi	r23, 0x05	; 5
		server_ip = &nic_gateway_ip;
	}else{
		server_ip = ip;
	}

	uint8_t arp_idx = arp_search_by_ip(*server_ip);
    23c0:	fb 01       	movw	r30, r22
    23c2:	20 81       	ld	r18, Z
    23c4:	31 81       	ldd	r19, Z+1	; 0x01
    23c6:	42 81       	ldd	r20, Z+2	; 0x02
    23c8:	53 81       	ldd	r21, Z+3	; 0x03
    23ca:	eb ed       	ldi	r30, 0xDB	; 219
    23cc:	f2 e0       	ldi	r31, 0x02	; 2
    23ce:	80 e0       	ldi	r24, 0x00	; 0


uint8_t arp_search_by_ip(uint32_t ip){
	uint8_t i;
	for (i = 0; i < ARP_TABLE_SIZE; i++){
		if (arp_table[i].ip == ip) {
    23d0:	a0 80       	ld	r10, Z
    23d2:	b1 80       	ldd	r11, Z+1	; 0x01
    23d4:	c2 80       	ldd	r12, Z+2	; 0x02
    23d6:	d3 80       	ldd	r13, Z+3	; 0x03
    23d8:	a2 16       	cp	r10, r18
    23da:	b3 06       	cpc	r11, r19
    23dc:	c4 06       	cpc	r12, r20
    23de:	d5 06       	cpc	r13, r21
    23e0:	29 f0       	breq	.+10     	; 0x23ec <arpGetMac+0xa6>



uint8_t arp_search_by_ip(uint32_t ip){
	uint8_t i;
	for (i = 0; i < ARP_TABLE_SIZE; i++){
    23e2:	8f 5f       	subi	r24, 0xFF	; 255
    23e4:	3a 96       	adiw	r30, 0x0a	; 10
    23e6:	8a 30       	cpi	r24, 0x0A	; 10
    23e8:	99 f7       	brne	.-26     	; 0x23d0 <arpGetMac+0x8a>
    23ea:	79 c0       	rjmp	.+242    	; 0x24de <arpGetMac+0x198>
		return 0;
	}



	mac[0] = arp_table[arp_idx].mac[0];
    23ec:	28 2f       	mov	r18, r24
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	f9 01       	movw	r30, r18
    23f2:	ee 0f       	add	r30, r30
    23f4:	ff 1f       	adc	r31, r31
    23f6:	93 e0       	ldi	r25, 0x03	; 3
    23f8:	22 0f       	add	r18, r18
    23fa:	33 1f       	adc	r19, r19
    23fc:	9a 95       	dec	r25
    23fe:	e1 f7       	brne	.-8      	; 0x23f8 <arpGetMac+0xb2>
    2400:	e2 0f       	add	r30, r18
    2402:	f3 1f       	adc	r31, r19
    2404:	e5 52       	subi	r30, 0x25	; 37
    2406:	fd 4f       	sbci	r31, 0xFD	; 253
    2408:	94 81       	ldd	r25, Z+4	; 0x04
    240a:	98 83       	st	Y, r25
	mac[1] = arp_table[arp_idx].mac[1];
    240c:	28 2f       	mov	r18, r24
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	f9 01       	movw	r30, r18
    2412:	ee 0f       	add	r30, r30
    2414:	ff 1f       	adc	r31, r31
    2416:	13 e0       	ldi	r17, 0x03	; 3
    2418:	22 0f       	add	r18, r18
    241a:	33 1f       	adc	r19, r19
    241c:	1a 95       	dec	r17
    241e:	e1 f7       	brne	.-8      	; 0x2418 <arpGetMac+0xd2>
    2420:	e2 0f       	add	r30, r18
    2422:	f3 1f       	adc	r31, r19
    2424:	e5 52       	subi	r30, 0x25	; 37
    2426:	fd 4f       	sbci	r31, 0xFD	; 253
    2428:	95 81       	ldd	r25, Z+5	; 0x05
    242a:	99 83       	std	Y+1, r25	; 0x01
	mac[2] = arp_table[arp_idx].mac[2];
    242c:	28 2f       	mov	r18, r24
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	f9 01       	movw	r30, r18
    2432:	ee 0f       	add	r30, r30
    2434:	ff 1f       	adc	r31, r31
    2436:	a3 e0       	ldi	r26, 0x03	; 3
    2438:	22 0f       	add	r18, r18
    243a:	33 1f       	adc	r19, r19
    243c:	aa 95       	dec	r26
    243e:	e1 f7       	brne	.-8      	; 0x2438 <arpGetMac+0xf2>
    2440:	e2 0f       	add	r30, r18
    2442:	f3 1f       	adc	r31, r19
    2444:	e5 52       	subi	r30, 0x25	; 37
    2446:	fd 4f       	sbci	r31, 0xFD	; 253
    2448:	96 81       	ldd	r25, Z+6	; 0x06
    244a:	9a 83       	std	Y+2, r25	; 0x02
	mac[3] = arp_table[arp_idx].mac[3];
    244c:	28 2f       	mov	r18, r24
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	f9 01       	movw	r30, r18
    2452:	ee 0f       	add	r30, r30
    2454:	ff 1f       	adc	r31, r31
    2456:	63 e0       	ldi	r22, 0x03	; 3
    2458:	22 0f       	add	r18, r18
    245a:	33 1f       	adc	r19, r19
    245c:	6a 95       	dec	r22
    245e:	e1 f7       	brne	.-8      	; 0x2458 <arpGetMac+0x112>
    2460:	e2 0f       	add	r30, r18
    2462:	f3 1f       	adc	r31, r19
    2464:	e5 52       	subi	r30, 0x25	; 37
    2466:	fd 4f       	sbci	r31, 0xFD	; 253
    2468:	97 81       	ldd	r25, Z+7	; 0x07
    246a:	9b 83       	std	Y+3, r25	; 0x03
	mac[4] = arp_table[arp_idx].mac[4];
    246c:	28 2f       	mov	r18, r24
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	f9 01       	movw	r30, r18
    2472:	ee 0f       	add	r30, r30
    2474:	ff 1f       	adc	r31, r31
    2476:	43 e0       	ldi	r20, 0x03	; 3
    2478:	22 0f       	add	r18, r18
    247a:	33 1f       	adc	r19, r19
    247c:	4a 95       	dec	r20
    247e:	e1 f7       	brne	.-8      	; 0x2478 <arpGetMac+0x132>
    2480:	e2 0f       	add	r30, r18
    2482:	f3 1f       	adc	r31, r19
    2484:	e5 52       	subi	r30, 0x25	; 37
    2486:	fd 4f       	sbci	r31, 0xFD	; 253
    2488:	90 85       	ldd	r25, Z+8	; 0x08
    248a:	9c 83       	std	Y+4, r25	; 0x04
	mac[5] = arp_table[arp_idx].mac[5];
    248c:	28 2f       	mov	r18, r24
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	f9 01       	movw	r30, r18
    2492:	ee 0f       	add	r30, r30
    2494:	ff 1f       	adc	r31, r31
    2496:	83 e0       	ldi	r24, 0x03	; 3
    2498:	22 0f       	add	r18, r18
    249a:	33 1f       	adc	r19, r19
    249c:	8a 95       	dec	r24
    249e:	e1 f7       	brne	.-8      	; 0x2498 <arpGetMac+0x152>
    24a0:	e2 0f       	add	r30, r18
    24a2:	f3 1f       	adc	r31, r19
    24a4:	e5 52       	subi	r30, 0x25	; 37
    24a6:	fd 4f       	sbci	r31, 0xFD	; 253
    24a8:	81 85       	ldd	r24, Z+9	; 0x09
    24aa:	8d 83       	std	Y+5, r24	; 0x05
    24ac:	81 e0       	ldi	r24, 0x01	; 1

	return 1;
    24ae:	04 c0       	rjmp	.+8      	; 0x24b8 <arpGetMac+0x172>
		//target ip (gateway) unknown
		//->send arp request and exit,
		//this is called later again and we hopefully know the mac then

		if (buffer != 0x00)
			arp_send_request(buffer, server_ip);
    24b0:	c7 01       	movw	r24, r14
    24b2:	0e 94 5f 11 	call	0x22be	; 0x22be <arp_send_request>
    24b6:	80 e0       	ldi	r24, 0x00	; 0
	mac[3] = arp_table[arp_idx].mac[3];
	mac[4] = arp_table[arp_idx].mac[4];
	mac[5] = arp_table[arp_idx].mac[5];

	return 1;
}
    24b8:	df 91       	pop	r29
    24ba:	cf 91       	pop	r28
    24bc:	1f 91       	pop	r17
    24be:	0f 91       	pop	r16
    24c0:	ff 90       	pop	r15
    24c2:	ef 90       	pop	r14
    24c4:	df 90       	pop	r13
    24c6:	cf 90       	pop	r12
    24c8:	bf 90       	pop	r11
    24ca:	af 90       	pop	r10
    24cc:	9f 90       	pop	r9
    24ce:	8f 90       	pop	r8
    24d0:	7f 90       	pop	r7
    24d2:	6f 90       	pop	r6
    24d4:	5f 90       	pop	r5
    24d6:	4f 90       	pop	r4
    24d8:	3f 90       	pop	r3
    24da:	2f 90       	pop	r2
    24dc:	08 95       	ret
	if (arp_idx == 255){
		//target ip (gateway) unknown
		//->send arp request and exit,
		//this is called later again and we hopefully know the mac then

		if (buffer != 0x00)
    24de:	e1 14       	cp	r14, r1
    24e0:	f1 04       	cpc	r15, r1
    24e2:	31 f7       	brne	.-52     	; 0x24b0 <arpGetMac+0x16a>
    24e4:	e8 cf       	rjmp	.-48     	; 0x24b6 <arpGetMac+0x170>

000024e6 <arp_packet_in>:
	unsigned int res = ((unsigned int) buffer[20] << 8) | buffer[21];
	return res;
}

//decode arp packet & send reply
void arp_packet_in(char *buffer, unsigned int len){
    24e6:	8f 92       	push	r8
    24e8:	9f 92       	push	r9
    24ea:	af 92       	push	r10
    24ec:	bf 92       	push	r11
    24ee:	cf 92       	push	r12
    24f0:	df 92       	push	r13
    24f2:	ef 92       	push	r14
    24f4:	ff 92       	push	r15
    24f6:	0f 93       	push	r16
    24f8:	1f 93       	push	r17
    24fa:	df 93       	push	r29
    24fc:	cf 93       	push	r28
    24fe:	cd b7       	in	r28, 0x3d	; 61
    2500:	de b7       	in	r29, 0x3e	; 62
    2502:	28 97       	sbiw	r28, 0x08	; 8
    2504:	0f b6       	in	r0, 0x3f	; 63
    2506:	f8 94       	cli
    2508:	de bf       	out	0x3e, r29	; 62
    250a:	0f be       	out	0x3f, r0	; 63
    250c:	cd bf       	out	0x3d, r28	; 61
    250e:	8c 01       	movw	r16, r24
    2510:	6b 01       	movw	r12, r22
	uint32_t src_ip;

	if (nic_buffer_to_ip(&buffer[ARP_POS_DST_IP]) == nic_ip){
    2512:	76 e2       	ldi	r23, 0x26	; 38
    2514:	e7 2e       	mov	r14, r23
    2516:	f1 2c       	mov	r15, r1
    2518:	e8 0e       	add	r14, r24
    251a:	f9 1e       	adc	r15, r25
    251c:	c7 01       	movw	r24, r14
    251e:	0e 94 60 14 	call	0x28c0	; 0x28c0 <nic_buffer_to_ip>
    2522:	9b 01       	movw	r18, r22
    2524:	ac 01       	movw	r20, r24
    2526:	80 91 ac 05 	lds	r24, 0x05AC
    252a:	90 91 ad 05 	lds	r25, 0x05AD
    252e:	a0 91 ae 05 	lds	r26, 0x05AE
    2532:	b0 91 af 05 	lds	r27, 0x05AF
    2536:	28 17       	cp	r18, r24
    2538:	39 07       	cpc	r19, r25
    253a:	4a 07       	cpc	r20, r26
    253c:	5b 07       	cpc	r21, r27
    253e:	09 f0       	breq	.+2      	; 0x2542 <arp_packet_in+0x5c>
    2540:	5f c0       	rjmp	.+190    	; 0x2600 <arp_packet_in+0x11a>
	}
}


unsigned int nic_buffer_to_unsigned_int(char *buffer) {
	unsigned int res = ((unsigned int) buffer[20] << 8) | buffer[21];
    2542:	f8 01       	movw	r30, r16
    2544:	34 89       	ldd	r19, Z+20	; 0x14
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	85 89       	ldd	r24, Z+21	; 0x15
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	82 2b       	or	r24, r18
    254e:	93 2b       	or	r25, r19
	uint32_t src_ip;

	if (nic_buffer_to_ip(&buffer[ARP_POS_DST_IP]) == nic_ip){

		//is this an arp request ?
		if (nic_buffer_to_unsigned_int(buffer) == ARP_OP_REQUEST){
    2550:	81 30       	cpi	r24, 0x01	; 1
    2552:	91 05       	cpc	r25, r1
    2554:	09 f0       	breq	.+2      	; 0x2558 <arp_packet_in+0x72>
    2556:	42 c0       	rjmp	.+132    	; 0x25dc <arp_packet_in+0xf6>
			//is this arp request for us ?

			//get entry pos in arp table.
			src_ip = nic_buffer_to_ip(&buffer[ARP_POS_SRC_IP]);
    2558:	6c e1       	ldi	r22, 0x1C	; 28
    255a:	a6 2e       	mov	r10, r22
    255c:	b1 2c       	mov	r11, r1
    255e:	a0 0e       	add	r10, r16
    2560:	b1 1e       	adc	r11, r17
    2562:	c5 01       	movw	r24, r10
    2564:	0e 94 60 14 	call	0x28c0	; 0x28c0 <nic_buffer_to_ip>
    2568:	69 83       	std	Y+1, r22	; 0x01
    256a:	7a 83       	std	Y+2, r23	; 0x02
    256c:	8b 83       	std	Y+3, r24	; 0x03
    256e:	9c 83       	std	Y+4, r25	; 0x04


			arp_add_mac2ip(&buffer[ARP_POS_SRC_MAC], &src_ip);
    2570:	56 e1       	ldi	r21, 0x16	; 22
    2572:	85 2e       	mov	r8, r21
    2574:	91 2c       	mov	r9, r1
    2576:	80 0e       	add	r8, r16
    2578:	91 1e       	adc	r9, r17
    257a:	c4 01       	movw	r24, r8
    257c:	be 01       	movw	r22, r28
    257e:	6f 5f       	subi	r22, 0xFF	; 255
    2580:	7f 4f       	sbci	r23, 0xFF	; 255
    2582:	0e 94 fe 10 	call	0x21fc	; 0x21fc <arp_add_mac2ip>
    2586:	f8 01       	movw	r30, r16
    2588:	80 e0       	ldi	r24, 0x00	; 0

			//setup the eth packet:

			//packet target mac:
			for (uint8_t c = 0; c < 6; c++){
				buffer[c] = buffer[ARP_POS_SRC_MAC+c];
    258a:	96 89       	ldd	r25, Z+22	; 0x16
    258c:	90 83       	st	Z, r25
				buffer[ARP_POS_DST_MAC+c] = buffer[ARP_POS_SRC_MAC+c];
    258e:	90 a3       	std	Z+32, r25	; 0x20
			arp_add_mac2ip(&buffer[ARP_POS_SRC_MAC], &src_ip);

			//setup the eth packet:

			//packet target mac:
			for (uint8_t c = 0; c < 6; c++){
    2590:	8f 5f       	subi	r24, 0xFF	; 255
    2592:	31 96       	adiw	r30, 0x01	; 1
    2594:	86 30       	cpi	r24, 0x06	; 6
    2596:	c9 f7       	brne	.-14     	; 0x258a <arp_packet_in+0xa4>
				buffer[c] = buffer[ARP_POS_SRC_MAC+c];
				buffer[ARP_POS_DST_MAC+c] = buffer[ARP_POS_SRC_MAC+c];
			}
			//packet source mac:

			nic_copy_mac_to_buf(&buffer[6]);
    2598:	c8 01       	movw	r24, r16
    259a:	06 96       	adiw	r24, 0x06	; 6
    259c:	0e 94 91 14 	call	0x2922	; 0x2922 <nic_copy_mac_to_buf>
			nic_copy_mac_to_buf(&buffer[ARP_POS_SRC_MAC]);
    25a0:	c4 01       	movw	r24, r8
    25a2:	0e 94 91 14 	call	0x2922	; 0x2922 <nic_copy_mac_to_buf>

			//now setup the arp packet:
			//change OP to REPLY
			buffer[ARP_POS_OP+0] = ARP_OP_REPLY>>8 & 0xFF;
    25a6:	f8 01       	movw	r30, r16
    25a8:	14 8a       	std	Z+20, r1	; 0x14
			buffer[ARP_POS_OP+1] = ARP_OP_REPLY    & 0xFF;
    25aa:	82 e0       	ldi	r24, 0x02	; 2
    25ac:	85 8b       	std	Z+21, r24	; 0x15

			//setup source ip:
			nic_ip_to_buffer(&buffer[ARP_POS_SRC_IP], nic_ip);
    25ae:	40 91 ac 05 	lds	r20, 0x05AC
    25b2:	50 91 ad 05 	lds	r21, 0x05AD
    25b6:	60 91 ae 05 	lds	r22, 0x05AE
    25ba:	70 91 af 05 	lds	r23, 0x05AF
    25be:	c5 01       	movw	r24, r10
    25c0:	0e 94 8b 14 	call	0x2916	; 0x2916 <nic_ip_to_buffer>
			//setup target ip:
			nic_ip_to_buffer(&buffer[ARP_POS_DST_IP], src_ip);
    25c4:	49 81       	ldd	r20, Y+1	; 0x01
    25c6:	5a 81       	ldd	r21, Y+2	; 0x02
    25c8:	6b 81       	ldd	r22, Y+3	; 0x03
    25ca:	7c 81       	ldd	r23, Y+4	; 0x04
    25cc:	c7 01       	movw	r24, r14
    25ce:	0e 94 8b 14 	call	0x2916	; 0x2916 <nic_ip_to_buffer>

			//send packet
			nic_send_packet(buffer, len);
    25d2:	c8 01       	movw	r24, r16
    25d4:	b6 01       	movw	r22, r12
    25d6:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <nic_send_packet>
    25da:	12 c0       	rjmp	.+36     	; 0x2600 <arp_packet_in+0x11a>


		} else if (nic_buffer_to_unsigned_int(buffer) == ARP_OP_REPLY) {
    25dc:	82 30       	cpi	r24, 0x02	; 2
    25de:	91 05       	cpc	r25, r1
    25e0:	79 f4       	brne	.+30     	; 0x2600 <arp_packet_in+0x11a>
		//handle ARP REPLY:

		//is this for us ?


			uint32_t ip = nic_buffer_to_ip(&buffer[ARP_POS_SRC_IP]);
    25e2:	c8 01       	movw	r24, r16
    25e4:	4c 96       	adiw	r24, 0x1c	; 28
    25e6:	0e 94 60 14 	call	0x28c0	; 0x28c0 <nic_buffer_to_ip>
    25ea:	6d 83       	std	Y+5, r22	; 0x05
    25ec:	7e 83       	std	Y+6, r23	; 0x06
    25ee:	8f 83       	std	Y+7, r24	; 0x07
    25f0:	98 87       	std	Y+8, r25	; 0x08
			arp_add_mac2ip(&buffer[ARP_POS_SRC_MAC], &ip);
    25f2:	c8 01       	movw	r24, r16
    25f4:	46 96       	adiw	r24, 0x16	; 22
    25f6:	be 01       	movw	r22, r28
    25f8:	6b 5f       	subi	r22, 0xFB	; 251
    25fa:	7f 4f       	sbci	r23, 0xFF	; 255
    25fc:	0e 94 fe 10 	call	0x21fc	; 0x21fc <arp_add_mac2ip>

		}
	}
}
    2600:	28 96       	adiw	r28, 0x08	; 8
    2602:	0f b6       	in	r0, 0x3f	; 63
    2604:	f8 94       	cli
    2606:	de bf       	out	0x3e, r29	; 62
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	cd bf       	out	0x3d, r28	; 61
    260c:	cf 91       	pop	r28
    260e:	df 91       	pop	r29
    2610:	1f 91       	pop	r17
    2612:	0f 91       	pop	r16
    2614:	ff 90       	pop	r15
    2616:	ef 90       	pop	r14
    2618:	df 90       	pop	r13
    261a:	cf 90       	pop	r12
    261c:	bf 90       	pop	r11
    261e:	af 90       	pop	r10
    2620:	9f 90       	pop	r9
    2622:	8f 90       	pop	r8
    2624:	08 95       	ret

00002626 <icmp_packet_in>:
#include "arp.h"

//#include "enc28j60.h"

//called if icmp packet comes in
void icmp_packet_in(char *buffer,unsigned int len){
    2626:	ef 92       	push	r14
    2628:	ff 92       	push	r15
    262a:	0f 93       	push	r16
    262c:	1f 93       	push	r17
    262e:	cf 93       	push	r28
    2630:	df 93       	push	r29
    2632:	ec 01       	movw	r28, r24
    2634:	8b 01       	movw	r16, r22
	int i;

	//we only support ICMP echo request (ping) packets:
	if (buffer[ICMP_POS_TYPE] == ICMP_TYPE_ECHO_REQUEST){
    2636:	8a a1       	ldd	r24, Y+34	; 0x22
    2638:	88 30       	cpi	r24, 0x08	; 8
    263a:	a1 f5       	brne	.+104    	; 0x26a4 <icmp_packet_in+0x7e>
    263c:	7e 01       	movw	r14, r28
    263e:	fe 01       	movw	r30, r28
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	90 e0       	ldi	r25, 0x00	; 0
		//reuse buffer for the ICMP echo reply:

		//*******************************
		//setup the eth packet:
		for(i=0; i<6; i++)
			buffer[i] = buffer[6+i];
    2644:	26 81       	ldd	r18, Z+6	; 0x06
    2646:	21 93       	st	Z+, r18
	if (buffer[ICMP_POS_TYPE] == ICMP_TYPE_ECHO_REQUEST){
		//reuse buffer for the ICMP echo reply:

		//*******************************
		//setup the eth packet:
		for(i=0; i<6; i++)
    2648:	01 96       	adiw	r24, 0x01	; 1
    264a:	86 30       	cpi	r24, 0x06	; 6
    264c:	91 05       	cpc	r25, r1
    264e:	d1 f7       	brne	.-12     	; 0x2644 <icmp_packet_in+0x1e>
			buffer[i] = buffer[6+i];

		//packet source mac:
		nic_copy_mac_to_buf(&buffer[6]);
    2650:	ce 01       	movw	r24, r28
    2652:	06 96       	adiw	r24, 0x06	; 6
    2654:	0e 94 91 14 	call	0x2922	; 0x2922 <nic_copy_mac_to_buf>

		//change type to ECHO REPLY
		buffer[ICMP_POS_TYPE] = ICMP_TYPE_ECHO_REPLY;
    2658:	1a a2       	std	Y+34, r1	; 0x22

		//"calculate" checksum:
		//use quick & dirty hack, we change only the icmp type
		//so we can calculate the new checksum like this:
		if (buffer[ICMP_POS_CHECKSUM+0] > 0xFF-0x08)
    265a:	8c a1       	ldd	r24, Y+36	; 0x24
    265c:	88 3f       	cpi	r24, 0xF8	; 248
    265e:	18 f0       	brcs	.+6      	; 0x2666 <icmp_packet_in+0x40>
			buffer[ICMP_POS_CHECKSUM+1] = buffer[ICMP_POS_CHECKSUM+1] + 1;
    2660:	8d a1       	ldd	r24, Y+37	; 0x25
    2662:	8f 5f       	subi	r24, 0xFF	; 255
    2664:	8d a3       	std	Y+37, r24	; 0x25

		buffer[ICMP_POS_CHECKSUM+0] = buffer[ICMP_POS_CHECKSUM+0] + 0x08;
    2666:	8c a1       	ldd	r24, Y+36	; 0x24
    2668:	88 5f       	subi	r24, 0xF8	; 248
    266a:	8c a3       	std	Y+36, r24	; 0x24
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	90 e0       	ldi	r25, 0x00	; 0

		//set up dst ip (copy src to dest ip):
		for(i=0; i<4; i++){
			buffer[IP_POS_DST_IP+i] = buffer[IP_POS_SRC_IP+i];
    2670:	f7 01       	movw	r30, r14
    2672:	22 8d       	ldd	r18, Z+26	; 0x1a
    2674:	26 8f       	std	Z+30, r18	; 0x1e
			buffer[ICMP_POS_CHECKSUM+1] = buffer[ICMP_POS_CHECKSUM+1] + 1;

		buffer[ICMP_POS_CHECKSUM+0] = buffer[ICMP_POS_CHECKSUM+0] + 0x08;

		//set up dst ip (copy src to dest ip):
		for(i=0; i<4; i++){
    2676:	01 96       	adiw	r24, 0x01	; 1
    2678:	08 94       	sec
    267a:	e1 1c       	adc	r14, r1
    267c:	f1 1c       	adc	r15, r1
    267e:	84 30       	cpi	r24, 0x04	; 4
    2680:	91 05       	cpc	r25, r1
    2682:	b1 f7       	brne	.-20     	; 0x2670 <icmp_packet_in+0x4a>
			buffer[IP_POS_DST_IP+i] = buffer[IP_POS_SRC_IP+i];
		}

		//set up src ip:
		nic_ip_to_buffer(&buffer[IP_POS_SRC_IP], nic_ip);
    2684:	40 91 ac 05 	lds	r20, 0x05AC
    2688:	50 91 ad 05 	lds	r21, 0x05AD
    268c:	60 91 ae 05 	lds	r22, 0x05AE
    2690:	70 91 af 05 	lds	r23, 0x05AF
    2694:	ce 01       	movw	r24, r28
    2696:	4a 96       	adiw	r24, 0x1a	; 26
    2698:	0e 94 8b 14 	call	0x2916	; 0x2916 <nic_ip_to_buffer>

		nic_send_packet(buffer,len);
    269c:	ce 01       	movw	r24, r28
    269e:	b8 01       	movw	r22, r16
    26a0:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <nic_send_packet>
	}
}
    26a4:	df 91       	pop	r29
    26a6:	cf 91       	pop	r28
    26a8:	1f 91       	pop	r17
    26aa:	0f 91       	pop	r16
    26ac:	ff 90       	pop	r15
    26ae:	ef 90       	pop	r14
    26b0:	08 95       	ret

000026b2 <nethelp_checksum>:



volatile unsigned int ip_identification;

unsigned int nethelp_checksum(char *buffer, unsigned int len, unsigned long csum32){
    26b2:	ef 92       	push	r14
    26b4:	ff 92       	push	r15
    26b6:	0f 93       	push	r16
    26b8:	1f 93       	push	r17
    26ba:	cf 93       	push	r28
    26bc:	df 93       	push	r29
    26be:	eb 01       	movw	r28, r22
    26c0:	dc 01       	movw	r26, r24
	unsigned int  res16 = 0x0000;
	unsigned char data_hi;
	unsigned char data_lo;

	//loop through buffer
	while(len > 1){
    26c2:	12 c0       	rjmp	.+36     	; 0x26e8 <nethelp_checksum+0x36>
		//read data_hi/lo from pointer:
		data_hi = *buffer++;
    26c4:	1c 91       	ld	r17, X
		data_lo = *buffer++;
    26c6:	11 96       	adiw	r26, 0x01	; 1
    26c8:	ec 90       	ld	r14, X
    26ca:	11 97       	sbiw	r26, 0x01	; 1



volatile unsigned int ip_identification;

unsigned int nethelp_checksum(char *buffer, unsigned int len, unsigned long csum32){
    26cc:	12 96       	adiw	r26, 0x02	; 2

		//generate 16bit var from both:
		res16 = ((data_hi << 8) + data_lo);

		//add to csum
		csum32 = csum32 + res16;
    26ce:	f1 2f       	mov	r31, r17
    26d0:	e0 e0       	ldi	r30, 0x00	; 0
    26d2:	8f 01       	movw	r16, r30
    26d4:	0e 0d       	add	r16, r14
    26d6:	11 1d       	adc	r17, r1
    26d8:	78 01       	movw	r14, r16
    26da:	00 e0       	ldi	r16, 0x00	; 0
    26dc:	10 e0       	ldi	r17, 0x00	; 0
    26de:	2e 0d       	add	r18, r14
    26e0:	3f 1d       	adc	r19, r15
    26e2:	40 1f       	adc	r20, r16
    26e4:	51 1f       	adc	r21, r17

		//decrement length (we have read 2 bytes from ptr)
		len -=2;
    26e6:	22 97       	sbiw	r28, 0x02	; 2
	unsigned int  res16 = 0x0000;
	unsigned char data_hi;
	unsigned char data_lo;

	//loop through buffer
	while(len > 1){
    26e8:	c2 30       	cpi	r28, 0x02	; 2
    26ea:	d1 05       	cpc	r29, r1
    26ec:	58 f7       	brcc	.-42     	; 0x26c4 <nethelp_checksum+0x12>
    26ee:	fb 01       	movw	r30, r22
    26f0:	ee 7f       	andi	r30, 0xFE	; 254
    26f2:	e8 0f       	add	r30, r24
    26f4:	f9 1f       	adc	r31, r25
		//decrement length (we have read 2 bytes from ptr)
		len -=2;
	}

	//is len odd -> add again last hi value & lo = 0
	if(len > 0){
    26f6:	60 ff       	sbrs	r22, 0
    26f8:	08 c0       	rjmp	.+16     	; 0x270a <nethelp_checksum+0x58>
		//read data_hi/lo from pointer & generate 16bit var:
		data_hi = *buffer;
		res16   = data_hi<<8;

		//add to csum
		csum32 = csum32 + res16;
    26fa:	90 81       	ld	r25, Z
    26fc:	80 e0       	ldi	r24, 0x00	; 0
    26fe:	a0 e0       	ldi	r26, 0x00	; 0
    2700:	b0 e0       	ldi	r27, 0x00	; 0
    2702:	28 0f       	add	r18, r24
    2704:	39 1f       	adc	r19, r25
    2706:	4a 1f       	adc	r20, r26
    2708:	5b 1f       	adc	r21, r27
	}

	//to complement calc:
	csum32 = ((csum32 & 0x0000FFFF)+ ((csum32 & 0xFFFF0000) >> 16));
    270a:	da 01       	movw	r26, r20
    270c:	c9 01       	movw	r24, r18
    270e:	a0 70       	andi	r26, 0x00	; 0
    2710:	b0 70       	andi	r27, 0x00	; 0
    2712:	9a 01       	movw	r18, r20
    2714:	44 27       	eor	r20, r20
    2716:	55 27       	eor	r21, r21
    2718:	28 0f       	add	r18, r24
    271a:	39 1f       	adc	r19, r25
    271c:	4a 1f       	adc	r20, r26
    271e:	5b 1f       	adc	r21, r27
	csum32 = ((csum32 & 0x0000FFFF)+ ((csum32 & 0xFFFF0000) >> 16));
    2720:	da 01       	movw	r26, r20
    2722:	c9 01       	movw	r24, r18
    2724:	a0 70       	andi	r26, 0x00	; 0
    2726:	b0 70       	andi	r27, 0x00	; 0
    2728:	9a 01       	movw	r18, r20
    272a:	44 27       	eor	r20, r20
    272c:	55 27       	eor	r21, r21
    272e:	28 0f       	add	r18, r24
    2730:	39 1f       	adc	r19, r25
    2732:	4a 1f       	adc	r20, r26
    2734:	5b 1f       	adc	r21, r27
    2736:	20 95       	com	r18
    2738:	30 95       	com	r19
	res16  =~(csum32 & 0x0000FFFF);

	return (res16);
}
    273a:	c9 01       	movw	r24, r18
    273c:	df 91       	pop	r29
    273e:	cf 91       	pop	r28
    2740:	1f 91       	pop	r17
    2742:	0f 91       	pop	r16
    2744:	ff 90       	pop	r15
    2746:	ef 90       	pop	r14
    2748:	08 95       	ret

0000274a <ip_generate_packet>:

void ip_generate_packet(char *buffer,
                        uint32_t *dest_ip,
                        unsigned char *dest_mac,
                        unsigned char ip_packettype,
                        unsigned int data_length){
    274a:	ef 92       	push	r14
    274c:	ff 92       	push	r15
    274e:	0f 93       	push	r16
    2750:	1f 93       	push	r17
    2752:	cf 93       	push	r28
    2754:	df 93       	push	r29
    2756:	ec 01       	movw	r28, r24
    2758:	78 01       	movw	r14, r16
	unsigned int res16;
	unsigned int c;

	//datalength = datalength + ip header:
	data_length = data_length + (IP_HEADER_LENGTH<<2);
    275a:	84 e1       	ldi	r24, 0x14	; 20
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	e8 0e       	add	r14, r24
    2760:	f9 1e       	adc	r15, r25
    2762:	de 01       	movw	r26, r28
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	90 e0       	ldi	r25, 0x00	; 0

	//generate ethernet packet:
	for (c=0; c<6; c++){
		//set destination mac address:
		buffer[c]   = dest_mac[c];
    2768:	8a 01       	movw	r16, r20
    276a:	08 0f       	add	r16, r24
    276c:	19 1f       	adc	r17, r25
    276e:	f8 01       	movw	r30, r16
    2770:	30 81       	ld	r19, Z
    2772:	3c 93       	st	X, r19
		//set source mac address:
		buffer[c+6] = nic_mac[c];
    2774:	8c 01       	movw	r16, r24
    2776:	0a 55       	subi	r16, 0x5A	; 90
    2778:	1a 4f       	sbci	r17, 0xFA	; 250
    277a:	f8 01       	movw	r30, r16
    277c:	30 81       	ld	r19, Z
    277e:	16 96       	adiw	r26, 0x06	; 6
    2780:	3c 93       	st	X, r19
    2782:	16 97       	sbiw	r26, 0x06	; 6

	//datalength = datalength + ip header:
	data_length = data_length + (IP_HEADER_LENGTH<<2);

	//generate ethernet packet:
	for (c=0; c<6; c++){
    2784:	01 96       	adiw	r24, 0x01	; 1
    2786:	11 96       	adiw	r26, 0x01	; 1
    2788:	86 30       	cpi	r24, 0x06	; 6
    278a:	91 05       	cpc	r25, r1
    278c:	69 f7       	brne	.-38     	; 0x2768 <ip_generate_packet+0x1e>
		//set source mac address:
		buffer[c+6] = nic_mac[c];
	}

	//set ethernet packettype to IP
	buffer[12] = 0x08;
    278e:	88 e0       	ldi	r24, 0x08	; 8
    2790:	8c 87       	std	Y+12, r24	; 0x0c
	buffer[13] = 0x00;
    2792:	1d 86       	std	Y+13, r1	; 0x0d

	//now generate ip packet:

	//set ipv4 & set length:
	buffer[IP_POS_VERSION] = IP_V4 | IP_HEADER_LENGTH;
    2794:	8e 01       	movw	r16, r28
    2796:	02 5f       	subi	r16, 0xF2	; 242
    2798:	1f 4f       	sbci	r17, 0xFF	; 255
    279a:	85 e4       	ldi	r24, 0x45	; 69
    279c:	8e 87       	std	Y+14, r24	; 0x0e

	//set TOS to default 0x00 (?)
	buffer[IP_POS_TOS] = 0x00;
    279e:	1f 86       	std	Y+15, r1	; 0x0f

	//set total length:
	buffer[IP_POS_PKTLEN+0] = (data_length>>8)&0xFF;
    27a0:	f8 8a       	std	Y+16, r15	; 0x10
	buffer[IP_POS_PKTLEN+1] = (data_length   )&0xFF;
    27a2:	e9 8a       	std	Y+17, r14	; 0x11

	//set packet identification
	buffer[IP_POS_IDENTIFICATIION+0] = (ip_identification>>8)&0xFF;
    27a4:	80 91 3f 03 	lds	r24, 0x033F
    27a8:	90 91 40 03 	lds	r25, 0x0340
    27ac:	9a 8b       	std	Y+18, r25	; 0x12
	buffer[IP_POS_IDENTIFICATIION+1] = (ip_identification   )&0xFF;
    27ae:	80 91 3f 03 	lds	r24, 0x033F
    27b2:	90 91 40 03 	lds	r25, 0x0340
    27b6:	8b 8b       	std	Y+19, r24	; 0x13
	ip_identification++;
    27b8:	80 91 3f 03 	lds	r24, 0x033F
    27bc:	90 91 40 03 	lds	r25, 0x0340
    27c0:	01 96       	adiw	r24, 0x01	; 1
    27c2:	90 93 40 03 	sts	0x0340, r25
    27c6:	80 93 3f 03 	sts	0x033F, r24

	//set dont fragment flags:
	buffer[IP_POS_FRAGMENTATION_FLAGS+0] = 0x40;
    27ca:	80 e4       	ldi	r24, 0x40	; 64
    27cc:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[IP_POS_FRAGMENTATION_FLAGS+1] = 0x00;
    27ce:	1d 8a       	std	Y+21, r1	; 0x15

	//set TTL to 128
	buffer[IP_POS_TTL] = 0x80;
    27d0:	80 e8       	ldi	r24, 0x80	; 128
    27d2:	8e 8b       	std	Y+22, r24	; 0x16

	//set ip packettype to tcp/udp/...
	buffer[IP_POS_IPTYPE] = ip_packettype;
    27d4:	2f 8b       	std	Y+23, r18	; 0x17

	//set dest ip:
	nic_ip_to_buffer(&buffer[IP_POS_DST_IP], *dest_ip);
    27d6:	fb 01       	movw	r30, r22
    27d8:	40 81       	ld	r20, Z
    27da:	51 81       	ldd	r21, Z+1	; 0x01
    27dc:	62 81       	ldd	r22, Z+2	; 0x02
    27de:	73 81       	ldd	r23, Z+3	; 0x03
    27e0:	ce 01       	movw	r24, r28
    27e2:	4e 96       	adiw	r24, 0x1e	; 30
    27e4:	0e 94 8b 14 	call	0x2916	; 0x2916 <nic_ip_to_buffer>

	//set source ip:
	nic_ip_to_buffer(&buffer[IP_POS_SRC_IP], nic_ip);
    27e8:	40 91 ac 05 	lds	r20, 0x05AC
    27ec:	50 91 ad 05 	lds	r21, 0x05AD
    27f0:	60 91 ae 05 	lds	r22, 0x05AE
    27f4:	70 91 af 05 	lds	r23, 0x05AF
    27f8:	ce 01       	movw	r24, r28
    27fa:	4a 96       	adiw	r24, 0x1a	; 26
    27fc:	0e 94 8b 14 	call	0x2916	; 0x2916 <nic_ip_to_buffer>

	//set checksum to zero before running crc calc:
	buffer[IP_POS_CHECKSUM+0] = 0x00;
    2800:	18 8e       	std	Y+24, r1	; 0x18
	buffer[IP_POS_CHECKSUM+1] = 0x00;
    2802:	19 8e       	std	Y+25, r1	; 0x19

	//calculate checksum:
	res16 = nethelp_checksum(&buffer[IP_POS_VERSION], IP_HEADER_LENGTH<<2, 0);
    2804:	c8 01       	movw	r24, r16
    2806:	64 e1       	ldi	r22, 0x14	; 20
    2808:	70 e0       	ldi	r23, 0x00	; 0
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	40 e0       	ldi	r20, 0x00	; 0
    2810:	50 e0       	ldi	r21, 0x00	; 0
    2812:	0e 94 59 13 	call	0x26b2	; 0x26b2 <nethelp_checksum>

	//store checksum:
	buffer[IP_POS_CHECKSUM+0] = (res16>>8)&0xFF;
    2816:	98 8f       	std	Y+24, r25	; 0x18
	buffer[IP_POS_CHECKSUM+1] = res16 & 0xFF;
    2818:	89 8f       	std	Y+25, r24	; 0x19

	//finished

}
    281a:	df 91       	pop	r29
    281c:	cf 91       	pop	r28
    281e:	1f 91       	pop	r17
    2820:	0f 91       	pop	r16
    2822:	ff 90       	pop	r15
    2824:	ef 90       	pop	r14
    2826:	08 95       	ret

00002828 <nic_set_mac>:
 * Kleiner Hack, damit vor dem Paket Platz für ein rfm Header ist
 */
char nic_buffer[NIC_BUFFERSIZE];


void nic_set_mac(char* mac) {
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < 6; i++) {
		nic_mac[i] = mac[i];
    282c:	f9 01       	movw	r30, r18
    282e:	ea 55       	subi	r30, 0x5A	; 90
    2830:	fa 4f       	sbci	r31, 0xFA	; 250
    2832:	dc 01       	movw	r26, r24
    2834:	a2 0f       	add	r26, r18
    2836:	b3 1f       	adc	r27, r19
    2838:	4c 91       	ld	r20, X
    283a:	40 83       	st	Z, r20
    283c:	2f 5f       	subi	r18, 0xFF	; 255
    283e:	3f 4f       	sbci	r19, 0xFF	; 255
 */
char nic_buffer[NIC_BUFFERSIZE];


void nic_set_mac(char* mac) {
	for (uint8_t i = 0; i < 6; i++) {
    2840:	26 30       	cpi	r18, 0x06	; 6
    2842:	31 05       	cpc	r19, r1
    2844:	99 f7       	brne	.-26     	; 0x282c <nic_set_mac+0x4>
		nic_mac[i] = mac[i];
	}

	nic_setmacfunction(mac);
    2846:	e0 91 99 05 	lds	r30, 0x0599
    284a:	f0 91 9a 05 	lds	r31, 0x059A
    284e:	09 95       	icall
}
    2850:	08 95       	ret

00002852 <nic_set_ip>:

void nic_set_ip(void) {

	nic_ip = NIC_IP;
    2852:	8d ef       	ldi	r24, 0xFD	; 253
    2854:	91 e0       	ldi	r25, 0x01	; 1
    2856:	a0 e0       	ldi	r26, 0x00	; 0
    2858:	ba e0       	ldi	r27, 0x0A	; 10
    285a:	80 93 ac 05 	sts	0x05AC, r24
    285e:	90 93 ad 05 	sts	0x05AD, r25
    2862:	a0 93 ae 05 	sts	0x05AE, r26
    2866:	b0 93 af 05 	sts	0x05AF, r27
	nic_gateway_ip = NIC_GATEWAY;
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	95 e6       	ldi	r25, 0x65	; 101
    286e:	a2 e1       	ldi	r26, 0x12	; 18
    2870:	bc ea       	ldi	r27, 0xAC	; 172
    2872:	80 93 9c 05 	sts	0x059C, r24
    2876:	90 93 9d 05 	sts	0x059D, r25
    287a:	a0 93 9e 05 	sts	0x059E, r26
    287e:	b0 93 9f 05 	sts	0x059F, r27
	nic_netmask_bits = NIC_NETMASK_BITS;
    2882:	88 e1       	ldi	r24, 0x18	; 24
    2884:	80 93 a0 05 	sts	0x05A0, r24
	nic_ip_valid = 1;
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	80 93 a1 05 	sts	0x05A1, r24
}
    288e:	08 95       	ret

00002890 <netmask_bits_to_netmask>:

	arp_init();

}

uint32_t netmask_bits_to_netmask(uint8_t bits) {
    2890:	60 e2       	ldi	r22, 0x20	; 32
    2892:	70 e0       	ldi	r23, 0x00	; 0
    2894:	68 1b       	sub	r22, r24
    2896:	71 09       	sbc	r23, r1
    2898:	2f ef       	ldi	r18, 0xFF	; 255
    289a:	3f ef       	ldi	r19, 0xFF	; 255
    289c:	4f ef       	ldi	r20, 0xFF	; 255
    289e:	5f ef       	ldi	r21, 0xFF	; 255
    28a0:	04 c0       	rjmp	.+8      	; 0x28aa <netmask_bits_to_netmask+0x1a>
    28a2:	22 0f       	add	r18, r18
    28a4:	33 1f       	adc	r19, r19
    28a6:	44 1f       	adc	r20, r20
    28a8:	55 1f       	adc	r21, r21
    28aa:	6a 95       	dec	r22
    28ac:	d2 f7       	brpl	.-12     	; 0x28a2 <netmask_bits_to_netmask+0x12>
	return ~(((uint32_t) 1 << (32 - bits)) - 1);
}
    28ae:	b9 01       	movw	r22, r18
    28b0:	ca 01       	movw	r24, r20
    28b2:	08 95       	ret

000028b4 <nic_send_packet>:

	}
}

void nic_send_packet(char *buffer, unsigned int len) {
	nic_sendfunction(buffer, len);
    28b4:	e0 91 a2 05 	lds	r30, 0x05A2
    28b8:	f0 91 a3 05 	lds	r31, 0x05A3
    28bc:	09 95       	icall
}
    28be:	08 95       	ret

000028c0 <nic_buffer_to_ip>:


uint32_t nic_buffer_to_ip(char *buffer) {
    28c0:	fc 01       	movw	r30, r24
    28c2:	23 81       	ldd	r18, Z+3	; 0x03
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	40 e0       	ldi	r20, 0x00	; 0
    28c8:	50 e0       	ldi	r21, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	a0 e0       	ldi	r26, 0x00	; 0
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	b8 2f       	mov	r27, r24
    28d4:	aa 27       	eor	r26, r26
    28d6:	99 27       	eor	r25, r25
    28d8:	88 27       	eor	r24, r24
    28da:	28 2b       	or	r18, r24
    28dc:	39 2b       	or	r19, r25
    28de:	4a 2b       	or	r20, r26
    28e0:	5b 2b       	or	r21, r27
    28e2:	81 81       	ldd	r24, Z+1	; 0x01
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	a0 e0       	ldi	r26, 0x00	; 0
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
    28ea:	dc 01       	movw	r26, r24
    28ec:	99 27       	eor	r25, r25
    28ee:	88 27       	eor	r24, r24
    28f0:	28 2b       	or	r18, r24
    28f2:	39 2b       	or	r19, r25
    28f4:	4a 2b       	or	r20, r26
    28f6:	5b 2b       	or	r21, r27
    28f8:	82 81       	ldd	r24, Z+2	; 0x02
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	a0 e0       	ldi	r26, 0x00	; 0
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	ba 2f       	mov	r27, r26
    2902:	a9 2f       	mov	r26, r25
    2904:	98 2f       	mov	r25, r24
    2906:	88 27       	eor	r24, r24
    2908:	28 2b       	or	r18, r24
    290a:	39 2b       	or	r19, r25
    290c:	4a 2b       	or	r20, r26
    290e:	5b 2b       	or	r21, r27
	uint32_t res = ((uint32_t) buffer[0] << 24) | ((uint32_t) buffer[1] << 16)
			| ((uint32_t) buffer[2] << 8) | ((uint32_t) buffer[3] << 0);
	return res;
}
    2910:	b9 01       	movw	r22, r18
    2912:	ca 01       	movw	r24, r20
    2914:	08 95       	ret

00002916 <nic_ip_to_buffer>:

void nic_ip_to_buffer(char *buffer, uint32_t ip) {
    2916:	fc 01       	movw	r30, r24
	buffer[0] = ip >> 24 & 0xFF;
    2918:	70 83       	st	Z, r23
	buffer[1] = ip >> 16 & 0xFF;
    291a:	61 83       	std	Z+1, r22	; 0x01
	buffer[2] = ip >> 8 & 0xFF;
    291c:	52 83       	std	Z+2, r21	; 0x02
	buffer[3] = ip >> 0 & 0xFF;
    291e:	43 83       	std	Z+3, r20	; 0x03
}
    2920:	08 95       	ret

00002922 <nic_copy_mac_to_buf>:

void nic_copy_mac_to_buf(char *buffer) {
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < 6; i++) {
		buffer[i] = nic_mac[i];
    2926:	fc 01       	movw	r30, r24
    2928:	e2 0f       	add	r30, r18
    292a:	f3 1f       	adc	r31, r19
    292c:	d9 01       	movw	r26, r18
    292e:	aa 55       	subi	r26, 0x5A	; 90
    2930:	ba 4f       	sbci	r27, 0xFA	; 250
    2932:	4c 91       	ld	r20, X
    2934:	40 83       	st	Z, r20
    2936:	2f 5f       	subi	r18, 0xFF	; 255
    2938:	3f 4f       	sbci	r19, 0xFF	; 255
	buffer[2] = ip >> 8 & 0xFF;
	buffer[3] = ip >> 0 & 0xFF;
}

void nic_copy_mac_to_buf(char *buffer) {
	for (uint8_t i = 0; i < 6; i++) {
    293a:	26 30       	cpi	r18, 0x06	; 6
    293c:	31 05       	cpc	r19, r1
    293e:	99 f7       	brne	.-26     	; 0x2926 <nic_copy_mac_to_buf+0x4>
		buffer[i] = nic_mac[i];
	}
}
    2940:	08 95       	ret

00002942 <nic_doEvents>:
			break;

		}
}

inline void nic_doEvents(char *receivebuffer) {
    2942:	cf 93       	push	r28
    2944:	df 93       	push	r29
    2946:	ec 01       	movw	r28, r24
	//is there a packet ?
	uint16_t len = enc28j60_receive_packet(receivebuffer, NIC_BUFFERSIZE);
    2948:	68 e5       	ldi	r22, 0x58	; 88
    294a:	72 e0       	ldi	r23, 0x02	; 2
    294c:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <enc28j60_receive_packet>
    2950:	bc 01       	movw	r22, r24
	//led(1,0);
	//led(0,0);
	if (nic_up && (len > 0)) {
    2952:	80 91 9b 05 	lds	r24, 0x059B
    2956:	88 23       	and	r24, r24
    2958:	39 f1       	breq	.+78     	; 0x29a8 <nic_doEvents+0x66>
    295a:	61 15       	cp	r22, r1
    295c:	71 05       	cpc	r23, r1
    295e:	21 f1       	breq	.+72     	; 0x29a8 <nic_doEvents+0x66>

	uint16_t type = (buffer[12] << 8) + buffer[13];
	unsigned char ip_protocol;


	switch (type) {
    2960:	9c 85       	ldd	r25, Y+12	; 0x0c
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	2d 85       	ldd	r18, Y+13	; 0x0d
    2966:	82 0f       	add	r24, r18
    2968:	91 1d       	adc	r25, r1
    296a:	28 e0       	ldi	r18, 0x08	; 8
    296c:	80 30       	cpi	r24, 0x00	; 0
    296e:	92 07       	cpc	r25, r18
    2970:	41 f0       	breq	.+16     	; 0x2982 <nic_doEvents+0x40>
    2972:	28 e0       	ldi	r18, 0x08	; 8
    2974:	86 30       	cpi	r24, 0x06	; 6
    2976:	92 07       	cpc	r25, r18
    2978:	b9 f4       	brne	.+46     	; 0x29a8 <nic_doEvents+0x66>

		case (ETHERNET_TYPE_ARP):

			arp_packet_in(buffer, len);
    297a:	ce 01       	movw	r24, r28
    297c:	0e 94 73 12 	call	0x24e6	; 0x24e6 <arp_packet_in>
    2980:	13 c0       	rjmp	.+38     	; 0x29a8 <nic_doEvents+0x66>




			ip_protocol = buffer[IP_POS_IPTYPE];
			switch (ip_protocol) {
    2982:	8f 89       	ldd	r24, Y+23	; 0x17
    2984:	81 30       	cpi	r24, 0x01	; 1
    2986:	29 f0       	breq	.+10     	; 0x2992 <nic_doEvents+0x50>
    2988:	86 30       	cpi	r24, 0x06	; 6
    298a:	59 f0       	breq	.+22     	; 0x29a2 <nic_doEvents+0x60>
    298c:	81 31       	cpi	r24, 0x11	; 17
    298e:	61 f4       	brne	.+24     	; 0x29a8 <nic_doEvents+0x66>
    2990:	04 c0       	rjmp	.+8      	; 0x299a <nic_doEvents+0x58>

				case (IP_PROTOCOL_ICMP):
					icmp_packet_in(buffer, len);
    2992:	ce 01       	movw	r24, r28
    2994:	0e 94 13 13 	call	0x2626	; 0x2626 <icmp_packet_in>
    2998:	07 c0       	rjmp	.+14     	; 0x29a8 <nic_doEvents+0x66>
					break;

				case (IP_PROTOCOL_UDP):

					udp_packet_in(buffer, len);
    299a:	ce 01       	movw	r24, r28
    299c:	0e 94 6d 10 	call	0x20da	; 0x20da <udp_packet_in>
    29a0:	03 c0       	rjmp	.+6      	; 0x29a8 <nic_doEvents+0x66>
					break;

				case (IP_PROTOCOL_TCP):
					tcp_packet_in(buffer, len);
    29a2:	ce 01       	movw	r24, r28
    29a4:	0e 94 d5 10 	call	0x21aa	; 0x21aa <tcp_packet_in>
			nic_process_local(receivebuffer, len);



	}
}
    29a8:	df 91       	pop	r29
    29aa:	cf 91       	pop	r28
    29ac:	08 95       	ret

000029ae <nic_init>:
	nic_netmask_bits = NIC_NETMASK_BITS;
	nic_ip_valid = 1;
}

void nic_init(f_sendpacket_t sfunction, f_receivepacket_t rfunction,
		f_setmac_t smfunction) {
    29ae:	df 93       	push	r29
    29b0:	cf 93       	push	r28
    29b2:	00 d0       	rcall	.+0      	; 0x29b4 <nic_init+0x6>
    29b4:	00 d0       	rcall	.+0      	; 0x29b6 <nic_init+0x8>
    29b6:	00 d0       	rcall	.+0      	; 0x29b8 <nic_init+0xa>
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62

	nic_sendfunction = sfunction;
    29bc:	90 93 a3 05 	sts	0x05A3, r25
    29c0:	80 93 a2 05 	sts	0x05A2, r24
	nic_receivefunction = rfunction;
    29c4:	70 93 a5 05 	sts	0x05A5, r23
    29c8:	60 93 a4 05 	sts	0x05A4, r22
	nic_setmacfunction = smfunction;
    29cc:	50 93 9a 05 	sts	0x059A, r21
    29d0:	40 93 99 05 	sts	0x0599, r20

	char mac[6] = NIC_MAC;
    29d4:	de 01       	movw	r26, r28
    29d6:	11 96       	adiw	r26, 0x01	; 1
    29d8:	eb e7       	ldi	r30, 0x7B	; 123
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	86 e0       	ldi	r24, 0x06	; 6
    29de:	01 90       	ld	r0, Z+
    29e0:	0d 92       	st	X+, r0
    29e2:	81 50       	subi	r24, 0x01	; 1
    29e4:	e1 f7       	brne	.-8      	; 0x29de <nic_init+0x30>
	nic_set_mac(mac);
    29e6:	ce 01       	movw	r24, r28
    29e8:	01 96       	adiw	r24, 0x01	; 1
    29ea:	0e 94 14 14 	call	0x2828	; 0x2828 <nic_set_mac>

#ifdef NIC_CONFIG_STATIC
	nic_set_ip();
	nic_up = 1;
#else
	nic_ip_valid = 0;
    29ee:	10 92 a1 05 	sts	0x05A1, r1
	nic_up = 1;
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	80 93 9b 05 	sts	0x059B, r24
#endif

	arp_init();
    29f8:	0e 94 d6 10 	call	0x21ac	; 0x21ac <arp_init>

}
    29fc:	26 96       	adiw	r28, 0x06	; 6
    29fe:	0f b6       	in	r0, 0x3f	; 63
    2a00:	f8 94       	cli
    2a02:	de bf       	out	0x3e, r29	; 62
    2a04:	0f be       	out	0x3f, r0	; 63
    2a06:	cd bf       	out	0x3d, r28	; 61
    2a08:	cf 91       	pop	r28
    2a0a:	df 91       	pop	r29
    2a0c:	08 95       	ret

00002a0e <soft_spi_init>:
	//MISO = PA4
	//SCK = PA5
	//CS = PA6
	//RESET = PA7

	PORTA |= (1<<5);
    2a0e:	dd 9a       	sbi	0x1b, 5	; 27

	DDRA |= (1<<3) | (1<<5);
    2a10:	8a b3       	in	r24, 0x1a	; 26
    2a12:	88 62       	ori	r24, 0x28	; 40
    2a14:	8a bb       	out	0x1a, r24	; 26
	DDRA &= ~(1<<4);
    2a16:	d4 98       	cbi	0x1a, 4	; 26

	PORTA &= ~(1<<3) & ~(1<<4) & ~(1<<5);
    2a18:	8b b3       	in	r24, 0x1b	; 27
    2a1a:	87 7c       	andi	r24, 0xC7	; 199
    2a1c:	8b bb       	out	0x1b, r24	; 27


}
    2a1e:	08 95       	ret

00002a20 <spi_transfer_byte>:

//read a byte (adds a extra dummy read if (address&0x80)
inline unsigned char spi_transfer_byte(unsigned char data) {
    2a20:	38 2f       	mov	r19, r24
    2a22:	28 e0       	ldi	r18, 0x08	; 8
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a26:	92 e0       	ldi	r25, 0x02	; 2
	unsigned char res = 0x00;

	uint8_t i = 8;

	while(i--) {
    2a28:	1a c0       	rjmp	.+52     	; 0x2a5e <spi_transfer_byte+0x3e>
    2a2a:	49 2f       	mov	r20, r25
    2a2c:	4a 95       	dec	r20
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <spi_transfer_byte+0xc>

		_delay_us(0.5);

		if (data & 0x80) {
    2a30:	37 ff       	sbrs	r19, 7
    2a32:	02 c0       	rjmp	.+4      	; 0x2a38 <spi_transfer_byte+0x18>
			PORTA |= (1<<3);
    2a34:	db 9a       	sbi	0x1b, 3	; 27
    2a36:	01 c0       	rjmp	.+2      	; 0x2a3a <spi_transfer_byte+0x1a>
		} else {
			PORTA &= ~(1<<3);
    2a38:	db 98       	cbi	0x1b, 3	; 27
    2a3a:	49 2f       	mov	r20, r25
    2a3c:	4a 95       	dec	r20
    2a3e:	f1 f7       	brne	.-4      	; 0x2a3c <spi_transfer_byte+0x1c>

		_delay_us(0.5);

		data <<= 1;

		PORTA |= (1<<5);
    2a40:	dd 9a       	sbi	0x1b, 5	; 27
    2a42:	49 2f       	mov	r20, r25
    2a44:	4a 95       	dec	r20
    2a46:	f1 f7       	brne	.-4      	; 0x2a44 <spi_transfer_byte+0x24>

		_delay_us(0.5);

		res <<= 1;
    2a48:	88 0f       	add	r24, r24

		if (PINA & (1<<4)) {
    2a4a:	cc 99       	sbic	0x19, 4	; 25
			res |= 0x01;
    2a4c:	81 60       	ori	r24, 0x01	; 1
			PORTA &= ~(1<<3);
		}

		_delay_us(0.5);

		data <<= 1;
    2a4e:	33 0f       	add	r19, r19
    2a50:	49 2f       	mov	r20, r25
    2a52:	4a 95       	dec	r20
    2a54:	f1 f7       	brne	.-4      	; 0x2a52 <spi_transfer_byte+0x32>
			res |= 0x01;
		}

		_delay_us(0.5);

		PORTA &= ~(1<<5);
    2a56:	dd 98       	cbi	0x1b, 5	; 27
    2a58:	49 2f       	mov	r20, r25
    2a5a:	4a 95       	dec	r20
    2a5c:	f1 f7       	brne	.-4      	; 0x2a5a <spi_transfer_byte+0x3a>
inline unsigned char spi_transfer_byte(unsigned char data) {
	unsigned char res = 0x00;

	uint8_t i = 8;

	while(i--) {
    2a5e:	21 50       	subi	r18, 0x01	; 1
    2a60:	20 f7       	brcc	.-56     	; 0x2a2a <spi_transfer_byte+0xa>
		_delay_us(0.5);
	}


	return res;
}
    2a62:	08 95       	ret

00002a64 <spi_write_word>:

//spi write word
inline void spi_write_word(uint16_t data) {
    2a64:	1f 93       	push	r17
    2a66:	18 2f       	mov	r17, r24
	//unsigned char res = 0;

	spi_transfer_byte(data >> 8);
    2a68:	89 2f       	mov	r24, r25
    2a6a:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(data);
    2a6e:	81 2f       	mov	r24, r17
    2a70:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

}
    2a74:	1f 91       	pop	r17
    2a76:	08 95       	ret

00002a78 <enc28j60_receive_packet>:

	//activate transmission
	enc28j60_spi_write_word(ENC28J60_OP_BFS | ENC28J60_REG_ECON1, (1<<ENC28J60_BIT_TXRTS)|(1<<ENC28J60_BIT_RXEN));
}

unsigned int enc28j60_receive_packet(char *buffer, unsigned int maxlen){
    2a78:	df 92       	push	r13
    2a7a:	ef 92       	push	r14
    2a7c:	ff 92       	push	r15
    2a7e:	0f 93       	push	r16
    2a80:	1f 93       	push	r17
    2a82:	cf 93       	push	r28
    2a84:	df 93       	push	r29
    2a86:	ec 01       	movw	r28, r24
    2a88:	7b 01       	movw	r14, r22


//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
    2a8a:	80 91 b1 05 	lds	r24, 0x05B1
    2a8e:	88 23       	and	r24, r24
    2a90:	b9 f0       	breq	.+46     	; 0x2ac0 <enc28j60_receive_packet+0x48>
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    2a92:	10 92 b1 05 	sts	0x05B1, r1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2a96:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2a98:	8f eb       	ldi	r24, 0xBF	; 191
    2a9a:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2a9e:	83 e0       	ldi	r24, 0x03	; 3
    2aa0:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2aa4:	de 9a       	sbi	0x1b, 6	; 27
		enc28j60_current_bank = (bank & 0x60);

		//clear bank sel bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1)));
		//setup bank selection bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_current_bank>>5);
    2aa6:	00 91 b1 05 	lds	r16, 0x05B1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2aaa:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2aac:	8f e9       	ldi	r24, 0x9F	; 159
    2aae:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2ab2:	80 2f       	mov	r24, r16
    2ab4:	82 95       	swap	r24
    2ab6:	86 95       	lsr	r24
    2ab8:	87 70       	andi	r24, 0x07	; 7
    2aba:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2abe:	de 9a       	sbi	0x1b, 6	; 27

//read a byte (adds a extra dummy read if (address&0x80)
inline unsigned char enc28j60_spi_read_byte(unsigned char op, unsigned char address){
	unsigned char res;
	//select enc28j60
	ENC28J60_CS_LO();
    2ac0:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(op | (address & 0x1F));
    2ac2:	8c e1       	ldi	r24, 0x1C	; 28
    2ac4:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	if (address & 0x80)
		spi_transfer_byte(0x00);

	res = spi_transfer_byte(0x00);
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2ace:	de 9a       	sbi	0x1b, 6	; 27
	unsigned int rxstat;
	unsigned int len;


	//packet in buffer ?
	if ((enc28j60_read_address(ENC28J60_REG_EIR) & (1<<ENC28J60_BIT_PKTIF)) == 0){
    2ad0:	86 fd       	sbrc	r24, 6
    2ad2:	29 c0       	rjmp	.+82     	; 0x2b26 <enc28j60_receive_packet+0xae>


//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
    2ad4:	80 91 b1 05 	lds	r24, 0x05B1
    2ad8:	80 32       	cpi	r24, 0x20	; 32
    2ada:	c1 f0       	breq	.+48     	; 0x2b0c <enc28j60_receive_packet+0x94>
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    2adc:	80 e2       	ldi	r24, 0x20	; 32
    2ade:	80 93 b1 05 	sts	0x05B1, r24
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2ae2:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2ae4:	8f eb       	ldi	r24, 0xBF	; 191
    2ae6:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2aea:	83 e0       	ldi	r24, 0x03	; 3
    2aec:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2af0:	de 9a       	sbi	0x1b, 6	; 27
		enc28j60_current_bank = (bank & 0x60);

		//clear bank sel bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1)));
		//setup bank selection bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_current_bank>>5);
    2af2:	00 91 b1 05 	lds	r16, 0x05B1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2af6:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2af8:	8f e9       	ldi	r24, 0x9F	; 159
    2afa:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2afe:	80 2f       	mov	r24, r16
    2b00:	82 95       	swap	r24
    2b02:	86 95       	lsr	r24
    2b04:	87 70       	andi	r24, 0x07	; 7
    2b06:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2b0a:	de 9a       	sbi	0x1b, 6	; 27

//read a byte (adds a extra dummy read if (address&0x80)
inline unsigned char enc28j60_spi_read_byte(unsigned char op, unsigned char address){
	unsigned char res;
	//select enc28j60
	ENC28J60_CS_LO();
    2b0c:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(op | (address & 0x1F));
    2b0e:	89 e1       	ldi	r24, 0x19	; 25
    2b10:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	if (address & 0x80)
		spi_transfer_byte(0x00);

	res = spi_transfer_byte(0x00);
    2b14:	80 e0       	ldi	r24, 0x00	; 0
    2b16:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2b1a:	de 9a       	sbi	0x1b, 6	; 27
	//packet in buffer ?
	if ((enc28j60_read_address(ENC28J60_REG_EIR) & (1<<ENC28J60_BIT_PKTIF)) == 0){
		//double check!
		//errata says that PKTIF does not work as it should
		//->check packetcount too:
		if (enc28j60_read_address(ENC28J60_REG_EPKTCNT) == 0)
    2b1c:	88 23       	and	r24, r24
    2b1e:	19 f4       	brne	.+6      	; 0x2b26 <enc28j60_receive_packet+0xae>
    2b20:	00 e0       	ldi	r16, 0x00	; 0
    2b22:	10 e0       	ldi	r17, 0x00	; 0
    2b24:	54 c1       	rjmp	.+680    	; 0x2dce <enc28j60_receive_packet+0x356>
			return 0;
	}

	//set read pointer to next packet;
	enc28j60_write_address(ENC28J60_REG_ERDPTL, (enc28j60_next_packet_ptr));
    2b26:	00 91 b2 05 	lds	r16, 0x05B2
    2b2a:	10 91 b3 05 	lds	r17, 0x05B3


//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
    2b2e:	80 91 b1 05 	lds	r24, 0x05B1
    2b32:	88 23       	and	r24, r24
    2b34:	b9 f0       	breq	.+46     	; 0x2b64 <enc28j60_receive_packet+0xec>
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    2b36:	10 92 b1 05 	sts	0x05B1, r1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2b3a:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2b3c:	8f eb       	ldi	r24, 0xBF	; 191
    2b3e:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2b42:	83 e0       	ldi	r24, 0x03	; 3
    2b44:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2b48:	de 9a       	sbi	0x1b, 6	; 27
		enc28j60_current_bank = (bank & 0x60);

		//clear bank sel bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1)));
		//setup bank selection bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_current_bank>>5);
    2b4a:	d0 90 b1 05 	lds	r13, 0x05B1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2b4e:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2b50:	8f e9       	ldi	r24, 0x9F	; 159
    2b52:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2b56:	8d 2d       	mov	r24, r13
    2b58:	82 95       	swap	r24
    2b5a:	86 95       	lsr	r24
    2b5c:	87 70       	andi	r24, 0x07	; 7
    2b5e:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2b62:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2b64:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2b66:	80 e4       	ldi	r24, 0x40	; 64
    2b68:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2b6c:	80 2f       	mov	r24, r16
    2b6e:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2b72:	de 9a       	sbi	0x1b, 6	; 27
	}

	//set read pointer to next packet;
	enc28j60_write_address(ENC28J60_REG_ERDPTL, (enc28j60_next_packet_ptr));
	//enc28j60_spi_write_word((ENC28J60_OP_WRITE_CTRL_REG | (ENC28J60_REG_ERDPTL & 0x1F)), (enc28j60_next_packet_ptr));
	enc28j60_write_address(ENC28J60_REG_ERDPTH, (enc28j60_next_packet_ptr)>>8);
    2b74:	00 91 b2 05 	lds	r16, 0x05B2
    2b78:	10 91 b3 05 	lds	r17, 0x05B3


//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
    2b7c:	80 91 b1 05 	lds	r24, 0x05B1
    2b80:	88 23       	and	r24, r24
    2b82:	b9 f0       	breq	.+46     	; 0x2bb2 <enc28j60_receive_packet+0x13a>
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    2b84:	10 92 b1 05 	sts	0x05B1, r1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2b88:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2b8a:	8f eb       	ldi	r24, 0xBF	; 191
    2b8c:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2b90:	83 e0       	ldi	r24, 0x03	; 3
    2b92:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2b96:	de 9a       	sbi	0x1b, 6	; 27
		enc28j60_current_bank = (bank & 0x60);

		//clear bank sel bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1)));
		//setup bank selection bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_current_bank>>5);
    2b98:	d0 90 b1 05 	lds	r13, 0x05B1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2b9c:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2b9e:	8f e9       	ldi	r24, 0x9F	; 159
    2ba0:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2ba4:	8d 2d       	mov	r24, r13
    2ba6:	82 95       	swap	r24
    2ba8:	86 95       	lsr	r24
    2baa:	87 70       	andi	r24, 0x07	; 7
    2bac:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2bb0:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2bb2:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2bb4:	81 e4       	ldi	r24, 0x41	; 65
    2bb6:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2bba:	81 2f       	mov	r24, r17
    2bbc:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2bc0:	de 9a       	sbi	0x1b, 6	; 27

//read a byte (adds a extra dummy read if (address&0x80)
inline unsigned char enc28j60_spi_read_byte(unsigned char op, unsigned char address){
	unsigned char res;
	//select enc28j60
	ENC28J60_CS_LO();
    2bc2:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(op | (address & 0x1F));
    2bc4:	8a e3       	ldi	r24, 0x3A	; 58
    2bc6:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	if (address & 0x80)
		spi_transfer_byte(0x00);

	res = spi_transfer_byte(0x00);
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2bd0:	de 9a       	sbi	0x1b, 6	; 27
	enc28j60_write_address(ENC28J60_REG_ERDPTH, (enc28j60_next_packet_ptr)>>8);
	//enc28j60_spi_write_word((ENC28J60_OP_WRITE_CTRL_REG | (ENC28J60_REG_ERDPTH & 0x1F)), (enc28j60_next_packet_ptr)>>8);

	//now read the transmit status vector
	//read next packet ptr
	enc28j60_next_packet_ptr  = enc28j60_spi_read_byte(ENC28J60_OP_READ_BUF_MEM, 0);
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	90 93 b3 05 	sts	0x05B3, r25
    2bd8:	80 93 b2 05 	sts	0x05B2, r24
	enc28j60_next_packet_ptr |= enc28j60_spi_read_byte(ENC28J60_OP_READ_BUF_MEM, 0)<<8;
    2bdc:	00 91 b2 05 	lds	r16, 0x05B2
    2be0:	10 91 b3 05 	lds	r17, 0x05B3

//read a byte (adds a extra dummy read if (address&0x80)
inline unsigned char enc28j60_spi_read_byte(unsigned char op, unsigned char address){
	unsigned char res;
	//select enc28j60
	ENC28J60_CS_LO();
    2be4:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(op | (address & 0x1F));
    2be6:	8a e3       	ldi	r24, 0x3A	; 58
    2be8:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	if (address & 0x80)
		spi_transfer_byte(0x00);

	res = spi_transfer_byte(0x00);
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2bf2:	de 9a       	sbi	0x1b, 6	; 27
	//enc28j60_spi_write_word((ENC28J60_OP_WRITE_CTRL_REG | (ENC28J60_REG_ERDPTH & 0x1F)), (enc28j60_next_packet_ptr)>>8);

	//now read the transmit status vector
	//read next packet ptr
	enc28j60_next_packet_ptr  = enc28j60_spi_read_byte(ENC28J60_OP_READ_BUF_MEM, 0);
	enc28j60_next_packet_ptr |= enc28j60_spi_read_byte(ENC28J60_OP_READ_BUF_MEM, 0)<<8;
    2bf4:	38 2f       	mov	r19, r24
    2bf6:	20 e0       	ldi	r18, 0x00	; 0
    2bf8:	02 2b       	or	r16, r18
    2bfa:	13 2b       	or	r17, r19
    2bfc:	10 93 b3 05 	sts	0x05B3, r17
    2c00:	00 93 b2 05 	sts	0x05B2, r16

//read a byte (adds a extra dummy read if (address&0x80)
inline unsigned char enc28j60_spi_read_byte(unsigned char op, unsigned char address){
	unsigned char res;
	//select enc28j60
	ENC28J60_CS_LO();
    2c04:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(op | (address & 0x1F));
    2c06:	8a e3       	ldi	r24, 0x3A	; 58
    2c08:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	if (address & 0x80)
		spi_transfer_byte(0x00);

	res = spi_transfer_byte(0x00);
    2c0c:	80 e0       	ldi	r24, 0x00	; 0
    2c0e:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2c12:	de 9a       	sbi	0x1b, 6	; 27
	enc28j60_next_packet_ptr  = enc28j60_spi_read_byte(ENC28J60_OP_READ_BUF_MEM, 0);
	enc28j60_next_packet_ptr |= enc28j60_spi_read_byte(ENC28J60_OP_READ_BUF_MEM, 0)<<8;


	//read packet length
	len  = enc28j60_spi_read_byte(ENC28J60_OP_READ_BUF_MEM, 0);
    2c14:	08 2f       	mov	r16, r24
    2c16:	10 e0       	ldi	r17, 0x00	; 0

//read a byte (adds a extra dummy read if (address&0x80)
inline unsigned char enc28j60_spi_read_byte(unsigned char op, unsigned char address){
	unsigned char res;
	//select enc28j60
	ENC28J60_CS_LO();
    2c18:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(op | (address & 0x1F));
    2c1a:	8a e3       	ldi	r24, 0x3A	; 58
    2c1c:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	if (address & 0x80)
		spi_transfer_byte(0x00);

	res = spi_transfer_byte(0x00);
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2c26:	de 9a       	sbi	0x1b, 6	; 27
	enc28j60_next_packet_ptr |= enc28j60_spi_read_byte(ENC28J60_OP_READ_BUF_MEM, 0)<<8;


	//read packet length
	len  = enc28j60_spi_read_byte(ENC28J60_OP_READ_BUF_MEM, 0);
	len |= enc28j60_spi_read_byte(ENC28J60_OP_READ_BUF_MEM, 0)<<8;
    2c28:	38 2f       	mov	r19, r24
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	02 2b       	or	r16, r18
    2c2e:	13 2b       	or	r17, r19

//read a byte (adds a extra dummy read if (address&0x80)
inline unsigned char enc28j60_spi_read_byte(unsigned char op, unsigned char address){
	unsigned char res;
	//select enc28j60
	ENC28J60_CS_LO();
    2c30:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(op | (address & 0x1F));
    2c32:	8a e3       	ldi	r24, 0x3A	; 58
    2c34:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	if (address & 0x80)
		spi_transfer_byte(0x00);

	res = spi_transfer_byte(0x00);
    2c38:	80 e0       	ldi	r24, 0x00	; 0
    2c3a:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2c3e:	de 9a       	sbi	0x1b, 6	; 27

//read a byte (adds a extra dummy read if (address&0x80)
inline unsigned char enc28j60_spi_read_byte(unsigned char op, unsigned char address){
	unsigned char res;
	//select enc28j60
	ENC28J60_CS_LO();
    2c40:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(op | (address & 0x1F));
    2c42:	8a e3       	ldi	r24, 0x3A	; 58
    2c44:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	if (address & 0x80)
		spi_transfer_byte(0x00);

	res = spi_transfer_byte(0x00);
    2c48:	80 e0       	ldi	r24, 0x00	; 0
    2c4a:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2c4e:	de 9a       	sbi	0x1b, 6	; 27
    2c50:	e0 16       	cp	r14, r16
    2c52:	f1 06       	cpc	r15, r17
    2c54:	08 f4       	brcc	.+2      	; 0x2c58 <enc28j60_receive_packet+0x1e0>
    2c56:	87 01       	movw	r16, r14
	//limit read bytecount
	if (len>maxlen)
		len = maxlen;

	//don't read crc
	len -= 4;
    2c58:	04 50       	subi	r16, 0x04	; 4
    2c5a:	10 40       	sbci	r17, 0x00	; 0


//read enc28j60 buffer
inline void enc28j60_read_buffer(char *buffer, unsigned int len){
	//select enc28j60
	ENC28J60_CS_LO();
    2c5c:	de 98       	cbi	0x1b, 6	; 27


	spi_transfer_byte(ENC28J60_OP_READ_BUF_MEM);
    2c5e:	8a e3       	ldi	r24, 0x3A	; 58
    2c60:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
    2c64:	78 01       	movw	r14, r16
    2c66:	07 c0       	rjmp	.+14     	; 0x2c76 <enc28j60_receive_packet+0x1fe>

	//read data & store in buffer:
	while(len--){
		*buffer++ = spi_transfer_byte(0x00);
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
    2c6e:	89 93       	st	Y+, r24
    2c70:	08 94       	sec
    2c72:	e1 08       	sbc	r14, r1
    2c74:	f1 08       	sbc	r15, r1


	spi_transfer_byte(ENC28J60_OP_READ_BUF_MEM);

	//read data & store in buffer:
	while(len--){
    2c76:	e1 14       	cp	r14, r1
    2c78:	f1 04       	cpc	r15, r1
    2c7a:	b1 f7       	brne	.-20     	; 0x2c68 <enc28j60_receive_packet+0x1f0>
		*buffer++ = spi_transfer_byte(0x00);
	}

	//deselect enc28j60
	ENC28J60_CS_HI();
    2c7c:	de 9a       	sbi	0x1b, 6	; 27
	//ERRATA says we need to check packet pointer:

	// (enc28j60_next_packet_ptr - 1 < ENC28J60_RX_BUFFER_START) ||    Überflüssig, weil BUFFER_START = 0
	//===================================================================================================

	if ((enc28j60_next_packet_ptr - 1 > ENC28J60_RX_BUFFER_END)){
    2c7e:	80 91 b2 05 	lds	r24, 0x05B2
    2c82:	90 91 b3 05 	lds	r25, 0x05B3
    2c86:	01 97       	sbiw	r24, 0x01	; 1
    2c88:	2a e1       	ldi	r18, 0x1A	; 26
    2c8a:	80 30       	cpi	r24, 0x00	; 0
    2c8c:	92 07       	cpc	r25, r18
    2c8e:	08 f4       	brcc	.+2      	; 0x2c92 <enc28j60_receive_packet+0x21a>
    2c90:	44 c0       	rjmp	.+136    	; 0x2d1a <enc28j60_receive_packet+0x2a2>


//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
    2c92:	80 91 b1 05 	lds	r24, 0x05B1
    2c96:	88 23       	and	r24, r24
    2c98:	b9 f0       	breq	.+46     	; 0x2cc8 <enc28j60_receive_packet+0x250>
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    2c9a:	10 92 b1 05 	sts	0x05B1, r1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2c9e:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2ca0:	8f eb       	ldi	r24, 0xBF	; 191
    2ca2:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2ca6:	83 e0       	ldi	r24, 0x03	; 3
    2ca8:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2cac:	de 9a       	sbi	0x1b, 6	; 27
		enc28j60_current_bank = (bank & 0x60);

		//clear bank sel bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1)));
		//setup bank selection bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_current_bank>>5);
    2cae:	e0 90 b1 05 	lds	r14, 0x05B1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2cb2:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2cb4:	8f e9       	ldi	r24, 0x9F	; 159
    2cb6:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2cba:	8e 2d       	mov	r24, r14
    2cbc:	82 95       	swap	r24
    2cbe:	86 95       	lsr	r24
    2cc0:	87 70       	andi	r24, 0x07	; 7
    2cc2:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2cc6:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2cc8:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2cca:	8c e4       	ldi	r24, 0x4C	; 76
    2ccc:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2cd0:	8f ef       	ldi	r24, 0xFF	; 255
    2cd2:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2cd6:	de 9a       	sbi	0x1b, 6	; 27


//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
    2cd8:	80 91 b1 05 	lds	r24, 0x05B1
    2cdc:	88 23       	and	r24, r24
    2cde:	b9 f0       	breq	.+46     	; 0x2d0e <enc28j60_receive_packet+0x296>
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    2ce0:	10 92 b1 05 	sts	0x05B1, r1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2ce4:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2ce6:	8f eb       	ldi	r24, 0xBF	; 191
    2ce8:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2cec:	83 e0       	ldi	r24, 0x03	; 3
    2cee:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2cf2:	de 9a       	sbi	0x1b, 6	; 27
		enc28j60_current_bank = (bank & 0x60);

		//clear bank sel bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1)));
		//setup bank selection bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_current_bank>>5);
    2cf4:	e0 90 b1 05 	lds	r14, 0x05B1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2cf8:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2cfa:	8f e9       	ldi	r24, 0x9F	; 159
    2cfc:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2d00:	8e 2d       	mov	r24, r14
    2d02:	82 95       	swap	r24
    2d04:	86 95       	lsr	r24
    2d06:	87 70       	andi	r24, 0x07	; 7
    2d08:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2d0c:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2d0e:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2d10:	8d e4       	ldi	r24, 0x4D	; 77
    2d12:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2d16:	89 e1       	ldi	r24, 0x19	; 25
    2d18:	4f c0       	rjmp	.+158    	; 0x2db8 <enc28j60_receive_packet+0x340>
		enc28j60_write_address(ENC28J60_REG_ERXRDPTL, lo8(ENC28J60_RX_BUFFER_END));
		enc28j60_write_address(ENC28J60_REG_ERXRDPTH, hi8(ENC28J60_RX_BUFFER_END));
		//enc28j60_spi_write_word((ENC28J60_OP_WRITE_CTRL_REG | (ENC28J60_REG_ERXRDPTL & 0x1F)), lo8(ENC28J60_RX_BUFFER_END));
		//enc28j60_spi_write_word((ENC28J60_OP_WRITE_CTRL_REG | (ENC28J60_REG_ERXRDPTH & 0x1F)), hi8(ENC28J60_RX_BUFFER_END));
	}else{
		enc28j60_write_address(ENC28J60_REG_ERXRDPTL, lo8(enc28j60_next_packet_ptr- 1));
    2d1a:	c0 91 b2 05 	lds	r28, 0x05B2
    2d1e:	d0 91 b3 05 	lds	r29, 0x05B3


//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
    2d22:	80 91 b1 05 	lds	r24, 0x05B1
    2d26:	88 23       	and	r24, r24
    2d28:	b9 f0       	breq	.+46     	; 0x2d58 <enc28j60_receive_packet+0x2e0>
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    2d2a:	10 92 b1 05 	sts	0x05B1, r1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2d2e:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2d30:	8f eb       	ldi	r24, 0xBF	; 191
    2d32:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2d36:	83 e0       	ldi	r24, 0x03	; 3
    2d38:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2d3c:	de 9a       	sbi	0x1b, 6	; 27
		enc28j60_current_bank = (bank & 0x60);

		//clear bank sel bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1)));
		//setup bank selection bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_current_bank>>5);
    2d3e:	e0 90 b1 05 	lds	r14, 0x05B1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2d42:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2d44:	8f e9       	ldi	r24, 0x9F	; 159
    2d46:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2d4a:	8e 2d       	mov	r24, r14
    2d4c:	82 95       	swap	r24
    2d4e:	86 95       	lsr	r24
    2d50:	87 70       	andi	r24, 0x07	; 7
    2d52:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2d56:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2d58:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2d5a:	8c e4       	ldi	r24, 0x4C	; 76
    2d5c:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2d60:	9e 01       	movw	r18, r28
    2d62:	21 50       	subi	r18, 0x01	; 1
    2d64:	82 2f       	mov	r24, r18
    2d66:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2d6a:	de 9a       	sbi	0x1b, 6	; 27
		enc28j60_write_address(ENC28J60_REG_ERXRDPTH, hi8(ENC28J60_RX_BUFFER_END));
		//enc28j60_spi_write_word((ENC28J60_OP_WRITE_CTRL_REG | (ENC28J60_REG_ERXRDPTL & 0x1F)), lo8(ENC28J60_RX_BUFFER_END));
		//enc28j60_spi_write_word((ENC28J60_OP_WRITE_CTRL_REG | (ENC28J60_REG_ERXRDPTH & 0x1F)), hi8(ENC28J60_RX_BUFFER_END));
	}else{
		enc28j60_write_address(ENC28J60_REG_ERXRDPTL, lo8(enc28j60_next_packet_ptr- 1));
		enc28j60_write_address(ENC28J60_REG_ERXRDPTH, hi8(enc28j60_next_packet_ptr- 1));
    2d6c:	c0 91 b2 05 	lds	r28, 0x05B2
    2d70:	d0 91 b3 05 	lds	r29, 0x05B3


//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
    2d74:	80 91 b1 05 	lds	r24, 0x05B1
    2d78:	88 23       	and	r24, r24
    2d7a:	b9 f0       	breq	.+46     	; 0x2daa <enc28j60_receive_packet+0x332>
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    2d7c:	10 92 b1 05 	sts	0x05B1, r1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2d80:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2d82:	8f eb       	ldi	r24, 0xBF	; 191
    2d84:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2d88:	83 e0       	ldi	r24, 0x03	; 3
    2d8a:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2d8e:	de 9a       	sbi	0x1b, 6	; 27
		enc28j60_current_bank = (bank & 0x60);

		//clear bank sel bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1)));
		//setup bank selection bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_current_bank>>5);
    2d90:	e0 90 b1 05 	lds	r14, 0x05B1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2d94:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2d96:	8f e9       	ldi	r24, 0x9F	; 159
    2d98:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2d9c:	8e 2d       	mov	r24, r14
    2d9e:	82 95       	swap	r24
    2da0:	86 95       	lsr	r24
    2da2:	87 70       	andi	r24, 0x07	; 7
    2da4:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2da8:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2daa:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2dac:	8d e4       	ldi	r24, 0x4D	; 77
    2dae:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2db2:	21 97       	sbiw	r28, 0x01	; 1
    2db4:	7e 01       	movw	r14, r28
    2db6:	8f 2d       	mov	r24, r15
    2db8:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2dbc:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2dbe:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2dc0:	8e e9       	ldi	r24, 0x9E	; 158
    2dc2:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2dc6:	80 e4       	ldi	r24, 0x40	; 64
    2dc8:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2dcc:	de 9a       	sbi	0x1b, 6	; 27
	//decrement packet counter:
	enc28j60_spi_write_word(ENC28J60_OP_BFS|ENC28J60_REG_ECON2, (1<<ENC28J60_BIT_PKTDEC));

	//return length
	return len;
}
    2dce:	c8 01       	movw	r24, r16
    2dd0:	df 91       	pop	r29
    2dd2:	cf 91       	pop	r28
    2dd4:	1f 91       	pop	r17
    2dd6:	0f 91       	pop	r16
    2dd8:	ff 90       	pop	r15
    2dda:	ef 90       	pop	r14
    2ddc:	df 90       	pop	r13
    2dde:	08 95       	ret

00002de0 <enc28j60_set_mac>:

	//read silicon revision
	enc28j60_revision = enc28j60_read_address(ENC28J60_REG_EREVID);
}

void enc28j60_set_mac(char* mac) {
    2de0:	0f 93       	push	r16
    2de2:	1f 93       	push	r17
    2de4:	cf 93       	push	r28
    2de6:	df 93       	push	r29
    2de8:	ec 01       	movw	r28, r24
	enc28j60_write_address(ENC28J60_REG_MAADR5, mac[0]);
    2dea:	18 81       	ld	r17, Y


//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
    2dec:	80 91 b1 05 	lds	r24, 0x05B1
    2df0:	80 36       	cpi	r24, 0x60	; 96
    2df2:	c1 f0       	breq	.+48     	; 0x2e24 <enc28j60_set_mac+0x44>
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    2df4:	80 e6       	ldi	r24, 0x60	; 96
    2df6:	80 93 b1 05 	sts	0x05B1, r24
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2dfa:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2dfc:	8f eb       	ldi	r24, 0xBF	; 191
    2dfe:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2e02:	83 e0       	ldi	r24, 0x03	; 3
    2e04:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2e08:	de 9a       	sbi	0x1b, 6	; 27
		enc28j60_current_bank = (bank & 0x60);

		//clear bank sel bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1)));
		//setup bank selection bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_current_bank>>5);
    2e0a:	00 91 b1 05 	lds	r16, 0x05B1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2e0e:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2e10:	8f e9       	ldi	r24, 0x9F	; 159
    2e12:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2e16:	80 2f       	mov	r24, r16
    2e18:	82 95       	swap	r24
    2e1a:	86 95       	lsr	r24
    2e1c:	87 70       	andi	r24, 0x07	; 7
    2e1e:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2e22:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2e24:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2e26:	84 e4       	ldi	r24, 0x44	; 68
    2e28:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2e2c:	81 2f       	mov	r24, r17
    2e2e:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2e32:	de 9a       	sbi	0x1b, 6	; 27
	enc28j60_revision = enc28j60_read_address(ENC28J60_REG_EREVID);
}

void enc28j60_set_mac(char* mac) {
	enc28j60_write_address(ENC28J60_REG_MAADR5, mac[0]);
	enc28j60_write_address(ENC28J60_REG_MAADR4, mac[1]);
    2e34:	19 81       	ldd	r17, Y+1	; 0x01


//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
    2e36:	80 91 b1 05 	lds	r24, 0x05B1
    2e3a:	80 36       	cpi	r24, 0x60	; 96
    2e3c:	c1 f0       	breq	.+48     	; 0x2e6e <enc28j60_set_mac+0x8e>
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    2e3e:	80 e6       	ldi	r24, 0x60	; 96
    2e40:	80 93 b1 05 	sts	0x05B1, r24
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2e44:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2e46:	8f eb       	ldi	r24, 0xBF	; 191
    2e48:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2e4c:	83 e0       	ldi	r24, 0x03	; 3
    2e4e:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2e52:	de 9a       	sbi	0x1b, 6	; 27
		enc28j60_current_bank = (bank & 0x60);

		//clear bank sel bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1)));
		//setup bank selection bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_current_bank>>5);
    2e54:	00 91 b1 05 	lds	r16, 0x05B1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2e58:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2e5a:	8f e9       	ldi	r24, 0x9F	; 159
    2e5c:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2e60:	80 2f       	mov	r24, r16
    2e62:	82 95       	swap	r24
    2e64:	86 95       	lsr	r24
    2e66:	87 70       	andi	r24, 0x07	; 7
    2e68:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2e6c:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2e6e:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2e70:	85 e4       	ldi	r24, 0x45	; 69
    2e72:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2e76:	81 2f       	mov	r24, r17
    2e78:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2e7c:	de 9a       	sbi	0x1b, 6	; 27
}

void enc28j60_set_mac(char* mac) {
	enc28j60_write_address(ENC28J60_REG_MAADR5, mac[0]);
	enc28j60_write_address(ENC28J60_REG_MAADR4, mac[1]);
	enc28j60_write_address(ENC28J60_REG_MAADR3, mac[2]);
    2e7e:	1a 81       	ldd	r17, Y+2	; 0x02


//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
    2e80:	80 91 b1 05 	lds	r24, 0x05B1
    2e84:	80 36       	cpi	r24, 0x60	; 96
    2e86:	c1 f0       	breq	.+48     	; 0x2eb8 <enc28j60_set_mac+0xd8>
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    2e88:	80 e6       	ldi	r24, 0x60	; 96
    2e8a:	80 93 b1 05 	sts	0x05B1, r24
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2e8e:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2e90:	8f eb       	ldi	r24, 0xBF	; 191
    2e92:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2e96:	83 e0       	ldi	r24, 0x03	; 3
    2e98:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2e9c:	de 9a       	sbi	0x1b, 6	; 27
		enc28j60_current_bank = (bank & 0x60);

		//clear bank sel bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1)));
		//setup bank selection bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_current_bank>>5);
    2e9e:	00 91 b1 05 	lds	r16, 0x05B1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2ea2:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2ea4:	8f e9       	ldi	r24, 0x9F	; 159
    2ea6:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2eaa:	80 2f       	mov	r24, r16
    2eac:	82 95       	swap	r24
    2eae:	86 95       	lsr	r24
    2eb0:	87 70       	andi	r24, 0x07	; 7
    2eb2:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2eb6:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2eb8:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2eba:	82 e4       	ldi	r24, 0x42	; 66
    2ebc:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2ec0:	81 2f       	mov	r24, r17
    2ec2:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2ec6:	de 9a       	sbi	0x1b, 6	; 27

void enc28j60_set_mac(char* mac) {
	enc28j60_write_address(ENC28J60_REG_MAADR5, mac[0]);
	enc28j60_write_address(ENC28J60_REG_MAADR4, mac[1]);
	enc28j60_write_address(ENC28J60_REG_MAADR3, mac[2]);
	enc28j60_write_address(ENC28J60_REG_MAADR2, mac[3]);
    2ec8:	1b 81       	ldd	r17, Y+3	; 0x03


//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
    2eca:	80 91 b1 05 	lds	r24, 0x05B1
    2ece:	80 36       	cpi	r24, 0x60	; 96
    2ed0:	c1 f0       	breq	.+48     	; 0x2f02 <enc28j60_set_mac+0x122>
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    2ed2:	80 e6       	ldi	r24, 0x60	; 96
    2ed4:	80 93 b1 05 	sts	0x05B1, r24
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2ed8:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2eda:	8f eb       	ldi	r24, 0xBF	; 191
    2edc:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2ee0:	83 e0       	ldi	r24, 0x03	; 3
    2ee2:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2ee6:	de 9a       	sbi	0x1b, 6	; 27
		enc28j60_current_bank = (bank & 0x60);

		//clear bank sel bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1)));
		//setup bank selection bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_current_bank>>5);
    2ee8:	00 91 b1 05 	lds	r16, 0x05B1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2eec:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2eee:	8f e9       	ldi	r24, 0x9F	; 159
    2ef0:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2ef4:	80 2f       	mov	r24, r16
    2ef6:	82 95       	swap	r24
    2ef8:	86 95       	lsr	r24
    2efa:	87 70       	andi	r24, 0x07	; 7
    2efc:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2f00:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2f02:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2f04:	83 e4       	ldi	r24, 0x43	; 67
    2f06:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2f0a:	81 2f       	mov	r24, r17
    2f0c:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2f10:	de 9a       	sbi	0x1b, 6	; 27
void enc28j60_set_mac(char* mac) {
	enc28j60_write_address(ENC28J60_REG_MAADR5, mac[0]);
	enc28j60_write_address(ENC28J60_REG_MAADR4, mac[1]);
	enc28j60_write_address(ENC28J60_REG_MAADR3, mac[2]);
	enc28j60_write_address(ENC28J60_REG_MAADR2, mac[3]);
	enc28j60_write_address(ENC28J60_REG_MAADR1, mac[4]);
    2f12:	1c 81       	ldd	r17, Y+4	; 0x04


//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
    2f14:	80 91 b1 05 	lds	r24, 0x05B1
    2f18:	80 36       	cpi	r24, 0x60	; 96
    2f1a:	c1 f0       	breq	.+48     	; 0x2f4c <enc28j60_set_mac+0x16c>
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    2f1c:	80 e6       	ldi	r24, 0x60	; 96
    2f1e:	80 93 b1 05 	sts	0x05B1, r24
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2f22:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2f24:	8f eb       	ldi	r24, 0xBF	; 191
    2f26:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2f2a:	83 e0       	ldi	r24, 0x03	; 3
    2f2c:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2f30:	de 9a       	sbi	0x1b, 6	; 27
		enc28j60_current_bank = (bank & 0x60);

		//clear bank sel bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1)));
		//setup bank selection bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_current_bank>>5);
    2f32:	00 91 b1 05 	lds	r16, 0x05B1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2f36:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2f38:	8f e9       	ldi	r24, 0x9F	; 159
    2f3a:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2f3e:	80 2f       	mov	r24, r16
    2f40:	82 95       	swap	r24
    2f42:	86 95       	lsr	r24
    2f44:	87 70       	andi	r24, 0x07	; 7
    2f46:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2f4a:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2f4c:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2f4e:	80 e4       	ldi	r24, 0x40	; 64
    2f50:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2f54:	81 2f       	mov	r24, r17
    2f56:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2f5a:	de 9a       	sbi	0x1b, 6	; 27
	enc28j60_write_address(ENC28J60_REG_MAADR5, mac[0]);
	enc28j60_write_address(ENC28J60_REG_MAADR4, mac[1]);
	enc28j60_write_address(ENC28J60_REG_MAADR3, mac[2]);
	enc28j60_write_address(ENC28J60_REG_MAADR2, mac[3]);
	enc28j60_write_address(ENC28J60_REG_MAADR1, mac[4]);
	enc28j60_write_address(ENC28J60_REG_MAADR0, mac[5]);
    2f5c:	1d 81       	ldd	r17, Y+5	; 0x05


//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
    2f5e:	80 91 b1 05 	lds	r24, 0x05B1
    2f62:	80 36       	cpi	r24, 0x60	; 96
    2f64:	c1 f0       	breq	.+48     	; 0x2f96 <enc28j60_set_mac+0x1b6>
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    2f66:	80 e6       	ldi	r24, 0x60	; 96
    2f68:	80 93 b1 05 	sts	0x05B1, r24
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2f6c:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2f6e:	8f eb       	ldi	r24, 0xBF	; 191
    2f70:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2f74:	83 e0       	ldi	r24, 0x03	; 3
    2f76:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2f7a:	de 9a       	sbi	0x1b, 6	; 27
		enc28j60_current_bank = (bank & 0x60);

		//clear bank sel bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1)));
		//setup bank selection bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_current_bank>>5);
    2f7c:	00 91 b1 05 	lds	r16, 0x05B1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2f80:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2f82:	8f e9       	ldi	r24, 0x9F	; 159
    2f84:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2f88:	80 2f       	mov	r24, r16
    2f8a:	82 95       	swap	r24
    2f8c:	86 95       	lsr	r24
    2f8e:	87 70       	andi	r24, 0x07	; 7
    2f90:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2f94:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2f96:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2f98:	81 e4       	ldi	r24, 0x41	; 65
    2f9a:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2f9e:	81 2f       	mov	r24, r17
    2fa0:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2fa4:	de 9a       	sbi	0x1b, 6	; 27
	enc28j60_write_address(ENC28J60_REG_MAADR4, mac[1]);
	enc28j60_write_address(ENC28J60_REG_MAADR3, mac[2]);
	enc28j60_write_address(ENC28J60_REG_MAADR2, mac[3]);
	enc28j60_write_address(ENC28J60_REG_MAADR1, mac[4]);
	enc28j60_write_address(ENC28J60_REG_MAADR0, mac[5]);
}
    2fa6:	df 91       	pop	r29
    2fa8:	cf 91       	pop	r28
    2faa:	1f 91       	pop	r17
    2fac:	0f 91       	pop	r16
    2fae:	08 95       	ret

00002fb0 <enc28j60_init>:
}



//initialise spi & enc28j60
void enc28j60_init(void) {
    2fb0:	ff 92       	push	r15
    2fb2:	0f 93       	push	r16
    2fb4:	1f 93       	push	r17
    2fb6:	cf 93       	push	r28
    2fb8:	df 93       	push	r29
	unsigned char i;

	//set bank to invalid value -> bank set will update in any case:
	enc28j60_current_bank = 0xFF;
    2fba:	8f ef       	ldi	r24, 0xFF	; 255
    2fbc:	80 93 b1 05 	sts	0x05B1, r24

	//set up port directions:
	ENC28J60_DDR |= (1<<ENC28J60_PIN_CS)|(1<<ENC28J60_PIN_RESET);
    2fc0:	8a b3       	in	r24, 0x1a	; 26
    2fc2:	80 6c       	ori	r24, 0xC0	; 192
    2fc4:	8a bb       	out	0x1a, r24	; 26

	//deselect enc28j60:
	ENC28J60_CS_HI();
    2fc6:	de 9a       	sbi	0x1b, 6	; 27

	//reset enc28j60:
	ENC28J60_RESET_LO();
    2fc8:	df 98       	cbi	0x1b, 7	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fca:	80 e4       	ldi	r24, 0x40	; 64
    2fcc:	9c e9       	ldi	r25, 0x9C	; 156
    2fce:	fc 01       	movw	r30, r24
    2fd0:	31 97       	sbiw	r30, 0x01	; 1
    2fd2:	f1 f7       	brne	.-4      	; 0x2fd0 <enc28j60_init+0x20>
	_delay_ms(10);
	ENC28J60_RESET_HI();
    2fd4:	df 9a       	sbi	0x1b, 7	; 27
    2fd6:	e0 ef       	ldi	r30, 0xF0	; 240
    2fd8:	f0 e0       	ldi	r31, 0x00	; 0
    2fda:	31 97       	sbiw	r30, 0x01	; 1
    2fdc:	f1 f7       	brne	.-4      	; 0x2fda <enc28j60_init+0x2a>
    2fde:	01 97       	sbiw	r24, 0x01	; 1
    2fe0:	f1 f7       	brne	.-4      	; 0x2fde <enc28j60_init+0x2e>


//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
    2fe2:	80 91 b1 05 	lds	r24, 0x05B1
    2fe6:	88 23       	and	r24, r24
    2fe8:	b9 f0       	breq	.+46     	; 0x3018 <enc28j60_init+0x68>
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    2fea:	10 92 b1 05 	sts	0x05B1, r1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    2fee:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    2ff0:	8f eb       	ldi	r24, 0xBF	; 191
    2ff2:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    2ff6:	83 e0       	ldi	r24, 0x03	; 3
    2ff8:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    2ffc:	de 9a       	sbi	0x1b, 6	; 27
		enc28j60_current_bank = (bank & 0x60);

		//clear bank sel bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1)));
		//setup bank selection bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_current_bank>>5);
    2ffe:	10 91 b1 05 	lds	r17, 0x05B1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    3002:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    3004:	8f e9       	ldi	r24, 0x9F	; 159
    3006:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    300a:	81 2f       	mov	r24, r17
    300c:	82 95       	swap	r24
    300e:	86 95       	lsr	r24
    3010:	87 70       	andi	r24, 0x07	; 7
    3012:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    3016:	de 9a       	sbi	0x1b, 6	; 27

//read a byte (adds a extra dummy read if (address&0x80)
inline unsigned char enc28j60_spi_read_byte(unsigned char op, unsigned char address){
	unsigned char res;
	//select enc28j60
	ENC28J60_CS_LO();
    3018:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(op | (address & 0x1F));
    301a:	8d e1       	ldi	r24, 0x1D	; 29
    301c:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	if (address & 0x80)
		spi_transfer_byte(0x00);

	res = spi_transfer_byte(0x00);
    3020:	80 e0       	ldi	r24, 0x00	; 0
    3022:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    3026:	de 9a       	sbi	0x1b, 6	; 27
	_delay_us(60);
	//workaround for bad chip revisions: wait >1ms (wait 10ms...)
	_delay_ms(10);

	//wait for ready flag
	while(!(enc28j60_read_address(ENC28J60_REG_ESTAT) & 0x01)){};
    3028:	80 ff       	sbrs	r24, 0
    302a:	db cf       	rjmp	.-74     	; 0x2fe2 <enc28j60_init+0x32>


	//set up rx pointer:
	enc28j60_next_packet_ptr = ENC28J60_RX_BUFFER_START;
    302c:	10 92 b3 05 	sts	0x05B3, r1
    3030:	10 92 b2 05 	sts	0x05B2, r1
    3034:	cd e0       	ldi	r28, 0x0D	; 13
    3036:	d3 e0       	ldi	r29, 0x03	; 3
	//enc28j60_next_packet_ptr = 0x0602;

	//copy config from progmem to enc28j60:
	for(i=0; i<2*16; i+=2){
		enc28j60_write_address(pgm_read_byte(&enc28j60_config[i+0]),pgm_read_byte(&enc28j60_config[i+1]));
    3038:	fe 01       	movw	r30, r28
    303a:	14 91       	lpm	r17, Z
    303c:	31 96       	adiw	r30, 0x01	; 1
    303e:	04 91       	lpm	r16, Z


//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
    3040:	20 91 b1 05 	lds	r18, 0x05B1
    3044:	81 2f       	mov	r24, r17
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	80 76       	andi	r24, 0x60	; 96
    304a:	90 70       	andi	r25, 0x00	; 0
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	82 17       	cp	r24, r18
    3050:	93 07       	cpc	r25, r19
    3052:	c9 f0       	breq	.+50     	; 0x3086 <enc28j60_init+0xd6>
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    3054:	81 2f       	mov	r24, r17
    3056:	80 76       	andi	r24, 0x60	; 96
    3058:	80 93 b1 05 	sts	0x05B1, r24
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    305c:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    305e:	8f eb       	ldi	r24, 0xBF	; 191
    3060:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    3064:	83 e0       	ldi	r24, 0x03	; 3
    3066:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    306a:	de 9a       	sbi	0x1b, 6	; 27
		enc28j60_current_bank = (bank & 0x60);

		//clear bank sel bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1)));
		//setup bank selection bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_current_bank>>5);
    306c:	f0 90 b1 05 	lds	r15, 0x05B1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    3070:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    3072:	8f e9       	ldi	r24, 0x9F	; 159
    3074:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    3078:	8f 2d       	mov	r24, r15
    307a:	82 95       	swap	r24
    307c:	86 95       	lsr	r24
    307e:	87 70       	andi	r24, 0x07	; 7
    3080:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    3084:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    3086:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    3088:	81 2f       	mov	r24, r17
    308a:	8f 71       	andi	r24, 0x1F	; 31
    308c:	80 64       	ori	r24, 0x40	; 64
    308e:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    3092:	80 2f       	mov	r24, r16
    3094:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    3098:	de 9a       	sbi	0x1b, 6	; 27
    309a:	22 96       	adiw	r28, 0x02	; 2
	//set up rx pointer:
	enc28j60_next_packet_ptr = ENC28J60_RX_BUFFER_START;
	//enc28j60_next_packet_ptr = 0x0602;

	//copy config from progmem to enc28j60:
	for(i=0; i<2*16; i+=2){
    309c:	f3 e0       	ldi	r31, 0x03	; 3
    309e:	cd 32       	cpi	r28, 0x2D	; 45
    30a0:	df 07       	cpc	r29, r31
    30a2:	09 f0       	breq	.+2      	; 0x30a6 <enc28j60_init+0xf6>
    30a4:	c9 cf       	rjmp	.-110    	; 0x3038 <enc28j60_init+0x88>


//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
    30a6:	80 91 b1 05 	lds	r24, 0x05B1
    30aa:	80 34       	cpi	r24, 0x40	; 64
    30ac:	c1 f0       	breq	.+48     	; 0x30de <enc28j60_init+0x12e>
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    30ae:	80 e4       	ldi	r24, 0x40	; 64
    30b0:	80 93 b1 05 	sts	0x05B1, r24
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    30b4:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    30b6:	8f eb       	ldi	r24, 0xBF	; 191
    30b8:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    30bc:	83 e0       	ldi	r24, 0x03	; 3
    30be:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    30c2:	de 9a       	sbi	0x1b, 6	; 27
		enc28j60_current_bank = (bank & 0x60);

		//clear bank sel bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1)));
		//setup bank selection bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_current_bank>>5);
    30c4:	10 91 b1 05 	lds	r17, 0x05B1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    30c8:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    30ca:	8f e9       	ldi	r24, 0x9F	; 159
    30cc:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    30d0:	81 2f       	mov	r24, r17
    30d2:	82 95       	swap	r24
    30d4:	86 95       	lsr	r24
    30d6:	87 70       	andi	r24, 0x07	; 7
    30d8:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    30dc:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    30de:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    30e0:	84 e5       	ldi	r24, 0x54	; 84
    30e2:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    30e6:	80 e1       	ldi	r24, 0x10	; 16
    30e8:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    30ec:	de 9a       	sbi	0x1b, 6	; 27


//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
    30ee:	80 91 b1 05 	lds	r24, 0x05B1
    30f2:	80 34       	cpi	r24, 0x40	; 64
    30f4:	c1 f0       	breq	.+48     	; 0x3126 <enc28j60_init+0x176>
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    30f6:	80 e4       	ldi	r24, 0x40	; 64
    30f8:	80 93 b1 05 	sts	0x05B1, r24
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    30fc:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    30fe:	8f eb       	ldi	r24, 0xBF	; 191
    3100:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    3104:	83 e0       	ldi	r24, 0x03	; 3
    3106:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    310a:	de 9a       	sbi	0x1b, 6	; 27
		enc28j60_current_bank = (bank & 0x60);

		//clear bank sel bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1)));
		//setup bank selection bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_current_bank>>5);
    310c:	10 91 b1 05 	lds	r17, 0x05B1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    3110:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    3112:	8f e9       	ldi	r24, 0x9F	; 159
    3114:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    3118:	81 2f       	mov	r24, r17
    311a:	82 95       	swap	r24
    311c:	86 95       	lsr	r24
    311e:	87 70       	andi	r24, 0x07	; 7
    3120:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    3124:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    3126:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    3128:	86 e5       	ldi	r24, 0x56	; 86
    312a:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    312e:	80 e0       	ldi	r24, 0x00	; 0
    3130:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    3134:	de 9a       	sbi	0x1b, 6	; 27


//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
    3136:	80 91 b1 05 	lds	r24, 0x05B1
    313a:	80 34       	cpi	r24, 0x40	; 64
    313c:	c1 f0       	breq	.+48     	; 0x316e <enc28j60_init+0x1be>
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    313e:	80 e4       	ldi	r24, 0x40	; 64
    3140:	80 93 b1 05 	sts	0x05B1, r24
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    3144:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    3146:	8f eb       	ldi	r24, 0xBF	; 191
    3148:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    314c:	83 e0       	ldi	r24, 0x03	; 3
    314e:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    3152:	de 9a       	sbi	0x1b, 6	; 27
		enc28j60_current_bank = (bank & 0x60);

		//clear bank sel bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1)));
		//setup bank selection bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_current_bank>>5);
    3154:	10 91 b1 05 	lds	r17, 0x05B1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    3158:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    315a:	8f e9       	ldi	r24, 0x9F	; 159
    315c:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    3160:	81 2f       	mov	r24, r17
    3162:	82 95       	swap	r24
    3164:	86 95       	lsr	r24
    3166:	87 70       	andi	r24, 0x07	; 7
    3168:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    316c:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    316e:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    3170:	87 e5       	ldi	r24, 0x57	; 87
    3172:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    3176:	81 e0       	ldi	r24, 0x01	; 1
    3178:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    317c:	de 9a       	sbi	0x1b, 6	; 27
//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    317e:	10 e6       	ldi	r17, 0x60	; 96


//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
    3180:	80 91 b1 05 	lds	r24, 0x05B1
    3184:	80 36       	cpi	r24, 0x60	; 96
    3186:	b9 f0       	breq	.+46     	; 0x31b6 <enc28j60_init+0x206>
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    3188:	10 93 b1 05 	sts	0x05B1, r17
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    318c:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    318e:	8f eb       	ldi	r24, 0xBF	; 191
    3190:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    3194:	83 e0       	ldi	r24, 0x03	; 3
    3196:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    319a:	de 9a       	sbi	0x1b, 6	; 27
		enc28j60_current_bank = (bank & 0x60);

		//clear bank sel bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1)));
		//setup bank selection bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_current_bank>>5);
    319c:	00 91 b1 05 	lds	r16, 0x05B1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    31a0:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    31a2:	8f e9       	ldi	r24, 0x9F	; 159
    31a4:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    31a8:	80 2f       	mov	r24, r16
    31aa:	82 95       	swap	r24
    31ac:	86 95       	lsr	r24
    31ae:	87 70       	andi	r24, 0x07	; 7
    31b0:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    31b4:	de 9a       	sbi	0x1b, 6	; 27

//read a byte (adds a extra dummy read if (address&0x80)
inline unsigned char enc28j60_spi_read_byte(unsigned char op, unsigned char address){
	unsigned char res;
	//select enc28j60
	ENC28J60_CS_LO();
    31b6:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(op | (address & 0x1F));
    31b8:	8a e0       	ldi	r24, 0x0A	; 10
    31ba:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	if (address & 0x80)
		spi_transfer_byte(0x00);
    31be:	80 e0       	ldi	r24, 0x00	; 0
    31c0:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	res = spi_transfer_byte(0x00);
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    31ca:	de 9a       	sbi	0x1b, 6	; 27
	enc28j60_write_address(ENC28J60_REG_MIWRL, data&0xFF);
	enc28j60_write_address(ENC28J60_REG_MIWRH, data>>8  );


	//wait until PHY write finished:
	while(enc28j60_read_address(ENC28J60_REG_MISTAT) & (1<<ENC28J60_BIT_MISTAT_BUSY)){}
    31cc:	80 fd       	sbrc	r24, 0
    31ce:	d8 cf       	rjmp	.-80     	; 0x3180 <enc28j60_init+0x1d0>


//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
    31d0:	80 91 b1 05 	lds	r24, 0x05B1
    31d4:	88 23       	and	r24, r24
    31d6:	b9 f0       	breq	.+46     	; 0x3206 <enc28j60_init+0x256>
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    31d8:	10 92 b1 05 	sts	0x05B1, r1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    31dc:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    31de:	8f eb       	ldi	r24, 0xBF	; 191
    31e0:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    31e4:	83 e0       	ldi	r24, 0x03	; 3
    31e6:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    31ea:	de 9a       	sbi	0x1b, 6	; 27
		enc28j60_current_bank = (bank & 0x60);

		//clear bank sel bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1)));
		//setup bank selection bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_current_bank>>5);
    31ec:	10 91 b1 05 	lds	r17, 0x05B1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    31f0:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    31f2:	8f e9       	ldi	r24, 0x9F	; 159
    31f4:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    31f8:	81 2f       	mov	r24, r17
    31fa:	82 95       	swap	r24
    31fc:	86 95       	lsr	r24
    31fe:	87 70       	andi	r24, 0x07	; 7
    3200:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    3204:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    3206:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    3208:	8b e5       	ldi	r24, 0x5B	; 91
    320a:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    320e:	80 ec       	ldi	r24, 0xC0	; 192
    3210:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    3214:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    3216:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    3218:	8f e9       	ldi	r24, 0x9F	; 159
    321a:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    321e:	84 e0       	ldi	r24, 0x04	; 4
    3220:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    3224:	de 9a       	sbi	0x1b, 6	; 27


//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
    3226:	80 91 b1 05 	lds	r24, 0x05B1
    322a:	80 34       	cpi	r24, 0x40	; 64
    322c:	c1 f0       	breq	.+48     	; 0x325e <enc28j60_init+0x2ae>
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    322e:	80 e4       	ldi	r24, 0x40	; 64
    3230:	80 93 b1 05 	sts	0x05B1, r24
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    3234:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    3236:	8f eb       	ldi	r24, 0xBF	; 191
    3238:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    323c:	83 e0       	ldi	r24, 0x03	; 3
    323e:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    3242:	de 9a       	sbi	0x1b, 6	; 27
		enc28j60_current_bank = (bank & 0x60);

		//clear bank sel bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1)));
		//setup bank selection bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_current_bank>>5);
    3244:	10 91 b1 05 	lds	r17, 0x05B1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    3248:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    324a:	8f e9       	ldi	r24, 0x9F	; 159
    324c:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    3250:	81 2f       	mov	r24, r17
    3252:	82 95       	swap	r24
    3254:	86 95       	lsr	r24
    3256:	87 70       	andi	r24, 0x07	; 7
    3258:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    325c:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    325e:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    3260:	84 e5       	ldi	r24, 0x54	; 84
    3262:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    3266:	84 e1       	ldi	r24, 0x14	; 20
    3268:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    326c:	de 9a       	sbi	0x1b, 6	; 27


//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
    326e:	80 91 b1 05 	lds	r24, 0x05B1
    3272:	80 34       	cpi	r24, 0x40	; 64
    3274:	c1 f0       	breq	.+48     	; 0x32a6 <enc28j60_init+0x2f6>
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    3276:	80 e4       	ldi	r24, 0x40	; 64
    3278:	80 93 b1 05 	sts	0x05B1, r24
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    327c:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    327e:	8f eb       	ldi	r24, 0xBF	; 191
    3280:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    3284:	83 e0       	ldi	r24, 0x03	; 3
    3286:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    328a:	de 9a       	sbi	0x1b, 6	; 27
		enc28j60_current_bank = (bank & 0x60);

		//clear bank sel bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1)));
		//setup bank selection bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_current_bank>>5);
    328c:	10 91 b1 05 	lds	r17, 0x05B1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    3290:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    3292:	8f e9       	ldi	r24, 0x9F	; 159
    3294:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    3298:	81 2f       	mov	r24, r17
    329a:	82 95       	swap	r24
    329c:	86 95       	lsr	r24
    329e:	87 70       	andi	r24, 0x07	; 7
    32a0:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    32a4:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    32a6:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    32a8:	86 e5       	ldi	r24, 0x56	; 86
    32aa:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    32ae:	82 e7       	ldi	r24, 0x72	; 114
    32b0:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    32b4:	de 9a       	sbi	0x1b, 6	; 27


//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
    32b6:	80 91 b1 05 	lds	r24, 0x05B1
    32ba:	80 34       	cpi	r24, 0x40	; 64
    32bc:	c1 f0       	breq	.+48     	; 0x32ee <enc28j60_init+0x33e>
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    32be:	80 e4       	ldi	r24, 0x40	; 64
    32c0:	80 93 b1 05 	sts	0x05B1, r24
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    32c4:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    32c6:	8f eb       	ldi	r24, 0xBF	; 191
    32c8:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    32cc:	83 e0       	ldi	r24, 0x03	; 3
    32ce:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    32d2:	de 9a       	sbi	0x1b, 6	; 27
		enc28j60_current_bank = (bank & 0x60);

		//clear bank sel bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1)));
		//setup bank selection bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_current_bank>>5);
    32d4:	10 91 b1 05 	lds	r17, 0x05B1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    32d8:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    32da:	8f e9       	ldi	r24, 0x9F	; 159
    32dc:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    32e0:	81 2f       	mov	r24, r17
    32e2:	82 95       	swap	r24
    32e4:	86 95       	lsr	r24
    32e6:	87 70       	andi	r24, 0x07	; 7
    32e8:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    32ec:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    32ee:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    32f0:	87 e5       	ldi	r24, 0x57	; 87
    32f2:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    32f6:	84 e0       	ldi	r24, 0x04	; 4
    32f8:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    32fc:	de 9a       	sbi	0x1b, 6	; 27
//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    32fe:	10 e6       	ldi	r17, 0x60	; 96


//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
    3300:	80 91 b1 05 	lds	r24, 0x05B1
    3304:	80 36       	cpi	r24, 0x60	; 96
    3306:	b9 f0       	breq	.+46     	; 0x3336 <enc28j60_init+0x386>
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    3308:	10 93 b1 05 	sts	0x05B1, r17
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    330c:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    330e:	8f eb       	ldi	r24, 0xBF	; 191
    3310:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    3314:	83 e0       	ldi	r24, 0x03	; 3
    3316:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    331a:	de 9a       	sbi	0x1b, 6	; 27
		enc28j60_current_bank = (bank & 0x60);

		//clear bank sel bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1)));
		//setup bank selection bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_current_bank>>5);
    331c:	00 91 b1 05 	lds	r16, 0x05B1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    3320:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    3322:	8f e9       	ldi	r24, 0x9F	; 159
    3324:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    3328:	80 2f       	mov	r24, r16
    332a:	82 95       	swap	r24
    332c:	86 95       	lsr	r24
    332e:	87 70       	andi	r24, 0x07	; 7
    3330:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    3334:	de 9a       	sbi	0x1b, 6	; 27

//read a byte (adds a extra dummy read if (address&0x80)
inline unsigned char enc28j60_spi_read_byte(unsigned char op, unsigned char address){
	unsigned char res;
	//select enc28j60
	ENC28J60_CS_LO();
    3336:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(op | (address & 0x1F));
    3338:	8a e0       	ldi	r24, 0x0A	; 10
    333a:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	if (address & 0x80)
		spi_transfer_byte(0x00);
    333e:	80 e0       	ldi	r24, 0x00	; 0
    3340:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	res = spi_transfer_byte(0x00);
    3344:	80 e0       	ldi	r24, 0x00	; 0
    3346:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    334a:	de 9a       	sbi	0x1b, 6	; 27
	enc28j60_write_address(ENC28J60_REG_MIWRL, data&0xFF);
	enc28j60_write_address(ENC28J60_REG_MIWRH, data>>8  );


	//wait until PHY write finished:
	while(enc28j60_read_address(ENC28J60_REG_MISTAT) & (1<<ENC28J60_BIT_MISTAT_BUSY)){}
    334c:	80 fd       	sbrc	r24, 0
    334e:	d8 cf       	rjmp	.-80     	; 0x3300 <enc28j60_init+0x350>


//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
    3350:	80 91 b1 05 	lds	r24, 0x05B1
    3354:	80 36       	cpi	r24, 0x60	; 96
    3356:	c1 f0       	breq	.+48     	; 0x3388 <enc28j60_init+0x3d8>
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    3358:	80 e6       	ldi	r24, 0x60	; 96
    335a:	80 93 b1 05 	sts	0x05B1, r24
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    335e:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    3360:	8f eb       	ldi	r24, 0xBF	; 191
    3362:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    3366:	83 e0       	ldi	r24, 0x03	; 3
    3368:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    336c:	de 9a       	sbi	0x1b, 6	; 27
		enc28j60_current_bank = (bank & 0x60);

		//clear bank sel bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1)));
		//setup bank selection bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_current_bank>>5);
    336e:	10 91 b1 05 	lds	r17, 0x05B1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    3372:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    3374:	8f e9       	ldi	r24, 0x9F	; 159
    3376:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    337a:	81 2f       	mov	r24, r17
    337c:	82 95       	swap	r24
    337e:	86 95       	lsr	r24
    3380:	87 70       	andi	r24, 0x07	; 7
    3382:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    3386:	de 9a       	sbi	0x1b, 6	; 27

//read a byte (adds a extra dummy read if (address&0x80)
inline unsigned char enc28j60_spi_read_byte(unsigned char op, unsigned char address){
	unsigned char res;
	//select enc28j60
	ENC28J60_CS_LO();
    3388:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(op | (address & 0x1F));
    338a:	82 e1       	ldi	r24, 0x12	; 18
    338c:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	if (address & 0x80)
		spi_transfer_byte(0x00);

	res = spi_transfer_byte(0x00);
    3390:	80 e0       	ldi	r24, 0x00	; 0
    3392:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    3396:	de 9a       	sbi	0x1b, 6	; 27

	//set up leds: LEDA: link status, LEDB: RX&TX activity
	enc28j60_write_phy(ENC28J60_PHY_PHLCON, 0x0472);

	//read silicon revision
	enc28j60_revision = enc28j60_read_address(ENC28J60_REG_EREVID);
    3398:	80 93 b0 05 	sts	0x05B0, r24
}
    339c:	df 91       	pop	r29
    339e:	cf 91       	pop	r28
    33a0:	1f 91       	pop	r17
    33a2:	0f 91       	pop	r16
    33a4:	ff 90       	pop	r15
    33a6:	08 95       	ret

000033a8 <enc28j60_send_packet>:
	ENC28J60_CS_HI();
}



void enc28j60_send_packet(char *buffer, unsigned int len){
    33a8:	bf 92       	push	r11
    33aa:	cf 92       	push	r12
    33ac:	df 92       	push	r13
    33ae:	ef 92       	push	r14
    33b0:	ff 92       	push	r15
    33b2:	0f 93       	push	r16
    33b4:	1f 93       	push	r17
    33b6:	cf 93       	push	r28
    33b8:	df 93       	push	r29
    33ba:	ec 01       	movw	r28, r24
    33bc:	8b 01       	movw	r16, r22
    33be:	ee 24       	eor	r14, r14
    33c0:	ff 24       	eor	r15, r15
    33c2:	80 ea       	ldi	r24, 0xA0	; 160
    33c4:	c8 2e       	mov	r12, r24
    33c6:	8f e0       	ldi	r24, 0x0F	; 15
    33c8:	d8 2e       	mov	r13, r24


//switch to given bank (only if necessary)
inline void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
    33ca:	80 91 b1 05 	lds	r24, 0x05B1
    33ce:	88 23       	and	r24, r24
    33d0:	b9 f0       	breq	.+46     	; 0x3400 <enc28j60_send_packet+0x58>
		//store bank info
		enc28j60_current_bank = (bank & 0x60);
    33d2:	10 92 b1 05 	sts	0x05B1, r1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    33d6:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    33d8:	8f eb       	ldi	r24, 0xBF	; 191
    33da:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    33de:	83 e0       	ldi	r24, 0x03	; 3
    33e0:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    33e4:	de 9a       	sbi	0x1b, 6	; 27
		enc28j60_current_bank = (bank & 0x60);

		//clear bank sel bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1)));
		//setup bank selection bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_current_bank>>5);
    33e6:	b0 90 b1 05 	lds	r11, 0x05B1
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    33ea:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    33ec:	8f e9       	ldi	r24, 0x9F	; 159
    33ee:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    33f2:	8b 2d       	mov	r24, r11
    33f4:	82 95       	swap	r24
    33f6:	86 95       	lsr	r24
    33f8:	87 70       	andi	r24, 0x07	; 7
    33fa:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    33fe:	de 9a       	sbi	0x1b, 6	; 27

//read a byte (adds a extra dummy read if (address&0x80)
inline unsigned char enc28j60_spi_read_byte(unsigned char op, unsigned char address){
	unsigned char res;
	//select enc28j60
	ENC28J60_CS_LO();
    3400:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(op | (address & 0x1F));
    3402:	8f e1       	ldi	r24, 0x1F	; 31
    3404:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	if (address & 0x80)
		spi_transfer_byte(0x00);

	res = spi_transfer_byte(0x00);
    3408:	80 e0       	ldi	r24, 0x00	; 0
    340a:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    340e:	de 9a       	sbi	0x1b, 6	; 27
void enc28j60_send_packet(char *buffer, unsigned int len){
	unsigned int tmp;
	//still sending ?
	//wait max 50*10 = 500ms:
	for(tmp=0; tmp<500; tmp++){
		if (!(enc28j60_read_address(ENC28J60_REG_ECON1) & (1<<ENC28J60_BIT_TXRTS))){
    3410:	83 ff       	sbrs	r24, 3
    3412:	0b c0       	rjmp	.+22     	; 0x342a <enc28j60_send_packet+0x82>
    3414:	c6 01       	movw	r24, r12
    3416:	01 97       	sbiw	r24, 0x01	; 1
    3418:	f1 f7       	brne	.-4      	; 0x3416 <enc28j60_send_packet+0x6e>

void enc28j60_send_packet(char *buffer, unsigned int len){
	unsigned int tmp;
	//still sending ?
	//wait max 50*10 = 500ms:
	for(tmp=0; tmp<500; tmp++){
    341a:	08 94       	sec
    341c:	e1 1c       	adc	r14, r1
    341e:	f1 1c       	adc	r15, r1
    3420:	84 ef       	ldi	r24, 0xF4	; 244
    3422:	e8 16       	cp	r14, r24
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	f8 06       	cpc	r15, r24
    3428:	81 f6       	brne	.-96     	; 0x33ca <enc28j60_send_packet+0x22>
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    342a:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    342c:	82 e4       	ldi	r24, 0x42	; 66
    342e:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    3432:	80 e0       	ldi	r24, 0x00	; 0
    3434:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    3438:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    343a:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    343c:	83 e4       	ldi	r24, 0x43	; 67
    343e:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    3442:	8a e1       	ldi	r24, 0x1A	; 26
    3444:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    3448:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    344a:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    344c:	86 e4       	ldi	r24, 0x46	; 70
    344e:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    3452:	80 2f       	mov	r24, r16
    3454:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    3458:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    345a:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    345c:	87 e4       	ldi	r24, 0x47	; 71
    345e:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    3462:	c8 01       	movw	r24, r16
    3464:	80 50       	subi	r24, 0x00	; 0
    3466:	96 4e       	sbci	r25, 0xE6	; 230
    3468:	89 2f       	mov	r24, r25
    346a:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    346e:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    3470:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    3472:	8a e7       	ldi	r24, 0x7A	; 122
    3474:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    3478:	80 e0       	ldi	r24, 0x00	; 0
    347a:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    347e:	de 9a       	sbi	0x1b, 6	; 27
}

//write enc28j60 buffer
inline void enc28j60_write_buffer(char *buffer, unsigned int len){
	//select enc28j60
	ENC28J60_CS_LO();
    3480:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(ENC28J60_OP_WRITE_BUF_MEM);
    3482:	8a e7       	ldi	r24, 0x7A	; 122
    3484:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
    3488:	05 c0       	rjmp	.+10     	; 0x3494 <enc28j60_send_packet+0xec>

	while(len--){
		//send data
		spi_transfer_byte(*buffer++);
    348a:	89 91       	ld	r24, Y+
    348c:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
    3490:	01 50       	subi	r16, 0x01	; 1
    3492:	10 40       	sbci	r17, 0x00	; 0
	//select enc28j60
	ENC28J60_CS_LO();

	spi_transfer_byte(ENC28J60_OP_WRITE_BUF_MEM);

	while(len--){
    3494:	01 15       	cp	r16, r1
    3496:	11 05       	cpc	r17, r1
    3498:	c1 f7       	brne	.-16     	; 0x348a <enc28j60_send_packet+0xe2>
		//send data
		spi_transfer_byte(*buffer++);
	}

	//deselect enc28j60
	ENC28J60_CS_HI();
    349a:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    349c:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    349e:	8f e9       	ldi	r24, 0x9F	; 159
    34a0:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    34a4:	80 e8       	ldi	r24, 0x80	; 128
    34a6:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    34aa:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    34ac:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    34ae:	8f eb       	ldi	r24, 0xBF	; 191
    34b0:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    34b4:	80 e8       	ldi	r24, 0x80	; 128
    34b6:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    34ba:	de 9a       	sbi	0x1b, 6	; 27
//spi write word
inline void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();
    34bc:	de 98       	cbi	0x1b, 6	; 27

	spi_transfer_byte(hi);
    34be:	8f e9       	ldi	r24, 0x9F	; 159
    34c0:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>
	spi_transfer_byte(lo);
    34c4:	8c e0       	ldi	r24, 0x0C	; 12
    34c6:	0e 94 10 15 	call	0x2a20	; 0x2a20 <spi_transfer_byte>

	//deselect enc28j60
	ENC28J60_CS_HI();
    34ca:	de 9a       	sbi	0x1b, 6	; 27
	enc28j60_spi_write_word(ENC28J60_OP_BFS | ENC28J60_REG_ECON1, (1<<ENC28J60_BIT_TXRST));
	enc28j60_spi_write_word(ENC28J60_OP_BFC | ENC28J60_REG_ECON1, (1<<ENC28J60_BIT_TXRST));

	//activate transmission
	enc28j60_spi_write_word(ENC28J60_OP_BFS | ENC28J60_REG_ECON1, (1<<ENC28J60_BIT_TXRTS)|(1<<ENC28J60_BIT_RXEN));
}
    34cc:	df 91       	pop	r29
    34ce:	cf 91       	pop	r28
    34d0:	1f 91       	pop	r17
    34d2:	0f 91       	pop	r16
    34d4:	ff 90       	pop	r15
    34d6:	ef 90       	pop	r14
    34d8:	df 90       	pop	r13
    34da:	cf 90       	pop	r12
    34dc:	bf 90       	pop	r11
    34de:	08 95       	ret

000034e0 <__lshrdi3>:
    34e0:	a0 e1       	ldi	r26, 0x10	; 16
    34e2:	b0 e0       	ldi	r27, 0x00	; 0
    34e4:	e6 e7       	ldi	r30, 0x76	; 118
    34e6:	fa e1       	ldi	r31, 0x1A	; 26
    34e8:	0c 94 90 1b 	jmp	0x3720	; 0x3720 <__prologue_saves__+0x18>
    34ec:	00 23       	and	r16, r16
    34ee:	09 f4       	brne	.+2      	; 0x34f2 <__lshrdi3+0x12>
    34f0:	66 c0       	rjmp	.+204    	; 0x35be <__lshrdi3+0xde>
    34f2:	7e 01       	movw	r14, r28
    34f4:	08 94       	sec
    34f6:	e1 1c       	adc	r14, r1
    34f8:	f1 1c       	adc	r15, r1
    34fa:	a8 e0       	ldi	r26, 0x08	; 8
    34fc:	f7 01       	movw	r30, r14
    34fe:	11 92       	st	Z+, r1
    3500:	aa 95       	dec	r26
    3502:	e9 f7       	brne	.-6      	; 0x34fe <__lshrdi3+0x1e>
    3504:	29 83       	std	Y+1, r18	; 0x01
    3506:	3a 83       	std	Y+2, r19	; 0x02
    3508:	4b 83       	std	Y+3, r20	; 0x03
    350a:	5c 83       	std	Y+4, r21	; 0x04
    350c:	6d 83       	std	Y+5, r22	; 0x05
    350e:	7e 83       	std	Y+6, r23	; 0x06
    3510:	8f 83       	std	Y+7, r24	; 0x07
    3512:	98 87       	std	Y+8, r25	; 0x08
    3514:	80 e2       	ldi	r24, 0x20	; 32
    3516:	80 1b       	sub	r24, r16
    3518:	68 2f       	mov	r22, r24
    351a:	77 27       	eor	r23, r23
    351c:	67 fd       	sbrc	r22, 7
    351e:	70 95       	com	r23
    3520:	2d 81       	ldd	r18, Y+5	; 0x05
    3522:	3e 81       	ldd	r19, Y+6	; 0x06
    3524:	4f 81       	ldd	r20, Y+7	; 0x07
    3526:	58 85       	ldd	r21, Y+8	; 0x08
    3528:	18 16       	cp	r1, r24
    352a:	a4 f0       	brlt	.+40     	; 0x3554 <__lshrdi3+0x74>
    352c:	1d 86       	std	Y+13, r1	; 0x0d
    352e:	1e 86       	std	Y+14, r1	; 0x0e
    3530:	1f 86       	std	Y+15, r1	; 0x0f
    3532:	18 8a       	std	Y+16, r1	; 0x10
    3534:	88 27       	eor	r24, r24
    3536:	99 27       	eor	r25, r25
    3538:	86 1b       	sub	r24, r22
    353a:	97 0b       	sbc	r25, r23
    353c:	04 c0       	rjmp	.+8      	; 0x3546 <__lshrdi3+0x66>
    353e:	56 95       	lsr	r21
    3540:	47 95       	ror	r20
    3542:	37 95       	ror	r19
    3544:	27 95       	ror	r18
    3546:	8a 95       	dec	r24
    3548:	d2 f7       	brpl	.-12     	; 0x353e <__lshrdi3+0x5e>
    354a:	29 87       	std	Y+9, r18	; 0x09
    354c:	3a 87       	std	Y+10, r19	; 0x0a
    354e:	4b 87       	std	Y+11, r20	; 0x0b
    3550:	5c 87       	std	Y+12, r21	; 0x0c
    3552:	2d c0       	rjmp	.+90     	; 0x35ae <__lshrdi3+0xce>
    3554:	11 27       	eor	r17, r17
    3556:	07 fd       	sbrc	r16, 7
    3558:	10 95       	com	r17
    355a:	da 01       	movw	r26, r20
    355c:	c9 01       	movw	r24, r18
    355e:	00 2e       	mov	r0, r16
    3560:	04 c0       	rjmp	.+8      	; 0x356a <__lshrdi3+0x8a>
    3562:	b6 95       	lsr	r27
    3564:	a7 95       	ror	r26
    3566:	97 95       	ror	r25
    3568:	87 95       	ror	r24
    356a:	0a 94       	dec	r0
    356c:	d2 f7       	brpl	.-12     	; 0x3562 <__lshrdi3+0x82>
    356e:	8d 87       	std	Y+13, r24	; 0x0d
    3570:	9e 87       	std	Y+14, r25	; 0x0e
    3572:	af 87       	std	Y+15, r26	; 0x0f
    3574:	b8 8b       	std	Y+16, r27	; 0x10
    3576:	da 01       	movw	r26, r20
    3578:	c9 01       	movw	r24, r18
    357a:	04 c0       	rjmp	.+8      	; 0x3584 <__lshrdi3+0xa4>
    357c:	88 0f       	add	r24, r24
    357e:	99 1f       	adc	r25, r25
    3580:	aa 1f       	adc	r26, r26
    3582:	bb 1f       	adc	r27, r27
    3584:	6a 95       	dec	r22
    3586:	d2 f7       	brpl	.-12     	; 0x357c <__lshrdi3+0x9c>
    3588:	29 81       	ldd	r18, Y+1	; 0x01
    358a:	3a 81       	ldd	r19, Y+2	; 0x02
    358c:	4b 81       	ldd	r20, Y+3	; 0x03
    358e:	5c 81       	ldd	r21, Y+4	; 0x04
    3590:	04 c0       	rjmp	.+8      	; 0x359a <__lshrdi3+0xba>
    3592:	56 95       	lsr	r21
    3594:	47 95       	ror	r20
    3596:	37 95       	ror	r19
    3598:	27 95       	ror	r18
    359a:	0a 95       	dec	r16
    359c:	d2 f7       	brpl	.-12     	; 0x3592 <__lshrdi3+0xb2>
    359e:	82 2b       	or	r24, r18
    35a0:	93 2b       	or	r25, r19
    35a2:	a4 2b       	or	r26, r20
    35a4:	b5 2b       	or	r27, r21
    35a6:	89 87       	std	Y+9, r24	; 0x09
    35a8:	9a 87       	std	Y+10, r25	; 0x0a
    35aa:	ab 87       	std	Y+11, r26	; 0x0b
    35ac:	bc 87       	std	Y+12, r27	; 0x0c
    35ae:	29 85       	ldd	r18, Y+9	; 0x09
    35b0:	3a 85       	ldd	r19, Y+10	; 0x0a
    35b2:	4b 85       	ldd	r20, Y+11	; 0x0b
    35b4:	5c 85       	ldd	r21, Y+12	; 0x0c
    35b6:	6d 85       	ldd	r22, Y+13	; 0x0d
    35b8:	7e 85       	ldd	r23, Y+14	; 0x0e
    35ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    35bc:	98 89       	ldd	r25, Y+16	; 0x10
    35be:	60 96       	adiw	r28, 0x10	; 16
    35c0:	e6 e0       	ldi	r30, 0x06	; 6
    35c2:	0c 94 ac 1b 	jmp	0x3758	; 0x3758 <__epilogue_restores__+0x18>

000035c6 <__ashrdi3>:
    35c6:	a0 e1       	ldi	r26, 0x10	; 16
    35c8:	b0 e0       	ldi	r27, 0x00	; 0
    35ca:	e9 ee       	ldi	r30, 0xE9	; 233
    35cc:	fa e1       	ldi	r31, 0x1A	; 26
    35ce:	0c 94 8e 1b 	jmp	0x371c	; 0x371c <__prologue_saves__+0x14>
    35d2:	00 23       	and	r16, r16
    35d4:	09 f4       	brne	.+2      	; 0x35d8 <__ashrdi3+0x12>
    35d6:	66 c0       	rjmp	.+204    	; 0x36a4 <__ashrdi3+0xde>
    35d8:	6e 01       	movw	r12, r28
    35da:	08 94       	sec
    35dc:	c1 1c       	adc	r12, r1
    35de:	d1 1c       	adc	r13, r1
    35e0:	a8 e0       	ldi	r26, 0x08	; 8
    35e2:	f6 01       	movw	r30, r12
    35e4:	11 92       	st	Z+, r1
    35e6:	aa 95       	dec	r26
    35e8:	e9 f7       	brne	.-6      	; 0x35e4 <__ashrdi3+0x1e>
    35ea:	29 83       	std	Y+1, r18	; 0x01
    35ec:	3a 83       	std	Y+2, r19	; 0x02
    35ee:	4b 83       	std	Y+3, r20	; 0x03
    35f0:	5c 83       	std	Y+4, r21	; 0x04
    35f2:	6d 83       	std	Y+5, r22	; 0x05
    35f4:	7e 83       	std	Y+6, r23	; 0x06
    35f6:	8f 83       	std	Y+7, r24	; 0x07
    35f8:	98 87       	std	Y+8, r25	; 0x08
    35fa:	20 e2       	ldi	r18, 0x20	; 32
    35fc:	20 1b       	sub	r18, r16
    35fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3600:	9e 81       	ldd	r25, Y+6	; 0x06
    3602:	af 81       	ldd	r26, Y+7	; 0x07
    3604:	b8 85       	ldd	r27, Y+8	; 0x08
    3606:	42 2f       	mov	r20, r18
    3608:	55 27       	eor	r21, r21
    360a:	47 fd       	sbrc	r20, 7
    360c:	50 95       	com	r21
    360e:	12 16       	cp	r1, r18
    3610:	b4 f0       	brlt	.+44     	; 0x363e <__ashrdi3+0x78>
    3612:	8c 01       	movw	r16, r24
    3614:	9d 01       	movw	r18, r26
    3616:	33 0f       	add	r19, r19
    3618:	00 0b       	sbc	r16, r16
    361a:	10 2f       	mov	r17, r16
    361c:	98 01       	movw	r18, r16
    361e:	0d 87       	std	Y+13, r16	; 0x0d
    3620:	1e 87       	std	Y+14, r17	; 0x0e
    3622:	2f 87       	std	Y+15, r18	; 0x0f
    3624:	38 8b       	std	Y+16, r19	; 0x10
    3626:	22 27       	eor	r18, r18
    3628:	33 27       	eor	r19, r19
    362a:	24 1b       	sub	r18, r20
    362c:	35 0b       	sbc	r19, r21
    362e:	04 c0       	rjmp	.+8      	; 0x3638 <__ashrdi3+0x72>
    3630:	b5 95       	asr	r27
    3632:	a7 95       	ror	r26
    3634:	97 95       	ror	r25
    3636:	87 95       	ror	r24
    3638:	2a 95       	dec	r18
    363a:	d2 f7       	brpl	.-12     	; 0x3630 <__ashrdi3+0x6a>
    363c:	27 c0       	rjmp	.+78     	; 0x368c <__ashrdi3+0xc6>
    363e:	11 27       	eor	r17, r17
    3640:	07 fd       	sbrc	r16, 7
    3642:	10 95       	com	r17
    3644:	6c 01       	movw	r12, r24
    3646:	7d 01       	movw	r14, r26
    3648:	00 2e       	mov	r0, r16
    364a:	04 c0       	rjmp	.+8      	; 0x3654 <__ashrdi3+0x8e>
    364c:	f5 94       	asr	r15
    364e:	e7 94       	ror	r14
    3650:	d7 94       	ror	r13
    3652:	c7 94       	ror	r12
    3654:	0a 94       	dec	r0
    3656:	d2 f7       	brpl	.-12     	; 0x364c <__ashrdi3+0x86>
    3658:	cd 86       	std	Y+13, r12	; 0x0d
    365a:	de 86       	std	Y+14, r13	; 0x0e
    365c:	ef 86       	std	Y+15, r14	; 0x0f
    365e:	f8 8a       	std	Y+16, r15	; 0x10
    3660:	04 c0       	rjmp	.+8      	; 0x366a <__ashrdi3+0xa4>
    3662:	88 0f       	add	r24, r24
    3664:	99 1f       	adc	r25, r25
    3666:	aa 1f       	adc	r26, r26
    3668:	bb 1f       	adc	r27, r27
    366a:	4a 95       	dec	r20
    366c:	d2 f7       	brpl	.-12     	; 0x3662 <__ashrdi3+0x9c>
    366e:	29 81       	ldd	r18, Y+1	; 0x01
    3670:	3a 81       	ldd	r19, Y+2	; 0x02
    3672:	4b 81       	ldd	r20, Y+3	; 0x03
    3674:	5c 81       	ldd	r21, Y+4	; 0x04
    3676:	04 c0       	rjmp	.+8      	; 0x3680 <__ashrdi3+0xba>
    3678:	56 95       	lsr	r21
    367a:	47 95       	ror	r20
    367c:	37 95       	ror	r19
    367e:	27 95       	ror	r18
    3680:	0a 95       	dec	r16
    3682:	d2 f7       	brpl	.-12     	; 0x3678 <__ashrdi3+0xb2>
    3684:	82 2b       	or	r24, r18
    3686:	93 2b       	or	r25, r19
    3688:	a4 2b       	or	r26, r20
    368a:	b5 2b       	or	r27, r21
    368c:	89 87       	std	Y+9, r24	; 0x09
    368e:	9a 87       	std	Y+10, r25	; 0x0a
    3690:	ab 87       	std	Y+11, r26	; 0x0b
    3692:	bc 87       	std	Y+12, r27	; 0x0c
    3694:	29 85       	ldd	r18, Y+9	; 0x09
    3696:	3a 85       	ldd	r19, Y+10	; 0x0a
    3698:	4b 85       	ldd	r20, Y+11	; 0x0b
    369a:	5c 85       	ldd	r21, Y+12	; 0x0c
    369c:	6d 85       	ldd	r22, Y+13	; 0x0d
    369e:	7e 85       	ldd	r23, Y+14	; 0x0e
    36a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    36a2:	98 89       	ldd	r25, Y+16	; 0x10
    36a4:	60 96       	adiw	r28, 0x10	; 16
    36a6:	e8 e0       	ldi	r30, 0x08	; 8
    36a8:	0c 94 aa 1b 	jmp	0x3754	; 0x3754 <__epilogue_restores__+0x14>

000036ac <__udivmodqi4>:
    36ac:	99 1b       	sub	r25, r25
    36ae:	79 e0       	ldi	r23, 0x09	; 9
    36b0:	04 c0       	rjmp	.+8      	; 0x36ba <__udivmodqi4_ep>

000036b2 <__udivmodqi4_loop>:
    36b2:	99 1f       	adc	r25, r25
    36b4:	96 17       	cp	r25, r22
    36b6:	08 f0       	brcs	.+2      	; 0x36ba <__udivmodqi4_ep>
    36b8:	96 1b       	sub	r25, r22

000036ba <__udivmodqi4_ep>:
    36ba:	88 1f       	adc	r24, r24
    36bc:	7a 95       	dec	r23
    36be:	c9 f7       	brne	.-14     	; 0x36b2 <__udivmodqi4_loop>
    36c0:	80 95       	com	r24
    36c2:	08 95       	ret

000036c4 <__udivmodsi4>:
    36c4:	a1 e2       	ldi	r26, 0x21	; 33
    36c6:	1a 2e       	mov	r1, r26
    36c8:	aa 1b       	sub	r26, r26
    36ca:	bb 1b       	sub	r27, r27
    36cc:	fd 01       	movw	r30, r26
    36ce:	0d c0       	rjmp	.+26     	; 0x36ea <__udivmodsi4_ep>

000036d0 <__udivmodsi4_loop>:
    36d0:	aa 1f       	adc	r26, r26
    36d2:	bb 1f       	adc	r27, r27
    36d4:	ee 1f       	adc	r30, r30
    36d6:	ff 1f       	adc	r31, r31
    36d8:	a2 17       	cp	r26, r18
    36da:	b3 07       	cpc	r27, r19
    36dc:	e4 07       	cpc	r30, r20
    36de:	f5 07       	cpc	r31, r21
    36e0:	20 f0       	brcs	.+8      	; 0x36ea <__udivmodsi4_ep>
    36e2:	a2 1b       	sub	r26, r18
    36e4:	b3 0b       	sbc	r27, r19
    36e6:	e4 0b       	sbc	r30, r20
    36e8:	f5 0b       	sbc	r31, r21

000036ea <__udivmodsi4_ep>:
    36ea:	66 1f       	adc	r22, r22
    36ec:	77 1f       	adc	r23, r23
    36ee:	88 1f       	adc	r24, r24
    36f0:	99 1f       	adc	r25, r25
    36f2:	1a 94       	dec	r1
    36f4:	69 f7       	brne	.-38     	; 0x36d0 <__udivmodsi4_loop>
    36f6:	60 95       	com	r22
    36f8:	70 95       	com	r23
    36fa:	80 95       	com	r24
    36fc:	90 95       	com	r25
    36fe:	9b 01       	movw	r18, r22
    3700:	ac 01       	movw	r20, r24
    3702:	bd 01       	movw	r22, r26
    3704:	cf 01       	movw	r24, r30
    3706:	08 95       	ret

00003708 <__prologue_saves__>:
    3708:	2f 92       	push	r2
    370a:	3f 92       	push	r3
    370c:	4f 92       	push	r4
    370e:	5f 92       	push	r5
    3710:	6f 92       	push	r6
    3712:	7f 92       	push	r7
    3714:	8f 92       	push	r8
    3716:	9f 92       	push	r9
    3718:	af 92       	push	r10
    371a:	bf 92       	push	r11
    371c:	cf 92       	push	r12
    371e:	df 92       	push	r13
    3720:	ef 92       	push	r14
    3722:	ff 92       	push	r15
    3724:	0f 93       	push	r16
    3726:	1f 93       	push	r17
    3728:	cf 93       	push	r28
    372a:	df 93       	push	r29
    372c:	cd b7       	in	r28, 0x3d	; 61
    372e:	de b7       	in	r29, 0x3e	; 62
    3730:	ca 1b       	sub	r28, r26
    3732:	db 0b       	sbc	r29, r27
    3734:	0f b6       	in	r0, 0x3f	; 63
    3736:	f8 94       	cli
    3738:	de bf       	out	0x3e, r29	; 62
    373a:	0f be       	out	0x3f, r0	; 63
    373c:	cd bf       	out	0x3d, r28	; 61
    373e:	09 94       	ijmp

00003740 <__epilogue_restores__>:
    3740:	2a 88       	ldd	r2, Y+18	; 0x12
    3742:	39 88       	ldd	r3, Y+17	; 0x11
    3744:	48 88       	ldd	r4, Y+16	; 0x10
    3746:	5f 84       	ldd	r5, Y+15	; 0x0f
    3748:	6e 84       	ldd	r6, Y+14	; 0x0e
    374a:	7d 84       	ldd	r7, Y+13	; 0x0d
    374c:	8c 84       	ldd	r8, Y+12	; 0x0c
    374e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3750:	aa 84       	ldd	r10, Y+10	; 0x0a
    3752:	b9 84       	ldd	r11, Y+9	; 0x09
    3754:	c8 84       	ldd	r12, Y+8	; 0x08
    3756:	df 80       	ldd	r13, Y+7	; 0x07
    3758:	ee 80       	ldd	r14, Y+6	; 0x06
    375a:	fd 80       	ldd	r15, Y+5	; 0x05
    375c:	0c 81       	ldd	r16, Y+4	; 0x04
    375e:	1b 81       	ldd	r17, Y+3	; 0x03
    3760:	aa 81       	ldd	r26, Y+2	; 0x02
    3762:	b9 81       	ldd	r27, Y+1	; 0x01
    3764:	ce 0f       	add	r28, r30
    3766:	d1 1d       	adc	r29, r1
    3768:	0f b6       	in	r0, 0x3f	; 63
    376a:	f8 94       	cli
    376c:	de bf       	out	0x3e, r29	; 62
    376e:	0f be       	out	0x3f, r0	; 63
    3770:	cd bf       	out	0x3d, r28	; 61
    3772:	ed 01       	movw	r28, r26
    3774:	08 95       	ret

00003776 <memcmp_P>:
    3776:	fb 01       	movw	r30, r22
    3778:	dc 01       	movw	r26, r24
    377a:	04 c0       	rjmp	.+8      	; 0x3784 <memcmp_P+0xe>
    377c:	8d 91       	ld	r24, X+
    377e:	05 90       	lpm	r0, Z+
    3780:	80 19       	sub	r24, r0
    3782:	21 f4       	brne	.+8      	; 0x378c <memcmp_P+0x16>
    3784:	41 50       	subi	r20, 0x01	; 1
    3786:	50 40       	sbci	r21, 0x00	; 0
    3788:	c8 f7       	brcc	.-14     	; 0x377c <memcmp_P+0x6>
    378a:	88 1b       	sub	r24, r24
    378c:	99 0b       	sbc	r25, r25
    378e:	08 95       	ret

00003790 <memcpy_P>:
    3790:	fb 01       	movw	r30, r22
    3792:	dc 01       	movw	r26, r24
    3794:	02 c0       	rjmp	.+4      	; 0x379a <memcpy_P+0xa>
    3796:	05 90       	lpm	r0, Z+
    3798:	0d 92       	st	X+, r0
    379a:	41 50       	subi	r20, 0x01	; 1
    379c:	50 40       	sbci	r21, 0x00	; 0
    379e:	d8 f7       	brcc	.-10     	; 0x3796 <memcpy_P+0x6>
    37a0:	08 95       	ret

000037a2 <strncmp_P>:
    37a2:	fb 01       	movw	r30, r22
    37a4:	dc 01       	movw	r26, r24
    37a6:	41 50       	subi	r20, 0x01	; 1
    37a8:	50 40       	sbci	r21, 0x00	; 0
    37aa:	30 f0       	brcs	.+12     	; 0x37b8 <strncmp_P+0x16>
    37ac:	8d 91       	ld	r24, X+
    37ae:	05 90       	lpm	r0, Z+
    37b0:	80 19       	sub	r24, r0
    37b2:	19 f4       	brne	.+6      	; 0x37ba <strncmp_P+0x18>
    37b4:	00 20       	and	r0, r0
    37b6:	b9 f7       	brne	.-18     	; 0x37a6 <strncmp_P+0x4>
    37b8:	88 1b       	sub	r24, r24
    37ba:	99 0b       	sbc	r25, r25
    37bc:	08 95       	ret

000037be <memcpy>:
    37be:	fb 01       	movw	r30, r22
    37c0:	dc 01       	movw	r26, r24
    37c2:	02 c0       	rjmp	.+4      	; 0x37c8 <memcpy+0xa>
    37c4:	01 90       	ld	r0, Z+
    37c6:	0d 92       	st	X+, r0
    37c8:	41 50       	subi	r20, 0x01	; 1
    37ca:	50 40       	sbci	r21, 0x00	; 0
    37cc:	d8 f7       	brcc	.-10     	; 0x37c4 <memcpy+0x6>
    37ce:	08 95       	ret

000037d0 <_exit>:
    37d0:	f8 94       	cli

000037d2 <__stop_program>:
    37d2:	ff cf       	rjmp	.-2      	; 0x37d2 <__stop_program>
